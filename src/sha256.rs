use core::default::Default;
use core::mem::transmute;

const H: [u32; 8] = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,
];


pub struct Sha256 {
    state: [u32; 8],  // 256 bit
    completed_data_blocks: u64,
    pending: [u8; 64], //512 bit
    num_pending: usize,
}

impl Default for Sha256 {
    fn default() -> Self {
        Self {
            state: H, // 256 bit
            completed_data_blocks: 0,
            pending: [0u8; 64], // 512 bit
            num_pending: 0,
        }
    }
}

impl Sha256 {
    /*
    pub fn with_state(state: [u32; 8]) -> Self {
        Self {
            state,
            completed_data_blocks: 0,
            pending: [0u8; 64],
            num_pending: 0,
        }
    }*/
    //state: 256 bit. one data block: 512 bit
    fn update_state(state: &mut [u32; 8], data: &[u8; 64]) {
        const K: [u32; 64] = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
        ];

        let mut w: [u32; 64] = [0; 64]; // 32 * 64 = 2048 bit
        //let mut w = unsafe { MaybeUninit::<[u32; 64]>::uninit().assume_init() };
        //break chunk into sixteen 32-bit big-endian words w[0..15]
        for i in 0..16 {
            w[i] =
                u32::from_ne_bytes(unsafe { *(data[i * 4..i * 4 + 4].as_ptr() as *const [u8; 4]) })
                    .to_be();
        }

        let [mut s0, mut s1, mut t0, mut t1, mut ch, mut ma]: [u32; 6];
        //Extend the sixteen 32-bit words into sixty-four 32-bit words:
        for i in 16..64 {
            s0 = w[i - 15].rotate_right(7) ^ w[i - 15].rotate_right(18) ^ (w[i - 15] >> 3);
            s1 = w[i - 2].rotate_right(17) ^ w[i - 2].rotate_right(19) ^ (w[i - 2] >> 10);
            w[i] = w[i - 16]
                .wrapping_add(s0)
                .wrapping_add(w[i - 7])
                .wrapping_add(s1);
        }

        let mut h = *state;
        for i in 0..64 {
            //ch := (e and f) xor ((not e) and g)
            ch = (h[4] & h[5]) ^ (!h[4] & h[6]);
            //maj := (a and b) xor (a and c) xor(b and c)
            ma = (h[0] & h[1]) ^ (h[0] & h[2]) ^ (h[1] & h[2]);
            //s0 := (a rightrotate 2) xor (a rightrotate 13) xor(a rightrotate 22)
            s0 = h[0].rotate_right(2) ^ h[0].rotate_right(13) ^ h[0].rotate_right(22);
            //s1 := (e rightrotate 6) xor (e rightrotate 11) xor(e rightrotate 25)
            s1 = h[4].rotate_right(6) ^ h[4].rotate_right(11) ^ h[4].rotate_right(25);
            //t1 := h + s1 + ch + k[i] + w[i]
            t0 = h[7]
                .wrapping_add(s1)
                .wrapping_add(ch)
                .wrapping_add(K[i])
                .wrapping_add(w[i]); // 32 bit.
            //t2 := s0 + maj
            t1 = s0.wrapping_add(ma);

            h[7] = h[6]; //h := g
            h[6] = h[5]; //g := f
            h[5] = h[4]; //f := e
            h[4] = h[3].wrapping_add(t0); //e := d + t1
            h[3] = h[2]; //d := c
            h[2] = h[1]; //c := b
            h[1] = h[0]; //b := a
            h[0] = t0.wrapping_add(t1); //a := t1 + t2
        }
        /*
            h0 := h0 + a
            h1 := h1 + b
            h2 := h2 + c
            h3 := h3 + d
            h4 := h4 + e
            h5 := h5 + f
            h6 := h6 + g
            h7 := h7 + h
        */
        for (i, v) in state.iter_mut().enumerate() {
            *v = v.wrapping_add(h[i]);
        }
    }

    pub fn update(&mut self, data: &[u8]) {
        let mut len = data.len();
        let mut offset = 0;

        if self.num_pending > 0 && self.num_pending + len >= 64 {
            self.pending[self.num_pending..].copy_from_slice(&data[..64 - self.num_pending]);
            Self::update_state(&mut self.state, &self.pending);
            self.completed_data_blocks += 1;
            offset = 64 - self.num_pending;
            len -= offset;
            self.num_pending = 0;
        }

        let data_blocks = len / 64;
        let remain = len % 64;
        for _ in 0..data_blocks {
            Self::update_state(&mut self.state, unsafe {
                transmute::<_, (&[u8; 64], usize)>(&data[offset..offset + 64]).0
            });
            offset += 64;
        }
        self.completed_data_blocks += data_blocks as u64;
        //copy the remain data to the self.pending and increase num_pending.
        if remain > 0 {
            self.pending[self.num_pending..self.num_pending + remain]
                .copy_from_slice(&data[offset..]);
            self.num_pending += remain;
        }
    }

    pub fn finish(mut self) -> [u8; 32] {
        let data_bits = self.completed_data_blocks * 512 + self.num_pending as u64 * 8;
        let mut pending = [0u8; 72]; //all zero.
        pending[0] = 128; //0x80 or 0b10000000

        let offset = if self.num_pending < 56 { // less than 448 bit.
            56 - self.num_pending
        } else {
            120 - self.num_pending
        };
        //copy the length of data bit.
        pending[offset..offset + 8].copy_from_slice(&data_bits.to_be_bytes());
        self.update(&pending[..offset + 8]);

        for h in self.state.iter_mut() {
            *h = h.to_be();
        }
        unsafe { transmute::<_, [u8; 32]>(self.state) }
    }

    pub fn digest(data: &[u8]) -> [u8; 32] {
        let mut sha256 = Self::default();
        sha256.update(data);
        sha256.finish()
    }
    /*
    pub fn state(&self) -> [u32; 8] {
        self.state
    }*/
}

pub struct HMAC;

impl HMAC {
    /// Compute HMAC-SHA256(`input`, `k`)
    pub fn mac(input: &[u8], k: &[u8]) -> [u8; 32] {
        let mut key = [0u8; 64];
        if k.len() > 64 {
            let hash_key = Sha256::digest(k);
            key[0..32].copy_from_slice(&hash_key[0..32]);
        } else {
            key[0..k.len()].copy_from_slice(&k[..]);
        }
        let mut i_key_pad = [0x36; 64];
        for i in 0..64 {
            i_key_pad[i] = i_key_pad[i] ^ key[i];
        } 
        let mut sha256 = Sha256::default();        
        sha256.update(&i_key_pad);
        sha256.update(input);

        let mut o_key_pad = [0x5c; 64];
        for i in 0..64 {
            o_key_pad[i] = o_key_pad[i] ^ key[i];
        } 
        let mut sha256_2 = Sha256::default();        
        sha256_2.update(&o_key_pad);
        sha256_2.update(&sha256.finish());
        sha256_2.finish()
    }
}

#[cfg(test)]
mod tests {
    use HMAC;
    use Sha256;

    #[test]
    fn hash_256() {
        let result = Sha256::digest("mymvdfymrrfmyfnafjsgxnlrolreykzbitelymyeygvhztacttcihfqxjqpvwnaa".as_bytes());
        let correct = [0xa7u8, 0xf9u8, 0x11u8, 0xb5u8, 0xc5u8, 0xc3u8, 0x25u8, 0xffu8, 0xedu8, 0xb0u8, 0xf2u8, 0xd7u8, 0x5au8, 0x6bu8, 0x5bu8, 0x2au8, 0x95u8, 0xfdu8, 0x9du8, 0x0eu8, 0xe2u8, 0xddu8, 0xe1u8, 0x50u8, 0x92u8, 0x3du8, 0x85u8, 0x01u8, 0x42u8, 0xb0u8, 0x0eu8, 0x9bu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");

        //let input = "Rosetta code";
        let result = Sha256::digest("Rosetta code".as_bytes());
        let correct = [0x76u8, 0x4fu8, 0xafu8, 0x5cu8, 0x61u8, 0xacu8, 0x31u8, 0x5fu8, 0x14u8, 0x97u8, 0xf9u8, 0xdfu8, 0xa5u8, 0x42u8, 0x71u8, 0x39u8, 0x65u8, 0xb7u8, 0x85u8, 0xe5u8, 0xccu8, 0x2fu8, 0x70u8, 0x7du8, 0x64u8, 0x68u8, 0xd7u8, 0xd1u8, 0x12u8, 0x4cu8, 0xdfu8, 0xcfu8];
        assert_eq!(result.len(), correct.len(), "Arrays don't have the same length");
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");

        let result = Sha256::digest("lkbidsjrbjssiwvaxwufopjgzmsxyl".as_bytes());
        let correct = [0xbeu8, 0x4du8, 0x72u8, 0x82u8, 0x87u8, 0x4bu8, 0x1au8, 0x8eu8, 0x76u8, 0x41u8, 0xe4u8, 0xdfu8, 0x4bu8, 0x13u8, 0x7eu8, 0x99u8, 0xf9u8, 0x25u8, 0x0fu8, 0xd6u8, 0x2au8, 0xc9u8, 0x3eu8, 0x22u8, 0xbbu8, 0xa8u8, 0x4du8, 0xc4u8, 0xcbu8, 0x90u8, 0x65u8, 0xbcu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("rovgavujwqifygvbhqevsakmpmdmaz".as_bytes());
        let correct = [0x95u8, 0xc9u8, 0xadu8, 0x72u8, 0xfeu8, 0x18u8, 0x89u8, 0x71u8, 0xb7u8, 0x1bu8, 0xdfu8, 0x3cu8, 0xfau8, 0xeeu8, 0x00u8, 0x40u8, 0x7du8, 0xddu8, 0xb8u8, 0x1fu8, 0x3au8, 0x9eu8, 0x87u8, 0x43u8, 0x0au8, 0x3cu8, 0x79u8, 0xe9u8, 0xe6u8, 0xe2u8, 0xd8u8, 0x5au8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("eqrvrszhbrrvtnqpclgwhzgogpvxhm".as_bytes());
        let correct = [0x9fu8, 0xe5u8, 0xa9u8, 0x79u8, 0xbcu8, 0xb8u8, 0xe8u8, 0xd9u8, 0x7bu8, 0x2au8, 0x07u8, 0x99u8, 0xd5u8, 0x99u8, 0x30u8, 0x5fu8, 0xcau8, 0x49u8, 0x34u8, 0xcbu8, 0xecu8, 0x00u8, 0x36u8, 0x05u8, 0x8du8, 0xcdu8, 0x3fu8, 0x03u8, 0x01u8, 0x6fu8, 0x39u8, 0x27u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("hoglyrswfoyahrosybfldkiamhtadd".as_bytes());
        let correct = [0x8du8, 0xd8u8, 0x3eu8, 0x06u8, 0x47u8, 0x59u8, 0x7au8, 0x64u8, 0xcdu8, 0x97u8, 0x22u8, 0x66u8, 0x06u8, 0xc3u8, 0x17u8, 0xc2u8, 0xe6u8, 0xcfu8, 0x04u8, 0x64u8, 0x42u8, 0x98u8, 0xacu8, 0xbdu8, 0x73u8, 0x8eu8, 0x3du8, 0x90u8, 0xddu8, 0x48u8, 0x02u8, 0x57u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("rfsxhopbtbkkvawrcdolndnpbgebiv".as_bytes());
        let correct = [0x6bu8, 0xa8u8, 0xd0u8, 0xf5u8, 0x25u8, 0x78u8, 0xc1u8, 0x68u8, 0xd6u8, 0xaau8, 0x66u8, 0xc1u8, 0xc6u8, 0x60u8, 0xb8u8, 0xd4u8, 0xb3u8, 0xb2u8, 0xa2u8, 0xffu8, 0x2bu8, 0x46u8, 0xa3u8, 0x37u8, 0x01u8, 0xc1u8, 0x52u8, 0x7au8, 0xe0u8, 0x79u8, 0x93u8, 0xbfu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("yflsrxxdkcjodcncaelrriqhkymdyz".as_bytes());
        let correct = [0xb1u8, 0x61u8, 0xceu8, 0xa9u8, 0xf3u8, 0xdbu8, 0x92u8, 0xe8u8, 0x6eu8, 0x07u8, 0x39u8, 0xfcu8, 0xf4u8, 0x07u8, 0xe1u8, 0x1cu8, 0x52u8, 0xeau8, 0xdau8, 0x28u8, 0x81u8, 0x08u8, 0xadu8, 0xd9u8, 0xfbu8, 0x9fu8, 0x95u8, 0x52u8, 0x82u8, 0xd4u8, 0x59u8, 0x94u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("oaicvmnomeroupveahyclepiwraevc".as_bytes());
        let correct = [0xf4u8, 0xcau8, 0x2bu8, 0xc7u8, 0x73u8, 0xd5u8, 0xe9u8, 0x4bu8, 0x4fu8, 0x3au8, 0xcdu8, 0xbbu8, 0x74u8, 0x61u8, 0x54u8, 0xa1u8, 0x56u8, 0xfeu8, 0xabu8, 0x38u8, 0x51u8, 0x79u8, 0xbdu8, 0x9bu8, 0x3au8, 0xf8u8, 0x5bu8, 0xc0u8, 0x87u8, 0xcbu8, 0x49u8, 0x67u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("kgwdkdctahqrtlysljhylpzrhkpfrl".as_bytes());
        let correct = [0x84u8, 0x20u8, 0xd3u8, 0x02u8, 0xdeu8, 0x37u8, 0x39u8, 0xbbu8, 0xc1u8, 0x8bu8, 0x26u8, 0xf4u8, 0x06u8, 0xc3u8, 0x3du8, 0x27u8, 0x85u8, 0x14u8, 0xacu8, 0x4fu8, 0x5eu8, 0xe0u8, 0x7du8, 0x00u8, 0xb1u8, 0x54u8, 0x2du8, 0xf2u8, 0xa2u8, 0xa2u8, 0x86u8, 0xbcu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("zmiotnhkgcxwdurmsntgiwqtoaemno".as_bytes());
        let correct = [0xe8u8, 0xedu8, 0xfdu8, 0x72u8, 0xa7u8, 0x0bu8, 0x24u8, 0xccu8, 0x38u8, 0x00u8, 0x8fu8, 0x26u8, 0x6au8, 0xb2u8, 0x99u8, 0x3du8, 0xd7u8, 0x90u8, 0x9au8, 0xbau8, 0x97u8, 0x20u8, 0xa7u8, 0xc1u8, 0x0fu8, 0xa5u8, 0x70u8, 0x44u8, 0x93u8, 0x6fu8, 0x2bu8, 0xdeu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("iiendiyspacjtfyvstjpfijczcwoor".as_bytes());
        let correct = [0xd6u8, 0x40u8, 0x0du8, 0x76u8, 0x93u8, 0xc3u8, 0x9bu8, 0x1cu8, 0xd7u8, 0x88u8, 0xffu8, 0x2du8, 0x25u8, 0x86u8, 0x38u8, 0x6bu8, 0x8cu8, 0x64u8, 0xbbu8, 0xc4u8, 0x5eu8, 0x5bu8, 0xa6u8, 0x6cu8, 0x60u8, 0x7au8, 0xc6u8, 0x8du8, 0x49u8, 0x91u8, 0x94u8, 0xc9u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("zscnjdivawiimamlrsvntqszqqbqze".as_bytes());
        let correct = [0x85u8, 0x5bu8, 0xc8u8, 0x46u8, 0x81u8, 0x77u8, 0x37u8, 0x7cu8, 0x1au8, 0x4du8, 0xdau8, 0x5du8, 0x3du8, 0xc7u8, 0x4du8, 0x0du8, 0xc9u8, 0x9bu8, 0x86u8, 0x98u8, 0xd6u8, 0x09u8, 0x85u8, 0x46u8, 0xafu8, 0x53u8, 0x22u8, 0x35u8, 0x1au8, 0x8bu8, 0xdau8, 0x62u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("spukwbpehqyodokxtiuhwchfxmqrap".as_bytes());
        let correct = [0x3eu8, 0x19u8, 0xc4u8, 0xa5u8, 0x43u8, 0xd8u8, 0x8au8, 0xbdu8, 0x9cu8, 0xbfu8, 0x20u8, 0xa1u8, 0xc9u8, 0xf8u8, 0x68u8, 0x0au8, 0x38u8, 0xc2u8, 0xb3u8, 0x21u8, 0xccu8, 0x95u8, 0xd3u8, 0xfau8, 0xceu8, 0xe5u8, 0x12u8, 0xa7u8, 0x39u8, 0x36u8, 0x62u8, 0x40u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("gmxltpsuixonkgipvmnqxmqcmorzvd".as_bytes());
        let correct = [0x44u8, 0x91u8, 0xc3u8, 0x42u8, 0x68u8, 0x66u8, 0x72u8, 0xb0u8, 0x1au8, 0x3cu8, 0xffu8, 0x33u8, 0xc9u8, 0x8eu8, 0xe3u8, 0xd2u8, 0xffu8, 0x91u8, 0xd6u8, 0x16u8, 0xb4u8, 0xa9u8, 0x29u8, 0x7bu8, 0xb6u8, 0xe7u8, 0xb4u8, 0x88u8, 0x8du8, 0x49u8, 0xbeu8, 0x86u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("cchqzmihfdlqobhjrrupimwgcidmsj".as_bytes());
        let correct = [0x69u8, 0x85u8, 0xb6u8, 0x6bu8, 0x85u8, 0xd6u8, 0x98u8, 0xcdu8, 0x67u8, 0x25u8, 0x2au8, 0x54u8, 0xc5u8, 0xdbu8, 0xffu8, 0xb9u8, 0x55u8, 0xfbu8, 0x09u8, 0x76u8, 0x83u8, 0x18u8, 0xbau8, 0x1eu8, 0xe6u8, 0x4eu8, 0x06u8, 0xe5u8, 0xcbu8, 0xecu8, 0x46u8, 0x64u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("wyndumpojjfgozhlsgwdwafzrwnzcv".as_bytes());
        let correct = [0x61u8, 0x6du8, 0xe4u8, 0xd9u8, 0x3cu8, 0x6du8, 0x51u8, 0xd3u8, 0xc6u8, 0x89u8, 0xddu8, 0xfeu8, 0xafu8, 0x6fu8, 0xffu8, 0xeau8, 0x15u8, 0xa6u8, 0xddu8, 0xa9u8, 0x2cu8, 0xbfu8, 0xdcu8, 0x29u8, 0x31u8, 0x20u8, 0x7fu8, 0xe9u8, 0x0fu8, 0x85u8, 0x4fu8, 0xfbu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("plrtitnkkaiebhqsxihobkecluphaq".as_bytes());
        let correct = [0x8eu8, 0x09u8, 0x72u8, 0x7au8, 0xd2u8, 0xa4u8, 0x17u8, 0x2du8, 0x97u8, 0x2bu8, 0x33u8, 0x9du8, 0xb6u8, 0x60u8, 0xf3u8, 0xc9u8, 0x08u8, 0x11u8, 0x02u8, 0x8eu8, 0x80u8, 0x10u8, 0x18u8, 0x77u8, 0x91u8, 0xefu8, 0xe4u8, 0x11u8, 0x57u8, 0x1cu8, 0x64u8, 0x02u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("feypzfnzozwelnnoqdfhlxalkeepll".as_bytes());
        let correct = [0xf9u8, 0x58u8, 0x8du8, 0xfdu8, 0xa9u8, 0x0cu8, 0x7du8, 0xd8u8, 0x33u8, 0x3cu8, 0xd5u8, 0x45u8, 0xa7u8, 0x50u8, 0xe0u8, 0x84u8, 0x1au8, 0xb2u8, 0x10u8, 0x64u8, 0xb2u8, 0xb2u8, 0x86u8, 0xc2u8, 0xfcu8, 0x34u8, 0x04u8, 0x07u8, 0x9bu8, 0xc3u8, 0x85u8, 0x95u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("osvaaczcqhhrzneeaxhbbwarpbyeqk".as_bytes());
        let correct = [0x68u8, 0xa6u8, 0x23u8, 0x37u8, 0x3du8, 0x40u8, 0xeeu8, 0xdfu8, 0x0au8, 0xdau8, 0xbbu8, 0xc2u8, 0x59u8, 0x31u8, 0x1bu8, 0x2au8, 0x50u8, 0xb1u8, 0x4bu8, 0x4bu8, 0x25u8, 0x57u8, 0x30u8, 0x83u8, 0xffu8, 0x71u8, 0x28u8, 0x28u8, 0x9bu8, 0x50u8, 0xa3u8, 0xfeu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("jejsoncfjdkwfpjuysjxrjykrrkeds".as_bytes());
        let correct = [0xaeu8, 0xf3u8, 0x1du8, 0x92u8, 0x25u8, 0x65u8, 0x26u8, 0x63u8, 0xdbu8, 0x2au8, 0x74u8, 0xbbu8, 0xf6u8, 0x92u8, 0x95u8, 0xfdu8, 0xabu8, 0x23u8, 0xd9u8, 0xebu8, 0x84u8, 0x1fu8, 0xe2u8, 0x46u8, 0x73u8, 0xcfu8, 0xbfu8, 0xadu8, 0xa9u8, 0x97u8, 0x1du8, 0x00u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("cgqhberwivprvievytppoazqzqgneu".as_bytes());
        let correct = [0x0au8, 0xceu8, 0x1eu8, 0x60u8, 0x6fu8, 0x47u8, 0x01u8, 0x9cu8, 0x1fu8, 0x03u8, 0x16u8, 0xe2u8, 0x92u8, 0xa7u8, 0x6eu8, 0x0bu8, 0x3du8, 0xf1u8, 0xfeu8, 0x48u8, 0x9cu8, 0xdau8, 0xd6u8, 0x98u8, 0x35u8, 0x42u8, 0x65u8, 0x11u8, 0x79u8, 0xa6u8, 0x3du8, 0xfcu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("mwzxvbulqkmxwshguocsenpkvnhihl".as_bytes());
        let correct = [0xf6u8, 0x58u8, 0x5cu8, 0xb2u8, 0x08u8, 0xcbu8, 0xfbu8, 0x91u8, 0xa8u8, 0x37u8, 0x34u8, 0x78u8, 0x1bu8, 0x3fu8, 0xa3u8, 0xeeu8, 0x0eu8, 0x7du8, 0xbfu8, 0x49u8, 0x83u8, 0x43u8, 0x1du8, 0xb7u8, 0xe7u8, 0x00u8, 0x51u8, 0x11u8, 0x6au8, 0x66u8, 0x1fu8, 0x6du8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("tkxhpazgidlayhxnwvbuaadtrztwqv".as_bytes());
        let correct = [0x3du8, 0x47u8, 0x90u8, 0x39u8, 0x04u8, 0x58u8, 0xb9u8, 0xb4u8, 0x4eu8, 0xa9u8, 0x3eu8, 0xcdu8, 0x46u8, 0xddu8, 0x86u8, 0x8au8, 0xc9u8, 0x9du8, 0xb3u8, 0xc2u8, 0x5fu8, 0x88u8, 0xf9u8, 0x99u8, 0x51u8, 0x91u8, 0xa7u8, 0x20u8, 0xfdu8, 0x69u8, 0x62u8, 0x49u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("mttmofgmrcnbffjvaopynqvwtmxfyd".as_bytes());
        let correct = [0xb0u8, 0xd7u8, 0xc9u8, 0x06u8, 0x57u8, 0xa0u8, 0x80u8, 0x89u8, 0xaeu8, 0x60u8, 0x87u8, 0x26u8, 0xfbu8, 0x10u8, 0xafu8, 0xc8u8, 0xf8u8, 0x93u8, 0x09u8, 0x53u8, 0x94u8, 0x28u8, 0x3du8, 0x28u8, 0x07u8, 0x33u8, 0x86u8, 0xa1u8, 0xd4u8, 0x2cu8, 0xdfu8, 0xa9u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("vfaqcmilqbmiyubfcyfghliidzosam".as_bytes());
        let correct = [0xe2u8, 0x70u8, 0x4au8, 0x11u8, 0x58u8, 0xc2u8, 0xe2u8, 0x70u8, 0xe9u8, 0xecu8, 0xefu8, 0x4au8, 0x67u8, 0x1du8, 0xc0u8, 0xc8u8, 0xb4u8, 0x65u8, 0x41u8, 0xbdu8, 0x6au8, 0xe1u8, 0x18u8, 0x07u8, 0x29u8, 0x9du8, 0xe7u8, 0xc4u8, 0x49u8, 0x03u8, 0xe0u8, 0x0cu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("ggsmcixyvtyfqbshypccbeczqqynfv".as_bytes());
        let correct = [0xfau8, 0x8fu8, 0x27u8, 0x59u8, 0xc2u8, 0xfdu8, 0x5au8, 0x6du8, 0x7du8, 0xccu8, 0x5bu8, 0x91u8, 0x5cu8, 0x90u8, 0x33u8, 0xd8u8, 0x90u8, 0xf9u8, 0xfeu8, 0xa7u8, 0x97u8, 0xa9u8, 0xb4u8, 0x61u8, 0x9cu8, 0x00u8, 0x11u8, 0x6au8, 0xaau8, 0x64u8, 0x3cu8, 0xb2u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("cwwhphmcdyydlbpnbyldsnmmnumqkc".as_bytes());
        let correct = [0x9fu8, 0x6du8, 0xf5u8, 0x27u8, 0x48u8, 0x56u8, 0x4du8, 0xbbu8, 0xe1u8, 0xa9u8, 0xd4u8, 0xb7u8, 0x02u8, 0x7cu8, 0x63u8, 0xabu8, 0x74u8, 0x7du8, 0x68u8, 0x6bu8, 0xfdu8, 0x31u8, 0x2bu8, 0xeau8, 0x05u8, 0xd2u8, 0x2bu8, 0x19u8, 0x4eu8, 0xeeu8, 0x2bu8, 0xb8u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("omwtmaocgsxrdatqzoceavhqeynhrt".as_bytes());
        let correct = [0x1cu8, 0xf2u8, 0xcdu8, 0xd6u8, 0xddu8, 0x52u8, 0xddu8, 0x78u8, 0x70u8, 0xe9u8, 0x87u8, 0x2bu8, 0x7fu8, 0xcau8, 0x55u8, 0x20u8, 0x30u8, 0xefu8, 0x59u8, 0xacu8, 0x70u8, 0x80u8, 0x3cu8, 0x01u8, 0xc2u8, 0xb5u8, 0x87u8, 0x26u8, 0xecu8, 0xefu8, 0x80u8, 0x1au8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("vobqvfhzlfsmbwgxzycjcesjhkcmue".as_bytes());
        let correct = [0x90u8, 0x67u8, 0x50u8, 0xe5u8, 0x5bu8, 0xbeu8, 0x19u8, 0xcau8, 0x77u8, 0x8au8, 0x99u8, 0x6cu8, 0xc3u8, 0x87u8, 0x81u8, 0xc1u8, 0x8eu8, 0xa9u8, 0xf2u8, 0x85u8, 0xe2u8, 0x68u8, 0x25u8, 0xe1u8, 0x78u8, 0xbfu8, 0x43u8, 0xc9u8, 0x99u8, 0x76u8, 0xa1u8, 0xc3u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("fnjbjazdshuggtdxgqrjxnavxahrhp".as_bytes());
        let correct = [0x56u8, 0xfeu8, 0xeeu8, 0x71u8, 0x9du8, 0x64u8, 0xf9u8, 0x78u8, 0x5fu8, 0xf5u8, 0xccu8, 0x75u8, 0x1eu8, 0xb1u8, 0x4du8, 0x19u8, 0xfau8, 0x6fu8, 0x79u8, 0xcbu8, 0xd7u8, 0x39u8, 0xb8u8, 0x36u8, 0x43u8, 0x33u8, 0xa9u8, 0xe3u8, 0xd8u8, 0x58u8, 0x71u8, 0x8bu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("gmlxwoifynaaknxqsvnvjaiycewebf".as_bytes());
        let correct = [0xdcu8, 0xb7u8, 0xdfu8, 0x96u8, 0x19u8, 0x2eu8, 0xa2u8, 0xf7u8, 0x13u8, 0x2eu8, 0x65u8, 0x66u8, 0xb4u8, 0x1eu8, 0x3bu8, 0x74u8, 0xb1u8, 0x50u8, 0x8bu8, 0x6eu8, 0x7au8, 0x4eu8, 0x73u8, 0xddu8, 0x7du8, 0x8cu8, 0x01u8, 0x56u8, 0xc8u8, 0xcbu8, 0x3eu8, 0x78u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("flwamfhmimjtbbkawntfaguvtwgxgc".as_bytes());
        let correct = [0x5bu8, 0x24u8, 0xd0u8, 0x5fu8, 0x9bu8, 0x60u8, 0x81u8, 0x21u8, 0xe2u8, 0xf2u8, 0xbfu8, 0xa0u8, 0x34u8, 0x83u8, 0xbbu8, 0xabu8, 0x24u8, 0xa6u8, 0x45u8, 0x38u8, 0x6eu8, 0x2fu8, 0x8eu8, 0xa5u8, 0x82u8, 0xeeu8, 0xe3u8, 0x80u8, 0x75u8, 0x79u8, 0x60u8, 0x68u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("sxuezeafquoxppajnhvfnsuhmdsefw".as_bytes());
        let correct = [0x79u8, 0x65u8, 0x4fu8, 0x46u8, 0x1cu8, 0xceu8, 0xccu8, 0xbdu8, 0x01u8, 0x48u8, 0xd8u8, 0xcdu8, 0x6au8, 0x02u8, 0x51u8, 0xbcu8, 0x93u8, 0x99u8, 0x7fu8, 0x2eu8, 0xa8u8, 0x72u8, 0xa4u8, 0x49u8, 0xceu8, 0xd7u8, 0x85u8, 0xb1u8, 0x48u8, 0x9au8, 0xecu8, 0x90u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("nfbxdijkdswyfnnrjowtoimhmepylp".as_bytes());
        let correct = [0xe0u8, 0x3cu8, 0x3bu8, 0x6fu8, 0x75u8, 0x62u8, 0x22u8, 0xe1u8, 0x55u8, 0x8cu8, 0x6fu8, 0x74u8, 0x60u8, 0x17u8, 0xb6u8, 0x62u8, 0xddu8, 0xa7u8, 0x8eu8, 0x1bu8, 0x9eu8, 0xb2u8, 0x61u8, 0xdbu8, 0xeeu8, 0xf8u8, 0x75u8, 0x2du8, 0x48u8, 0xaeu8, 0x53u8, 0xd1u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("bmxcrlndcnzdneszwhbegohrgitmdt".as_bytes());
        let correct = [0x59u8, 0xa1u8, 0xe1u8, 0x0fu8, 0xe4u8, 0xe4u8, 0x0du8, 0xedu8, 0x35u8, 0x6fu8, 0x2fu8, 0x18u8, 0xc4u8, 0x43u8, 0xcbu8, 0xcdu8, 0x91u8, 0x2bu8, 0xb0u8, 0xc0u8, 0x95u8, 0xc9u8, 0x9bu8, 0x21u8, 0xcau8, 0xa7u8, 0xf8u8, 0x5du8, 0xc6u8, 0x4du8, 0x1cu8, 0x95u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("purovndpxbhgwcaoajldhpibekeinu".as_bytes());
        let correct = [0x32u8, 0x4au8, 0x8eu8, 0x2cu8, 0x4bu8, 0xf2u8, 0xb9u8, 0x98u8, 0xc4u8, 0x81u8, 0xfeu8, 0xa3u8, 0xe8u8, 0x5au8, 0xd1u8, 0xd9u8, 0xd5u8, 0x8fu8, 0x99u8, 0x8eu8, 0x9bu8, 0xdcu8, 0xddu8, 0xb2u8, 0xafu8, 0xbdu8, 0xa6u8, 0x93u8, 0x64u8, 0x71u8, 0x0fu8, 0xfdu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("hejeorwgszummqcfghlrpindcudgrx".as_bytes());
        let correct = [0x56u8, 0xb4u8, 0x80u8, 0x20u8, 0x83u8, 0x3au8, 0x0au8, 0xf6u8, 0x56u8, 0x95u8, 0x4eu8, 0x84u8, 0x07u8, 0xbbu8, 0xafu8, 0x33u8, 0xa1u8, 0xe7u8, 0x0bu8, 0xeeu8, 0x5fu8, 0xfcu8, 0x54u8, 0xf5u8, 0x90u8, 0xbbu8, 0x29u8, 0x65u8, 0x82u8, 0xffu8, 0xc2u8, 0x7fu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("gyyxfqetvryzrlpzdlshcdnnjatahi".as_bytes());
        let correct = [0x51u8, 0xf1u8, 0x23u8, 0x4cu8, 0xd5u8, 0xfbu8, 0x3du8, 0x8bu8, 0xc0u8, 0xc1u8, 0x85u8, 0x85u8, 0xedu8, 0xe4u8, 0x4bu8, 0x3cu8, 0x52u8, 0xd8u8, 0xcdu8, 0x40u8, 0xddu8, 0x78u8, 0xbau8, 0xb8u8, 0x77u8, 0xa8u8, 0xc8u8, 0xf5u8, 0x91u8, 0x64u8, 0xe6u8, 0x77u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("nzvkdpxcgidpiyhjnkmtcjpwtlooub".as_bytes());
        let correct = [0x11u8, 0x46u8, 0x01u8, 0x61u8, 0x77u8, 0x14u8, 0x50u8, 0x63u8, 0x28u8, 0x77u8, 0xb1u8, 0xcau8, 0x06u8, 0x93u8, 0xabu8, 0xbfu8, 0x89u8, 0x5cu8, 0x78u8, 0x04u8, 0xfdu8, 0xadu8, 0xbfu8, 0xcbu8, 0x45u8, 0xd5u8, 0xe2u8, 0x3cu8, 0x55u8, 0x6cu8, 0xa3u8, 0xe8u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("haxnpvoawwoimorqakksupmedtyjsz".as_bytes());
        let correct = [0xd9u8, 0xc7u8, 0x84u8, 0x7fu8, 0xecu8, 0x4bu8, 0xceu8, 0x90u8, 0xceu8, 0xd0u8, 0x11u8, 0xc9u8, 0x68u8, 0xabu8, 0x31u8, 0x2au8, 0x2eu8, 0x50u8, 0x13u8, 0xebu8, 0x95u8, 0x45u8, 0xebu8, 0x31u8, 0xc0u8, 0xedu8, 0xa6u8, 0x28u8, 0x32u8, 0xc3u8, 0x4bu8, 0x17u8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = Sha256::digest("zhumnwkyrgwsxzjbikldwjjeiabjyx".as_bytes());
        let correct = [0xd7u8, 0x6au8, 0x70u8, 0xc4u8, 0xf0u8, 0xadu8, 0x5cu8, 0xa3u8, 0xfcu8, 0x1cu8, 0x86u8, 0x19u8, 0x46u8, 0x2fu8, 0x06u8, 0x09u8, 0x58u8, 0xf0u8, 0x42u8, 0x2cu8, 0xacu8, 0x99u8, 0x36u8, 0x3eu8, 0x49u8, 0x07u8, 0x05u8, 0xa8u8, 0x23u8, 0xd2u8, 0xc5u8, 0x8eu8];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
    }

    #[test]
    fn hmac_mac() {
        let h = HMAC::mac(&[], &[0u8; 32]);
        assert_eq!(
            &h[..],
            &[
                182, 19, 103, 154, 8, 20, 217, 236, 119, 47, 149, 215, 120, 195, 95, 197, 255, 22, 151,
                196, 147, 113, 86, 83, 198, 199, 18, 20, 66, 146, 197, 173
            ]
        );

        let h = HMAC::mac(&[42u8; 69], &[]);
        assert_eq!(
            &h[..],
            &[
                225, 88, 35, 8, 78, 185, 165, 6, 235, 124, 28, 250, 112, 124, 159, 119, 159, 88, 184,
                61, 7, 37, 166, 229, 71, 154, 83, 153, 151, 181, 182, 72
            ]
        );

        let h = HMAC::mac(&[69u8; 250], &[42u8; 50]);
        assert_eq!(
            &h[..],
            &[
                112, 156, 120, 216, 86, 25, 79, 210, 155, 193, 32, 120, 116, 134, 237, 14, 198, 1, 64,
                41, 124, 196, 103, 91, 109, 216, 36, 133, 4, 234, 218, 228
            ]
        );
    }
}