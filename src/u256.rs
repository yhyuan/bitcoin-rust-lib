use core::convert::{From, Into};
use core::ops::{Not, Add, Sub, Mul, Div, Shr, Shl};
use core::cmp::Ordering;
use core::mem::transmute;

use crate::s256::S256;
use crate::sha256::Sha256;
use crate::sha256::HMAC;
use crate::ripemd160::Ripemd160;
use crate::point::Point;
use crate::field256::Field256;

pub const N: fn() -> U256 = || -> U256 {
    U256((0xfffffffffffffffffffffffffffffffeu128, 0xbaaedce6af48a03bbfd25e8cd0364141u128))
};

pub const P: fn() -> U256 = || -> U256 {
    U256((0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFu128, 0xFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2Fu128))
};

const BTC_ALPHA: [u8; 58] = [49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]; 

#[repr(C)]
#[derive(Eq, PartialEq, Debug, Copy, Clone)]
pub struct U256((u128, u128));

impl U256 {
    pub fn new(value1: u128, value2: u128) -> Self {
        U256((value1, value2))
    }

    pub fn unwrap(&self) -> (u128, u128) {
        self.0
    }

    pub fn zero() -> U256 { U256((0u128, 0u128)) }

    pub fn one() -> U256 { U256((0u128, 1u128)) }

    pub fn from_be_bytes(x: [u8; 32]) -> U256 {
        let mut x0: [u8; 16] = [0; 16];
        x0[0..16].copy_from_slice(&x[0..16]);
        let mut x1: [u8; 16] = [0; 16];
        x1[0..16].copy_from_slice(&x[16..32]);
        U256((u128::from_be_bytes(x0), u128::from_be_bytes(x1)))
    }

    pub fn to_be_bytes(self) -> [u8; 32] {
        let mut x: [u8; 32] = [0; 32];
        let U256((x0, x1)) = self;
        let x0_bytes = x0.to_be_bytes();
        x[0..16].copy_from_slice(&x0_bytes[0..16]);
        let x1_bytes = x1.to_be_bytes();
        x[16..32].copy_from_slice(&x1_bytes[0..16]);
        x
    }

    pub fn max_value() -> U256 { U256((u128::max_value(), u128::max_value())) }

    pub fn multiple_u128(x: &u128, y: &u128) -> U256 {
        let divide_u128 = |x: &u128| -> (u128, u128) {
            //(x.overflowing_shr(64).0, x.overflowing_shl(64).0.overflowing_shr(64).0)
            (x.overflowing_shr(64).0, x & 0x0000_0000_0000_0000FFFF_FFFF_FFFF_FFFF_u128)
        };
        let (x0, x1) = divide_u128(&x);
        let (y0, y1) = divide_u128(&y);
        let (v, o) = (x0 * y1).overflowing_add(x1 * y0);
        let (v0, v1) = divide_u128(&v); //6, 2
        let v0_1 = if o {v0 + 1u128.overflowing_shl(64).0} else {v0};
        let (z1, o) = (x1 * y1).overflowing_add(v1.overflowing_shl(64).0);
        let v0_2 = if o {v0_1 + 1} else {v0_1}; // 17
        let z0 = x0 * y0 + v0_2;
        U256((z0, z1))
    }

    pub fn overflowing_add(self, other: U256) -> (U256, bool) {
        let U256((self_upper, self_lower)) = self;
        let U256((other_upper, other_lower)) = other;
        let (v_lower, o1) = self_lower.overflowing_add(other_lower);
        if o1 {
            let (temp_upper, o2) = self_upper.overflowing_add(1);
            let (v_upper, o3) = other_upper.overflowing_add(temp_upper);
            (U256((v_upper, v_lower)), o2 || o3)
        } else {
            let (v_upper, o2) = self_upper.overflowing_add(other_upper);
            (U256((v_upper, v_lower)), o2)
        }
    }

    #[inline]
    pub fn is_odd(self) -> bool {
        let U256((_, self_lower)) = self;
        self_lower & 1u128 == 1u128
    }

    #[inline]
    pub fn is_zero(self) -> bool {
        let U256((x0, x1)) = self;
        x0 == 0u128 && x1 == 0u128
    }

    pub fn mod_inv(self, module: U256) -> U256 {
        let mut mn = (S256::new(module, true), S256::new(self, true));
        let mut xy = (S256::new(U256::zero(), true), S256::new(U256::one(), true));
        // let mut mn = (S256((module, true)), S256((self, true)));
        // let mut xy = (S256((U256::zero(), true)), S256((U256::one(), true)));
        let is_zero = |x: &S256| -> bool {
            // let S256((u, _)) = *x;
            let u = (*x).absolute_value();
            u.is_zero()
        };
        while !is_zero(&(mn.1)){
            let (divider, remainder) = mn.0 / mn.1;
            let (_, z1) = divider * xy.1;
            xy = (xy.1, xy.0 - z1);
            mn = (mn.1, remainder);
        }
        // let S256((mut result, s)) = xy.0;
        let mut result = xy.0.absolute_value();
        let s = xy.0.get_sign();
        if !s {
            result = module - result;
        }
        result
    }

    pub fn divide_58_384bit(u: (u128, u128, u128)) -> ((u128, u128, u128), usize) {
        let divide_58_256bit = |x: (u128, u128)| -> ((u128, u128), usize) {
            let (x0, x1) = x;
            let a0 = x0 / 58;
            let b0 = x0 % 58;
            let a1 = x1 / 58;
            let b1 = x1 % 58;

            let a = 0x469ee58469ee58469ee58469ee58469u128; //hex((2 ** 128) // 58)
            let b = 54u128;

            let t = b0 * b + b1;
            let remainder = t % 58;

            let mut y0 = a0;
            let y1 = a1 + t / 58;
            //let t1 = b0 * a;
            let (y1, s) = y1.overflowing_add(b0 * a);
            if s {
                y0 = y0 + 1;
            }
            ((y0, y1), remainder as usize)
        };

        match u {
            (0u128, 0u128, x2)   =>  ((0u128, 0u128, x2 / 58), (x2 % 58) as usize),
            (0u128, x1, x2)   =>  {
                let ((y1, y2), r) = divide_58_256bit((x1, x2));
                ((0u128, y1, y2), r)
            },
            (x0, x1, x2)   =>  {
                let ((y0, y1), r1) = divide_58_256bit((x0, x1));
                let ((z0, z1), r2) = divide_58_256bit((r1 as u128, x2));
                let (z2, s) = y1.overflowing_add(z0);
                if s {
                    ((y0 + 1, z2, z1), r2)
                } else {
                    ((y0, z2, z1), r2)
                }
            },
        }
    }

    pub fn to_base58(u: (u128, u128, u128), num_of_zeros: u8) -> [u8; 66] {
        let mut base58: [u8; 66] = [0; 66]; // log(2**384) / log(58) = 65.5
        let mut x = u;
        let mut i = base58.len();
        let is_zero = |x: (u128, u128, u128)| -> bool {
            let (x0, x1, x2) = x;
            x0 == 0u128 && x1 == 0u128 && x2 == 0u128
        };
        while !is_zero(x) {
            let (divider, remainder) = U256::divide_58_384bit(x);
            if i == 0 {
                unreachable!();
            }
            base58[i - 1] = BTC_ALPHA[remainder];
            x = divider;
            i = i - 1; 
        }
        // 66 - i is the size of result.
        for _ in 0..num_of_zeros {
            base58[i - 1] = BTC_ALPHA[0];
            i = i - 1;
        } 
        unsafe { transmute::<_, [u8; 66]>(base58) }
    }

    pub fn calculate_p2pkh_address(self, is_testnet: bool)  -> [u8; 34]{
        let U256((x0, x1)) = self;
        let public_key = Point::g().multiple(U256((x0, x1))).calculate_public_key();
        let result = Ripemd160::digest(&Sha256::digest(&public_key));
        let mut ripemd160: [u8; 21] = [0; 21]; // 32 * 65
        ripemd160[0] = if is_testnet {0x6fu8} else {0x00u8}; //main net. test net 0x6fu8
        ripemd160[1..21].copy_from_slice(&result);
        let mut num_of_zeros = 0u8;
        for i in 0..21 {
            if ripemd160[i] == 0x00u8 {
                num_of_zeros = num_of_zeros + 1;
            } else {
                break;
            }
        }
        let double_sha256 = Sha256::digest(&Sha256::digest(&ripemd160));
        let mut v: [u8; 32] = [0u8; 32]; // 32 * 65
        v[7..28].copy_from_slice(&ripemd160[0..21]); //The first 7 byte are 0.
        v[28..].copy_from_slice(&double_sha256[..4]);        
        let U256((x0, x1)) = U256::from_be_bytes(v); // v has 25 bytes. First byte is for main net for test net. The last 4 bytes are double sha. 
        //math.log(0x70*2**192) / math.log(58) = 33.93. The address for main net and test net are always less than 34.
        let base58 = U256::to_base58((0u128, x0, x1), num_of_zeros);
        let mut address: [u8; 34] = [0u8; 34];
        address[0..34].copy_from_slice(&base58[32..66]);        
        address
    }
   
    pub fn sign(self, z: U256) -> (U256, U256) {
        let U256((x0, x1)) = self;
        let k = self.deterministic_k(z);
        // let Point((f, _)) = Point::g().multiple(k);
        let (f, _) = Point::g().multiple(k).unwrap();
        let r = f.u;
        let k_f = Field256 {u: k, p: N};
        let r_f = Field256 {u: r, p: N};
        let z_f = Field256 {u: z, p: N};
        let key_f = Field256 {u: U256((x0, x1)), p: N};
        let s_f = (z_f + (r_f * key_f)) / k_f;
        let mut s = s_f.u;
        
        if s > U256((0xfffffffffffffffffffffffffffffffeu128 / 2u128, 0xbaaedce6af48a03bbfd25e8cd0364141u128 / 2u128)) {
            s = N() - s;
        }
        (r, s)
    }

    pub fn deterministic_k(self, z_input: U256) -> U256 {
        let mut k = U256::zero().to_be_bytes();
        let mut v = [0x01; 32];
        let mut z = z_input;
        if z > N() {
            z = z - N();
        }
        let z_bytes = z.to_be_bytes();
        let secret_bytes = self.to_be_bytes();
        let mut data = [0u8; 97];
        data[0..32].copy_from_slice(&v[0..32]);
        data[32] = 0x00;
        data[33..65].copy_from_slice(&secret_bytes[0..32]);
        data[65..97].copy_from_slice(&z_bytes[0..32]);
        k = HMAC::mac(&data, &k);
        v = HMAC::mac(&v, &k);
        data[0..32].copy_from_slice(&v[0..32]);
        data[32] = 0x01;
        data[33..65].copy_from_slice(&secret_bytes[0..32]);
        data[65..97].copy_from_slice(&z_bytes[0..32]);
        k = HMAC::mac(&data, &k);
        v = HMAC::mac(&v, &k);
        loop {
            v = HMAC::mac(&v, &k);
            let candidate = U256::from_be_bytes(v);
            if candidate >= U256::one() && candidate < N() {
                return candidate;
            }
            let mut data_2 = [0u8; 33];
            data_2[0..32].copy_from_slice(&v[0..32]);
            data_2[32] = 0x00;
            k = HMAC::mac(&data_2, &k);
            v = HMAC::mac(&v, &k);
        }
    }
    
    pub fn der_encode(self) -> ([u8; 35], usize) {
        let U256((x0, x1)) = self;
        let mut a: [u8; 32] = [0; 32];
        let mut b: [u8; 35] = [0; 35];
        a[0..16].copy_from_slice(&x0.to_be_bytes());
        a[16..32].copy_from_slice(&x1.to_be_bytes());
        let mut num_of_zeros: usize = 0;
        for i in 0..32 {
            if a[i] == 0x00u8 {
                num_of_zeros = num_of_zeros + 1;
            } else {
                break;
            }
        }
        let larger = a[num_of_zeros] >= 0x80u8;
        let size = if larger {32 - num_of_zeros + 1} else {32 - num_of_zeros};
        b[0] = 0x02u8;
        b[1] = size as u8;
        let mut i: usize = 2;
        if larger {
            b[i] = 0x00u8;
            i = i + 1;
        }
        for j in num_of_zeros..32 {
            b[i] = a[j];
            i = i + 1;
        }
        (b, size + 2)
    }

    pub fn encode_der_signature(u: (U256, U256)) -> ([u8; 72], usize) {
        let (u1, u2) = u;
        let (a, a_len) = u1.der_encode();
        let (b, b_len) = u2.der_encode();
        let mut r: [u8; 72] = [0; 72];        
        r[2..2+a_len].copy_from_slice(&a[0..a_len]);
        r[2+a_len..2+a_len + b_len].copy_from_slice(&b[0..b_len]);
        r[0] = 0x30u8;
        r[1] = (a_len + b_len) as u8;
        (r, a_len + b_len + 2)
    }

    pub fn calculate_wif(self, is_testnet: bool)  -> [u8; 51]{
        let U256((x0, x1)) = self;
        let mut a: [u8; 33] = [0; 33]; // 32 * 65
        a[0] = if is_testnet {0xefu8} else {0x80u8};//main net
        a[1..17].copy_from_slice(&x0.to_be_bytes());
        a[17..33].copy_from_slice(&x1.to_be_bytes());
        let double_sha256 = Sha256::digest(&Sha256::digest(&a));

        let mut b: [u8; 16] = [0; 16];
        b[11..16].copy_from_slice(&a[0..5]);
        let x0 = u128::from_be_bytes(b);
        b[0..16].copy_from_slice(&a[5..21]);
        let x1 = u128::from_be_bytes(b);
        b[0..12].copy_from_slice(&a[21..33]);
        b[12..16].copy_from_slice(&double_sha256[0..4]);
        let x2 = u128::from_be_bytes(b);
        let base58 = U256::to_base58((x0, x1, x2), 0); // 0 because of a[0] can not be zero.
        let mut wif: [u8; 51] = [0u8; 51];
        wif[0..51].copy_from_slice(&base58[15..66]);        
        wif
    }

   pub fn calculate_compressed_wif(self, is_testnet: bool)  -> [u8; 52]{
        let U256((x0, x1)) = self;
        let mut a: [u8; 34] = [0; 34]; 
        a[0] = if is_testnet {0xefu8} else {0x80u8};//main net
        a[1..17].copy_from_slice(&x0.to_be_bytes());
        a[17..33].copy_from_slice(&x1.to_be_bytes());
        a[33] = 0x01u8;
        let double_sha256 = Sha256::digest(&Sha256::digest(&a));

        let mut b: [u8; 16] = [0; 16];
        b[10..16].copy_from_slice(&a[0..6]);
        let x0 = u128::from_be_bytes(b);
        b[0..16].copy_from_slice(&a[6..22]);
        let x1 = u128::from_be_bytes(b);
        b[0..12].copy_from_slice(&a[22..34]);
        b[12..16].copy_from_slice(&double_sha256[0..4]);
        let x2 = u128::from_be_bytes(b);
        let base58 = U256::to_base58((x0, x1, x2), 0); // 0 because of a[0] can not be zero.
        let mut wif: [u8; 52] = [0u8; 52];
        wif[0..52].copy_from_slice(&base58[14..66]);        
        wif
    }

}

impl From<u128> for U256 {
    fn from(val: u128) -> U256 {
        U256((0u128, val))
    }
}

impl Into<u128> for U256 {
    fn into(self) -> u128 {
        let U256((self_upper, self_lower)) = self;
        assert!(self_upper == 0u128);
        self_lower
    }
}

impl Not for U256 {
    type Output = U256;

    fn not(self) -> U256 {
        let U256((self_upper, self_lower)) = self;
        U256((!self_upper, !self_lower))
    }
}

impl Add for U256 {
    type Output = U256;

    fn add(self, other: U256) -> U256 {
        let (v, o) = self.overflowing_add(other);
        assert!(o == false);
        v
    }
}

impl Ord for U256 {
    fn cmp(&self, other: &U256) -> Ordering {
        let U256((self_upper, self_lower)) = self;
        let U256((other_upper, other_lower)) = other;
        let compare_u128 = |x: &u128, y: &u128| -> Ordering {
            if x == y {
                Ordering::Equal
            } else if x > y {
                Ordering::Greater
            } else {
                Ordering::Less
            }
        };
        if self_upper == other_upper {
            compare_u128(&self_lower, &other_lower)
        } else {
            compare_u128(&self_upper, &other_upper)
        }
    }
}

impl PartialOrd for U256 {
    fn partial_cmp(&self, other: &U256) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl Sub for U256 {
    type Output = U256;

    fn sub(self, other: U256) -> U256 {
        let U256((self_upper, self_lower)) = self;
        let U256((other_upper, other_lower)) = other;
        if self_upper == other_upper {
            assert!(self_lower >= other_lower);
            U256((0u128, self_lower - other_lower))
        } else {
            assert!(self_upper > other_upper);
            if self_lower >= other_lower {
                U256((self_upper - other_upper, self_lower - other_lower))
            } else {
                U256((self_upper - other_upper - 1, self_lower + (u128::max_value() - other_lower) + 1))
            }
        }
    }
}

impl Mul for U256 {
    type Output = (U256, U256);

    fn mul(self, other: U256) -> (U256, U256) {
        let U256((x0, x1)) = self;
        let U256((y0, y1)) = other;
        let (v, o) = U256::multiple_u128(&x0, &y1).overflowing_add(U256::multiple_u128(&x1, &y0));
        let U256((v0, v1)) = v;
        let v0_1 = if o {U256((1u128, v0))} else {U256((0u128, v0))};
        let (z1, o) = U256::multiple_u128(&x1, &y1).overflowing_add(U256((v1, 0u128)));
        let v0_2 = if o {v0_1 + U256::one()} else {v0_1}; // 17
        let z0 = U256::multiple_u128(&x0, &y0) + v0_2;
        (z0, z1)
    }
}

impl Div for U256 {
    type Output = (U256, U256);

    fn div(self, other: U256) -> (U256, U256) {
        assert!(other != U256::zero());
        let divide_by_max = |x: &u128| -> (u128, u128) {
            let a = u128::max_value() / x;
            let b = u128::max_value() % x;
            if b == x - 1 {
                (a + 1, 0)
            } else {
                (a, b + 1)
            }
        };
        match self.cmp(&other) {
            Ordering::Less =>  (U256::zero(), self),
            Ordering::Equal => (U256::one(), U256::zero()),
            Ordering::Greater => {
                match (self, other) {
                    (U256((x0, x1)), U256((0u128, y1))) if y1 == 1u128 => (U256((x0, x1)), U256::zero()),
                    (U256((0u128, x1)), U256((0u128, y1))) => (U256((0u128, x1 / y1)), U256((0u128, x1 % y1))),
                    (U256((x0, x1)), U256((0u128, y1))) if x0 >= y1 => {
                        let (z0, z1) = U256((x0%y1, x1%y1)) / U256((0u128, y1)); 
                        (U256((x0/y1, x1/y1)) + z0, z1)
                    },
                    (U256((x0, x1)), U256((0u128, y1))) if x0 < y1 => {
                        let (a, b) = divide_by_max(&y1);
                        let (z0, z1) = (U256::multiple_u128(&x0, &b) + U256((0u128, x1)))/ U256((0u128, y1)); 
                        (U256::multiple_u128(&x0, &a) + z0, z1)
                    },
                    (U256((x0, x1)), U256((y0, y1))) if x0 == y0 => (U256::one(), U256((0u128, x1 - y1))),
                    (U256((x0, x1)), U256((y0, y1))) => {
                        let temp = x0 / (y0 + 1);
                        let (_, u) = U256((y0, y1)) * U256((0, temp));
                        let (z0, z1) = (U256((x0, x1)) - u) / U256((y0, y1));
                        (U256((0, temp)) + z0, z1)
                    },
                }
            }
        }
    }
}

impl Shl<usize> for U256 {
    type Output = U256;

    fn shl(self, shift: usize) -> U256 {
        let U256((x0, x1)) = self;
        if shift < 128 {
            let v = ((1u128.shl(shift) - 1).shl(128 - shift) & x1).shr(128 - shift);
            U256((x0.shl(shift) + v, x1.shl(shift)))
        } else {
            U256((x1.shl(shift - 128), 0u128))
        }
    }
}

impl Shr<usize> for U256 {
    type Output = U256;

    fn shr(self, shift: usize) -> U256 {
        let U256((x0, x1)) = self;
        if shift < 128 {
            let v = ((1u128.shl(shift) - 1) & x0).shl(128 - shift);
            U256((x0.shr(shift), x1.shr(shift) + v))
        } else {
            U256((0u128, x0.shr(shift - 128)))
        }
    }
}

#[cfg(test)]
mod tests {
    // use crate::U256;
    use U256;
    #[test]
    fn u256_zero() {
        let (upper, lower) = U256::zero().unwrap();
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 0u128);
    }

    #[test]
    fn u256_one() {
        let (upper, lower) = U256::one().unwrap();
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 1u128);
    }

    #[test]
    fn u256_max_value() {
        let (upper, lower) = U256::max_value().unwrap();
        assert_eq!(upper, u128::max_value());
        assert_eq!(lower, u128::max_value());
    }

    #[test]
    fn u256_from_be_bytes() {
        let u1 = U256::new(0xcd5cd78e17f6faf3bd045f1b71ad9053u128, 0xc5f13f6d79a28ee1deff1e2c0852a771u128);
        let u2 = U256::from_be_bytes([0xcdu8, 0x5cu8, 0xd7u8, 0x8eu8, 0x17u8, 0xf6u8, 0xfau8, 0xf3u8, 0xbdu8, 0x04u8, 0x5fu8, 0x1bu8, 0x71u8, 0xadu8, 0x90u8, 0x53u8, 0xc5u8, 0xf1u8, 0x3fu8, 0x6du8, 0x79u8, 0xa2u8, 0x8eu8, 0xe1u8, 0xdeu8, 0xffu8, 0x1eu8, 0x2cu8, 0x08u8, 0x52u8, 0xa7u8, 0x71u8]);
        assert_eq!(u1, u2);
        // assert_eq!(U256((0xcd5cd78e17f6faf3bd045f1b71ad9053u128, 0xc5f13f6d79a28ee1deff1e2c0852a771u128)), U256::from_be_bytes([0xcdu8, 0x5cu8, 0xd7u8, 0x8eu8, 0x17u8, 0xf6u8, 0xfau8, 0xf3u8, 0xbdu8, 0x04u8, 0x5fu8, 0x1bu8, 0x71u8, 0xadu8, 0x90u8, 0x53u8, 0xc5u8, 0xf1u8, 0x3fu8, 0x6du8, 0x79u8, 0xa2u8, 0x8eu8, 0xe1u8, 0xdeu8, 0xffu8, 0x1eu8, 0x2cu8, 0x08u8, 0x52u8, 0xa7u8, 0x71u8]));
    }
    
    #[test]
    fn u256_divide_58_384bit() {
        assert_eq!(((0x1c6de3f0b2fbdb2345eefecd80b9780u128, 0x226402682c2555c32894d265197c2du128, 0x842c9494777b794815c20c9b7495cfbbu128), 7), U256::divide_58_384bit((0x670e5a4888d0fa5fdd825ba8f2a05300u128, 0x7caa88b9a00756e3731b7aae7c6224fu128, 0xf219a9a311f97a54edf6db3869f11065u128)));
        assert_eq!(((0x3cd56b599db6b4423e79c972868d2edu128, 0xcb1dabaf373c74e6f0843ffcf7d0f680u128, 0x56e447a8422c1966149ee2b76a99c3ddu128), 9), U256::divide_58_384bit((0xdc85a524dbb64d7022797a3f27bfc9e0u128, 0x4b8e5b283b27c527df67f502557d913u128, 0xafb83c1efdfdc120abff5d8e26d6601bu128)));
        assert_eq!(((0x7309a4bade936b6bffb97b5bec5649u128, 0xc9d16d21104d2a05836a47d64b543554u128, 0x3d3a9afd867ceb9cbfd147d1e7b9cb88u128), 56), U256::divide_58_384bit((0x1a102f52566d665677f005f2d38b8cb7u128, 0xb972b97db17b853fc614468d11141515u128, 0xdf471d70784d6183756a458e80181d08u128)));
        assert_eq!(((0x278ba20ff0de4df1f8bd7b28c540584u128, 0xe5b3cdbe62a0a0fdeb6679b55a4ed638u128, 0x8b0f7fd62a16e9c5f79b981dc6dc8ce9u128), 17), U256::divide_58_384bit((0x8f5a2b79c925da8d25aede73cb09401cu128, 0xabc9d22586479875537931675dc88cfu128, 0x8182f6858930f6da194076bf0df7ecdbu128)));
        assert_eq!(((0x4396f1097601b30ede77b8e1fefa0fcu128, 0x11fdd5a0da0f7f6831b96df79c89b03au128, 0x71b49145d3fd0cd09cc73a1e76c4a46du128), 2), U256::divide_58_384bit((0xf50329c24bc62915e671fe333c4a791cu128, 0x138266716782dd9b4402ea197731ed3du128, 0xc2e8e9d20754e74385232ae6e88d40b4u128)));
        assert_eq!(((0x2a0d9880bb4b780a8450af58786de63u128, 0x4a2a23e905b4918dca7e151626b7c03cu128, 0x20783a848b6755371e2fc606c80abb6cu128), 39), U256::divide_58_384bit((0x987148d2a6f193261fa47ba0b48e627eu128, 0xcd8c22cb4ae8fa1fe090c704c5a18d9fu128, 0x5b3d420795694e7cd6d2dd89526e769fu128)));
        assert_eq!(((0x2478ca266c1b54b80d10715240e8819u128, 0xd675d211adf6c8699797622a71cebff6u128, 0x2b40b95a45ce00f0e91bdff482422e0eu128), 12), U256::divide_58_384bit((0x8435dccb47e3131b2f5b9aca2b4ad5dau128, 0x96b1980169e967ec584c3d9dc8d77dc5u128, 0xcca9fe73d0ac3694d050bd6582fe6f38u128)));
        assert_eq!(((0x280c6b095768faf116e16ec4b206a3u128, 0xb7fce0090cd5e766b34c8f4629b99fddu128, 0xe16707171fa3e97e42fe671d07167acfu128), 45), U256::divide_58_384bit((0x912d0401dcdc8da9f2f131890558117u128, 0xaf4ac20ce8766d449f5875e5740e3845u128, 0x11579b3d2b22e69b2da35c939b17d313u128)));
        assert_eq!(((0x1f8eb753a1e3848ad180ff3a9ff2b88u128, 0x5b295806d03d6e58a6f69af7a88f18ddu128, 0xbe4bc849ab490ddd610456631ea55241u128), 13), U256::divide_58_384bit((0x7265588f2ad8c07737739d3483cfdce4u128, 0xa75df18b2deb0015d3df1c1c306ba23du128, 0x1d2b60b0ce8d2427fafb9274f174a2c7u128)));
        assert_eq!(((0x100ac5a25c2bb989ba29741c988ba7u128, 0x6d39789c41169acba88b0212e124899bu128, 0x612d38f99f1243fab45648fa9988b0b5u128), 13), U256::divide_58_384bit((0x3a270c6c8e1e809342d644e7a8fa3eeu128, 0xbf055366bf1f12242f7e784702472d34u128, 0x43ee88e0a2366ccdb8c88c6c8f8090fu128)));
        assert_eq!(((0x333d02951cc73441e744f76bef7c010u128, 0x776b63aaeaff5708608fd2f3989f51c2u128, 0xf5306a4f5c7d104368e1ca3e681c74ddu128), 14), U256::divide_58_384bit((0xb9bd295c88521d6ee65a00e7442183bbu128, 0xe5494b93dd9b7e5e095cb309418862bu128, 0x8cf815faf455af45c327d22396727a20u128)));
        assert_eq!(((0x22c1bc9e0b51fe171a965b95efd1769u128, 0xcfed4110fa94dafefa4c3cac9cde356bu128, 0x285aac999bb6902c9e67d85c8c26426u128), 56), U256::divide_58_384bit((0x7dfe4bbce9093913c0610bff85574df9u128, 0x1bc0bdd8c5b99dc4b545bf1b8a581a3eu128, 0x9248b1acd475caa1be38704f7c0ab0d4u128)));
        assert_eq!(((0x529fea1a34db3ed2105ed8aed45b82u128, 0x86d1eb1aea95c65e3bd8373203bce7bau128, 0x375d7c767fa65ef912fc7565bc019e9fu128), 51), U256::divide_58_384bit((0x12b83b09eff9ac3b97b57d179c1cbb92u128, 0x8b8f441925eef1598efc8154d8cc8030u128, 0x8b2e32d8ebb1846e4d32990c985df039u128)));
        assert_eq!(((0x9f1edcba74010f5a326d7086a4e84fu128, 0x989027c8ab50772a7e4d2a7af13ae415u128, 0x6426dc23143d55e1f0fdb05dcf9a000u128), 15), U256::divide_58_384bit((0x240cfe023e483d7a6f6ccb7e815ca208u128, 0x90a90376d03affa09d7b9fdaa757acc3u128, 0x6b0cddff295e575309979f54108e400fu128)));
        assert_eq!(((0x21251e93e02f700ee8eaa63ee471ccu128, 0xc493ce396282410c7734c28abd2d4302u128, 0xabd38986ed2b543c541f010c23fe4cb1u128), 45), U256::divide_58_384bit((0x78268ed80cabf6360c529aa3fc1c864u128, 0x897cb9005182bcd301f4136edc412e9au128, 0xeded2891bbd115ab0f063cc0279d6047u128)));
        assert_eq!(((0x2b30fafde3ababc2529d60bd3bd4699u128, 0x8315541012809d7d46c79c3a821b5408u128, 0x180bee92f74b4a912d59c6871b26b6fu128), 16), U256::divide_58_384bit((0x9c918dd8594e4ea06b7a7eadf8e1fec7u128, 0xb2d50ba43123ae62093965417a3109d0u128, 0x572b40d4c070ee4e44656fa9c26c5736u128)));
        assert_eq!(((0x291e1be411f141587d6dc025adf34d7u128, 0x833fd2ca73fc37d691408c4766c7fdffu128, 0x98fe56aa65d73b7978b63696bc6c0034u128), 52), U256::divide_58_384bit((0x950d251ac10a8ce0c6add8889691f8d3u128, 0xbc75c1de4724a69ce89fc82d494f8be8u128, 0xa99fa29b12c3798559485e26b0780bfcu128)));
        assert_eq!(((0x2ca6847d198951a19cc07f9807d3d65u128, 0xd051c4a46b9531708585ee0602723f5au128, 0x7d717bcab667daaf82694dad073a7c74u128), 3), U256::divide_58_384bit((0xa1dba0457c91c7e9d839ce871c5fe911u128, 0x32868d405fcd337e4057ed5c8de25a80u128, 0x6bb60bed53878bc38bdb9933a340324bu128)));
        assert_eq!(((0xa0a7d9231971160d4fd40be66e2eb6u128, 0x29e31e1dbda223c37438002bc3d3336au128, 0xc2553d12413f33e440ed6efb7a999dccu128), 50), U256::divide_58_384bit((0x24660731f3c39eff04160ab234f69545u128, 0x7d74d2bcf6bc1a4854b009ea5dd9a630u128, 0x74fd622c851c1b6b5cb24f9c6cdc06au128)));
        assert_eq!(((0x268718055070ff8172379110a97f07eu128, 0xca8309a0c2ff8882f83be2ab2ac2d444u128, 0x7e75f39e57ae95be18954ed937374068u128), 56), U256::divide_58_384bit((0x8ba9b71343999e353e096ddc666c7cb9u128, 0xe1b02e6c2de4edac3d915ac7b0241784u128, 0xa6b931dfdd8ded1191d3dd36828497c8u128)));
    }
    
    
    #[test]
    fn u256_to_base58() {
        /*
        let result = U256::to_base58((0x53dd18579ebd9dd6cd33e5ead86d85aeu128, 0xba1ab497e10b79ab45a70ae5d5a1e208u128, 0x2e44fd857dcfbb1d7b42866b11d78aabu128));
        let correct = [52, 53, 82, 109, 81, 81, 99, 78, 115, 111, 120, 116, 100, 72, 83, 117, 53, 110, 99, 110, 97, 78, 50, 68, 114, 69, 118, 105, 121, 120, 103, 116, 88, 49, 117, 100, 117, 52, 56, 120, 88, 77, 78, 109, 72, 70, 102, 82, 53, 71, 81, 67, 122, 99, 52, 114, 121, 76, 107, 105, 76, 53, 50, 114, 112, 83];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x3fb4bb5a2c46bbd107a3502255020fcdu128, 0x44f5b2ed324ced6520064b3890f88bddu128, 0x45f2c25a1f350522e4c453ae025ac840u128));
        let correct = [51, 76, 89, 75, 52, 103, 53, 117, 77, 117, 57, 83, 87, 89, 75, 85, 51, 116, 50, 86, 50, 57, 56, 105, 110, 115, 89, 71, 77, 102, 90, 103, 75, 99, 55, 74, 120, 120, 115, 90, 87, 119, 86, 105, 115, 103, 65, 81, 120, 84, 75, 106, 121, 83, 81, 69, 88, 115, 69, 82, 86, 104, 78, 111, 84, 86];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xb9d05e9768913918855e889163841e63u128, 0x9cdf224428443fa01551b3bf0433e416u128, 0xd67d71b35fcf93c0da333c495e6315d7u128));
        let correct = [55, 112, 76, 82, 78, 118, 72, 97, 115, 88, 74, 107, 81, 80, 114, 52, 113, 67, 87, 118, 74, 117, 84, 75, 88, 105, 50, 121, 57, 105, 77, 71, 77, 70, 119, 78, 107, 102, 102, 69, 102, 90, 119, 56, 50, 110, 49, 107, 82, 54, 109, 69, 117, 111, 104, 78, 90, 66, 97, 51, 116, 112, 122, 98, 110, 101];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x9a2021b178ec7e5dc980631df83c64deu128, 0xa0213215e67fe5a55a41bfa9800915b6u128, 0x570d1a28fdc1045dc426cba4bc8fe093u128));
        let correct = [54, 101, 118, 53, 57, 115, 105, 49, 121, 104, 122, 55, 103, 122, 106, 112, 72, 81, 49, 90, 110, 71, 71, 49, 85, 82, 122, 77, 122, 81, 56, 88, 72, 70, 87, 117, 118, 82, 52, 78, 120, 86, 106, 116, 86, 69, 71, 84, 67, 81, 68, 67, 107, 78, 76, 77, 65, 89, 52, 71, 117, 80, 88, 104, 49, 99];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xc46826e344c78c8de3747177cf6304c9u128, 0xf87569556ddf950ab4e7e2de564758dcu128, 0xd10403758d911fac1c71009bffd68e6u128));
        let correct = [56, 67, 115, 97, 112, 71, 70, 53, 103, 77, 56, 52, 69, 83, 82, 71, 101, 99, 67, 119, 122, 77, 50, 75, 111, 80, 103, 107, 105, 101, 68, 97, 109, 113, 107, 56, 101, 71, 49, 98, 116, 72, 111, 66, 82, 118, 49, 67, 54, 72, 107, 101, 106, 68, 75, 50, 113, 71, 90, 109, 69, 115, 82, 103, 101, 57];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xb0fdd6962783c4372f80b57458141089u128, 0x7da015341e4573909132e40777399e49u128, 0xcb771010fbf10a8904d61abd9f361043u128));
        let correct = [55, 86, 90, 106, 113, 105, 121, 116, 111, 82, 70, 117, 106, 113, 53, 50, 81, 119, 56, 67, 116, 65, 113, 97, 84, 81, 99, 100, 111, 100, 99, 115, 101, 76, 50, 109, 90, 87, 118, 50, 66, 83, 110, 67, 106, 80, 81, 67, 50, 109, 87, 115, 90, 97, 97, 49, 80, 114, 81, 75, 115, 121, 112, 109, 78, 122];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x42e2b27ad41486e12397bca8d9db9208u128, 0x7eba952c27d4ad74add07fcd49597bf9u128, 0x9bcb6aa84d8088fb84a4a0c1c6d8f2c8u128));
        let correct = [51, 84, 74, 102, 106, 89, 114, 117, 65, 90, 88, 87, 53, 68, 70, 100, 51, 70, 99, 55, 51, 83, 121, 105, 89, 110, 122, 72, 85, 50, 74, 74, 76, 98, 120, 97, 56, 104, 116, 100, 85, 76, 118, 55, 104, 81, 116, 99, 83, 103, 110, 120, 122, 104, 120, 71, 99, 100, 49, 88, 113, 88, 88, 74, 115, 49];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x8bf7064f4d9745f01135e6230545c2d8u128, 0x29628857c9e6b16d922c45916ca42d8du128, 0xcd963aa29f007cd8933a132aef352471u128));
        let correct = [54, 56, 110, 102, 66, 89, 111, 101, 105, 56, 115, 113, 74, 76, 101, 98, 52, 100, 103, 117, 49, 119, 56, 112, 101, 117, 68, 106, 72, 113, 97, 111, 77, 115, 52, 110, 105, 52, 101, 57, 122, 113, 70, 98, 52, 102, 119, 121, 75, 102, 78, 53, 70, 66, 113, 86, 89, 117, 101, 74, 88, 76, 113, 105, 101, 85];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xfe57891eba329d9b9d11ca12ef1da6d1u128, 0x8539cca0c2d35a130967d83d23c77b95u128, 0xb7614a96ebb77c474dd1719b01d1efb2u128));
        let correct = [65, 76, 56, 109, 86, 98, 65, 74, 49, 71, 69, 54, 56, 78, 84, 71, 51, 54, 114, 78, 53, 90, 115, 71, 54, 119, 119, 89, 50, 51, 97, 107, 88, 115, 122, 56, 84, 76, 116, 111, 52, 86, 107, 121, 69, 97, 98, 101, 65, 78, 118, 49, 66, 113, 84, 52, 54, 49, 49, 69, 54, 97, 53, 89, 81, 72];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xc12a2283d3e5a7a0eb173305554006fu128, 0xb592b92b850412b79ff0955e945042eeu128, 0x59028b6f0883d808f1f45585dcca5f44u128));
        let correct = [49, 83, 103, 110, 71, 114, 88, 88, 75, 81, 75, 107, 69, 55, 89, 89, 56, 57, 97, 51, 121, 50, 119, 75, 103, 56, 55, 83, 69, 87, 66, 75, 56, 67, 90, 103, 113, 110, 122, 106, 66, 101, 89, 121, 53, 71, 110, 97, 67, 90, 101, 97, 54, 69, 121, 102, 118, 109, 53, 81, 107, 102, 84, 57, 118, 75];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xb031be9bfaf677b08d4d57922fe5223cu128, 0x9681de86575e805bee973986f57e8bcu128, 0x369c1ace139fc39c1d45ae14dadb20b7u128));
        let correct = [55, 84, 115, 77, 113, 74, 90, 113, 54, 53, 72, 77, 82, 89, 52, 119, 110, 70, 112, 113, 97, 89, 70, 122, 53, 56, 119, 77, 90, 56, 72, 98, 121, 55, 57, 83, 87, 116, 103, 67, 116, 67, 121, 80, 56, 66, 75, 97, 116, 50, 109, 113, 103, 107, 89, 122, 56, 80, 122, 54, 106, 97, 88, 85, 75, 81];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x1c3deef93c5c31e9224b4dcd19e7f9bfu128, 0xa10895c9f97bb773938eb8a18e623e3fu128, 0x40905ae4e871c8c3f042d084972d2134u128));
        let correct = [50, 51, 54, 51, 119, 115, 67, 80, 110, 86, 98, 86, 116, 113, 49, 109, 49, 49, 54, 98, 121, 104, 116, 76, 55, 122, 54, 90, 110, 71, 103, 109, 70, 109, 111, 67, 98, 83, 78, 57, 98, 50, 76, 115, 75, 67, 107, 90, 115, 55, 89, 70, 75, 114, 83, 103, 101, 97, 104, 117, 119, 100, 74, 120, 117, 57];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xc0736d3df88e908baeb26da66fdf44e8u128, 0x5dfaee91c56d8971048fde7be001d75fu128, 0x971a106e63e4a9a474afa6e527c2b33bu128));
        let correct = [56, 52, 84, 82, 71, 51, 70, 83, 81, 114, 113, 116, 121, 69, 78, 114, 87, 72, 88, 67, 90, 97, 99, 80, 80, 112, 103, 50, 104, 112, 90, 120, 100, 55, 89, 105, 81, 68, 90, 89, 86, 104, 84, 50, 85, 111, 80, 106, 102, 117, 71, 75, 54, 115, 68, 82, 109, 118, 67, 89, 78, 106, 101, 102, 114, 50];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x954e4b4e23f37302215264d1c0f2707du128, 0x144a062beadbed8d738d0808b8148e6cu128, 0x74672bc0d1209503dd83c86963e8dfdau128));
        let correct = [54, 85, 102, 75, 110, 102, 106, 51, 57, 82, 100, 80, 84, 113, 51, 65, 81, 84, 104, 104, 74, 82, 75, 122, 102, 67, 53, 52, 116, 109, 80, 98, 120, 114, 106, 103, 118, 102, 69, 76, 110, 53, 115, 117, 54, 120, 82, 66, 49, 119, 51, 78, 51, 113, 83, 117, 117, 78, 100, 83, 118, 86, 81, 75, 87, 57];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xce71e6eff26bfdda5acf3fda0ce05b8au128, 0x64d6e24ba828e66e31cc2d8c7e248d02u128, 0xc8de2ea6b3547cb28a11626b0642f894u128));
        let correct = [56, 97, 69, 72, 77, 50, 107, 99, 112, 51, 86, 113, 76, 49, 83, 115, 87, 88, 87, 113, 110, 88, 116, 86, 98, 68, 57, 67, 67, 56, 67, 112, 111, 90, 90, 113, 51, 113, 72, 78, 50, 118, 85, 110, 88, 90, 49, 81, 68, 52, 112, 113, 115, 109, 115, 120, 78, 89, 106, 51, 100, 88, 103, 69, 121, 82];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x91723c677a60618330cf6dc69bbc40b5u128, 0x4fe9bdf672ca67a77248874604ad6b9du128, 0xbafd0a2bdc88f600c52970b405a071d5u128));
        let correct = [54, 76, 84, 51, 115, 68, 76, 99, 50, 81, 74, 107, 115, 90, 86, 115, 97, 119, 71, 85, 120, 72, 118, 116, 69, 104, 75, 54, 99, 113, 84, 103, 66, 56, 118, 117, 110, 112, 52, 57, 71, 54, 76, 117, 102, 74, 97, 89, 68, 78, 106, 97, 83, 116, 97, 67, 57, 115, 57, 54, 87, 69, 102, 72, 90, 118];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xd5e34bbc071d92965e820670541b06f9u128, 0xe9ffbb0e5da7e04270c83ed14954868bu128, 0x88deb103dcf625622e2e5ccb4698bb92u128));
        let correct = [56, 114, 52, 106, 119, 85, 52, 101, 65, 56, 85, 88, 120, 88, 104, 76, 114, 89, 119, 51, 49, 117, 111, 83, 83, 102, 114, 88, 106, 114, 97, 50, 118, 87, 106, 118, 52, 112, 82, 120, 67, 70, 67, 70, 102, 113, 54, 98, 112, 90, 53, 54, 70, 111, 99, 67, 78, 99, 78, 74, 113, 120, 77, 49, 75, 111];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xbb74f6af97b87e9883de025f225b795cu128, 0xc1b7b4f182c9ccee4acbf0e36d6495ccu128, 0x4351ab18a4b018f16d66b314e26ddb6du128));
        let correct = [55, 115, 113, 65, 71, 50, 76, 68, 71, 67, 53, 56, 106, 103, 75, 119, 72, 83, 70, 76, 85, 77, 102, 86, 74, 86, 77, 52, 99, 74, 112, 110, 99, 121, 111, 81, 74, 69, 119, 66, 55, 106, 78, 71, 56, 116, 75, 112, 57, 72, 67, 84, 83, 119, 120, 112, 84, 82, 83, 84, 120, 54, 104, 105, 112, 76];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xa495ec15ace7100bb0b3a687c44eac40u128, 0x3e3f74ff3e7eda0045e7f71cc809f961u128, 0x84b820814a1da6490bf2fa1221569b65u128));
        let correct = [55, 51, 65, 114, 70, 106, 83, 53, 88, 116, 122, 116, 109, 111, 68, 51, 75, 82, 53, 107, 102, 87, 54, 67, 104, 85, 106, 89, 107, 77, 52, 84, 75, 70, 86, 113, 84, 72, 103, 117, 72, 100, 102, 122, 88, 115, 86, 76, 57, 56, 98, 50, 51, 55, 69, 90, 83, 118, 110, 87, 74, 56, 53, 112, 105, 71];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x46bdeab08fc817361bb54fb6da105f57u128, 0xbc55eb7eb672365c31a3beac4f3d06a4u128, 0x8aff6d0de32941de46fb41d6b78ec785u128));
        let correct = [51, 98, 87, 89, 68, 55, 82, 69, 80, 89, 109, 100, 104, 86, 119, 118, 82, 76, 66, 66, 102, 53, 115, 80, 119, 122, 76, 71, 114, 82, 116, 66, 90, 68, 55, 71, 55, 75, 100, 49, 117, 52, 121, 67, 88, 107, 106, 89, 103, 122, 98, 84, 49, 102, 122, 112, 107, 75, 117, 75, 112, 87, 99, 78, 86, 74];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x48e156af38f9e62311847a37d4a08076u128, 0xd6ee9352da7ab73dba8094908970b167u128, 0x7b5bf45067a4ff0b0ebdba1b1de26070u128));
        let correct = [51, 103, 52, 81, 117, 119, 106, 101, 76, 66, 111, 65, 76, 120, 107, 52, 68, 87, 89, 100, 72, 57, 107, 105, 103, 77, 106, 53, 83, 98, 120, 107, 85, 104, 87, 54, 77, 85, 67, 99, 119, 111, 78, 88, 56, 90, 84, 75, 120, 119, 102, 53, 76, 113, 55, 113, 86, 120, 71, 119, 85, 67, 49, 70, 68, 113];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xd346f3a5cf7864588399d0ef8658693u128, 0xf15faa0a947ba14d68f97ec94416b3aeu128, 0x39afe12983de0149524584ca57e117e3u128));
        let correct = [49, 86, 54, 85, 85, 70, 82, 111, 54, 110, 118, 119, 87, 109, 50, 120, 88, 56, 105, 102, 117, 90, 50, 89, 49, 116, 114, 51, 56, 105, 107, 54, 51, 99, 89, 53, 49, 53, 90, 111, 56, 114, 84, 52, 85, 49, 99, 112, 100, 72, 120, 105, 55, 115, 111, 74, 75, 83, 84, 77, 103, 72, 55, 75, 69, 83];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x54afde6ca06feb62c7fdd53950a1df28u128, 0xff6f5d52281d2c332cb4a42b63420b3eu128, 0x88f7b25c08be0ba5fb0e298ca732e036u128));
        let correct = [52, 55, 66, 78, 65, 120, 56, 82, 72, 112, 67, 106, 122, 101, 112, 113, 120, 105, 102, 50, 78, 69, 55, 54, 71, 81, 52, 65, 114, 53, 74, 70, 70, 52, 50, 77, 76, 116, 118, 78, 107, 75, 102, 52, 112, 100, 72, 103, 68, 114, 56, 65, 78, 100, 111, 107, 55, 75, 89, 102, 120, 81, 57, 89, 102, 111];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xda1b26cded061db72712c26dbe8b8f68u128, 0xd968700e0b3f20d512c54d99e1ab7f9eu128, 0x79d0b339987a37c375b890b5bb7dae8bu128));
        let correct = [57, 49, 51, 71, 75, 78, 81, 86, 113, 56, 119, 75, 117, 51, 117, 111, 104, 54, 76, 57, 49, 54, 82, 85, 78, 88, 83, 71, 81, 72, 52, 97, 102, 117, 101, 71, 71, 102, 89, 110, 113, 84, 71, 82, 87, 97, 75, 72, 84, 113, 85, 74, 78, 117, 75, 71, 75, 52, 89, 119, 83, 102, 53, 51, 77, 85];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xcdee5e9ce97c729dfd9949a2f879fb3bu128, 0x919cc357a4839dfe3599f8b2f5d60863u128, 0x9d72be948374d3b1e59120d8c3cc5911u128));
        let correct = [56, 90, 56, 115, 122, 70, 110, 120, 109, 116, 113, 122, 71, 102, 97, 56, 119, 86, 76, 57, 119, 51, 76, 112, 66, 89, 103, 109, 81, 90, 67, 74, 118, 72, 122, 51, 116, 109, 52, 103, 102, 97, 55, 87, 101, 66, 66, 110, 118, 104, 80, 86, 83, 99, 82, 103, 88, 55, 119, 114, 81, 66, 98, 90, 49, 50];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xcc94804efe810ceb0e21e41b24cf16b4u128, 0x7b609a852b201fa8b140cb4a04b8b5a6u128, 0x6e546ad67a0fca78f46fc8d9fd6d0508u128));
        let correct = [56, 87, 71, 65, 71, 111, 103, 113, 86, 103, 86, 107, 57, 104, 67, 100, 116, 115, 50, 84, 105, 101, 82, 85, 69, 85, 121, 68, 97, 119, 97, 70, 74, 72, 53, 70, 54, 55, 117, 90, 111, 78, 49, 68, 120, 113, 104, 81, 106, 67, 85, 116, 52, 65, 54, 98, 56, 56, 77, 116, 105, 111, 77, 72, 110, 119];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x3ff28473127c039671a6ef94b1a22496u128, 0xc93bca83342bc2fedfe7eb57494cba50u128, 0x34587e9b22d9f7e542fcf75cda9389bdu128));
        let correct = [51, 77, 52, 54, 84, 55, 100, 122, 99, 88, 52, 68, 83, 55, 54, 87, 116, 65, 53, 120, 74, 78, 52, 112, 120, 83, 76, 66, 121, 57, 75, 115, 54, 69, 54, 52, 54, 120, 122, 66, 71, 84, 88, 116, 106, 117, 66, 83, 86, 84, 76, 76, 70, 118, 85, 100, 103, 82, 70, 80, 121, 57, 51, 66, 118, 52];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x69ed11c0567fb306646fa8bc51161ecdu128, 0x550a9a6ee99139a5930520458a9830dfu128, 0x13e812b59d4a969e0aeee43b9e650a1au128));
        let correct = [52, 116, 78, 71, 71, 98, 112, 65, 100, 88, 51, 82, 103, 106, 77, 69, 105, 68, 85, 49, 121, 117, 118, 106, 117, 111, 75, 106, 104, 88, 80, 111, 119, 100, 69, 121, 102, 70, 49, 78, 57, 117, 99, 105, 54, 50, 107, 78, 116, 110, 68, 49, 53, 78, 83, 51, 81, 82, 107, 111, 118, 52, 56, 65, 111, 51];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x5b202c68a85a7445076af2a485676003u128, 0xa15a821c922c882d6d78de3d0f1191bcu128, 0x440596a79301932a9c41b01d58baa09au128));
        let correct = [52, 76, 115, 117, 56, 54, 120, 122, 87, 53, 101, 76, 85, 51, 54, 121, 88, 86, 57, 98, 75, 70, 113, 74, 67, 115, 54, 76, 120, 69, 120, 88, 65, 112, 110, 100, 77, 56, 117, 49, 119, 99, 99, 122, 120, 103, 54, 109, 67, 49, 67, 81, 103, 56, 103, 65, 113, 116, 83, 107, 57, 102, 81, 120, 77, 88];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xe21957c07e64b5af43d4a4006188d192u128, 0x253858296bcf69ded80953df6d05f70u128, 0x64b96dc5b7d0d8f214447b337862243fu128));
        let correct = [57, 74, 51, 98, 74, 65, 107, 120, 72, 81, 90, 84, 82, 105, 120, 104, 117, 89, 104, 50, 68, 68, 52, 53, 76, 68, 107, 50, 74, 118, 111, 111, 103, 74, 107, 99, 107, 121, 76, 55, 68, 72, 83, 89, 104, 120, 76, 69, 105, 69, 72, 113, 89, 70, 78, 72, 112, 56, 90, 120, 110, 57, 110, 81, 111, 112];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x802222f9e2b6606aa5b179a729db13c7u128, 0x774af08f6b0b7a0b9ddaeaa82a564f7au128, 0xaad4bbfd927deeef9d1e18ec7826f554u128));
        let correct = [53, 104, 99, 101, 66, 52, 83, 72, 55, 121, 75, 81, 70, 121, 52, 118, 120, 116, 77, 121, 111, 114, 97, 116, 65, 113, 86, 100, 49, 69, 78, 76, 110, 119, 57, 69, 68, 88, 97, 90, 118, 120, 100, 57, 75, 116, 72, 103, 98, 90, 109, 105, 117, 106, 67, 82, 77, 75, 115, 122, 49, 85, 53, 116, 111, 109];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x9c46e067bf4ec10cab5812714879b8aau128, 0x1eb26537559f08cb3c42751702fd82eeu128, 0x5963e728c1ae01db206bd331ca21f535u128));
        let correct = [54, 106, 86, 89, 109, 74, 117, 113, 109, 115, 71, 112, 98, 118, 68, 112, 67, 87, 81, 86, 54, 111, 87, 84, 97, 83, 69, 85, 49, 72, 119, 71, 82, 114, 111, 90, 117, 80, 85, 83, 72, 78, 78, 87, 52, 71, 82, 66, 122, 110, 101, 113, 120, 120, 113, 114, 120, 57, 98, 83, 49, 67, 88, 111, 80, 97];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xa6ac6b966e95c57f739e2640e1ae8508u128, 0x4f65a570fedd04576089a5a55a1005bbu128, 0x848d4e81b5c1e5bb0926898fae5f52bcu128));
        let correct = [55, 55, 99, 86, 100, 120, 107, 81, 49, 75, 53, 99, 112, 117, 69, 53, 99, 82, 105, 81, 98, 53, 119, 115, 75, 83, 120, 99, 113, 86, 111, 53, 121, 100, 84, 49, 101, 112, 68, 78, 57, 106, 98, 74, 118, 116, 115, 82, 120, 49, 71, 82, 55, 69, 55, 115, 77, 72, 97, 111, 111, 107, 80, 68, 89, 102];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x431de671e236863132cc19c4e0ed316bu128, 0x7c3cd83abc0f7e3e7d026995fe52d3fcu128, 0x82499242f47a89afef66a1e673b782d9u128));
        let correct = [51, 84, 111, 67, 118, 70, 112, 49, 103, 112, 116, 118, 68, 97, 85, 52, 55, 121, 71, 98, 90, 68, 54, 76, 67, 110, 53, 90, 57, 52, 115, 86, 65, 84, 67, 101, 54, 72, 97, 74, 85, 114, 51, 122, 50, 50, 106, 66, 113, 122, 55, 52, 117, 78, 65, 103, 81, 119, 74, 56, 120, 52, 113, 71, 115, 83];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x4b30047b98bf890d7dd9fa17d8a0fe3bu128, 0x845a973a539d394912cbd8b6c390fe66u128, 0x7e142c7236e90b9eba27d0dcb8813101u128));
        let correct = [51, 107, 121, 56, 122, 75, 52, 109, 100, 68, 69, 89, 101, 51, 69, 104, 84, 118, 83, 78, 87, 66, 88, 103, 66, 65, 111, 99, 51, 67, 52, 67, 71, 120, 66, 86, 85, 87, 104, 107, 72, 69, 56, 56, 106, 120, 89, 80, 102, 56, 81, 49, 100, 100, 52, 81, 53, 88, 105, 53, 86, 88, 90, 68, 90, 114];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xeb55d3f944e6d52f47b6b4c52949b208u128, 0x1047e40f85ee9c0227ab18bbeb5c654fu128, 0x9f533ff343663f5a076acd5fa4051598u128));
        let correct = [57, 100, 104, 77, 53, 67, 119, 56, 102, 114, 81, 99, 90, 113, 113, 103, 98, 76, 90, 57, 57, 70, 78, 122, 98, 111, 119, 101, 117, 118, 99, 88, 55, 89, 57, 69, 83, 66, 69, 89, 70, 53, 120, 115, 57, 50, 114, 89, 116, 115, 118, 106, 121, 53, 109, 107, 105, 71, 66, 65, 80, 55, 83, 84, 56, 75];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x3c2a3ece99f9a955d4edb442e2cac102u128, 0xa5d4124e23411a390f3697050b6b0a54u128, 0xe3ed77a10f266b054d7ef6707d2cdb45u128));
        let correct = [51, 68, 49, 77, 104, 120, 57, 89, 105, 80, 88, 85, 51, 90, 88, 114, 56, 69, 117, 51, 74, 107, 111, 89, 82, 99, 109, 115, 55, 86, 49, 51, 55, 97, 102, 74, 90, 112, 101, 104, 81, 74, 53, 68, 75, 119, 111, 81, 77, 98, 122, 87, 68, 114, 86, 85, 103, 101, 65, 71, 81, 55, 56, 104, 71, 103];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xaaac216efcacc9fdac662b2832daba21u128, 0x9bbedbcf96664f5a0beee8d93a24395u128, 0x4a3b4a0c16f88da40881d26a2be0cb45u128));
        let correct = [55, 71, 55, 120, 75, 66, 107, 77, 76, 77, 119, 103, 74, 100, 53, 85, 83, 118, 85, 75, 74, 106, 102, 98, 105, 106, 84, 51, 83, 74, 112, 52, 88, 118, 87, 68, 56, 65, 51, 115, 71, 76, 76, 78, 114, 116, 118, 111, 50, 90, 103, 52, 99, 114, 86, 77, 115, 121, 100, 118, 98, 101, 98, 105, 70, 118];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x7174dd696d9307c364daeca2a4f93dcau128, 0x2eeab2e6e968944d1f786e0f8a63fc4eu128, 0x69bc7a971b09ef124d8e91101e319080u128));
        let correct = [53, 65, 80, 88, 65, 106, 74, 50, 117, 106, 69, 70, 97, 52, 50, 56, 70, 81, 100, 101, 87, 50, 99, 78, 112, 70, 119, 105, 100, 112, 77, 112, 118, 112, 117, 110, 107, 101, 68, 110, 103, 101, 76, 109, 70, 115, 80, 65, 78, 119, 103, 74, 67, 118, 51, 72, 109, 114, 111, 118, 56, 104, 116, 84, 116, 115];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x8b15719b83447e22666a0eb3fa08f601u128, 0xef90694b07ef015f23f9c4f164300cc8u128, 0xb80aacdada953fced00d932baec8055cu128));
        let correct = [54, 54, 117, 118, 83, 87, 98, 55, 78, 75, 107, 72, 117, 116, 117, 57, 81, 56, 111, 55, 78, 52, 99, 51, 68, 89, 52, 78, 104, 82, 103, 107, 90, 103, 83, 50, 49, 80, 90, 65, 107, 97, 87, 55, 121, 119, 112, 69, 71, 84, 84, 117, 109, 87, 85, 86, 88, 75, 98, 116, 77, 113, 114, 105, 116, 98];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xcf9b14213f424a8600e2e47e4cb4159fu128, 0x8892e96f7790b7859ab545b2a38cb8a7u128, 0x4613f47e25b103c29aacca3627297b53u128));
        let correct = [56, 99, 104, 88, 107, 57, 56, 86, 55, 111, 66, 113, 82, 122, 104, 53, 90, 116, 107, 116, 81, 104, 120, 77, 56, 111, 87, 74, 83, 86, 57, 78, 109, 103, 99, 69, 69, 75, 112, 100, 90, 111, 113, 100, 113, 120, 52, 98, 68, 104, 121, 76, 116, 75, 80, 76, 78, 69, 53, 104, 112, 65, 74, 98, 69, 50];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xacbbc54d13bf4e4830099902b030551du128, 0xaf6ecc4c3e902182c938b47eb303e839u128, 0x7b6b61c16104c2ca95f3fcbaf7868c29u128));
        let correct = [55, 76, 87, 72, 120, 116, 111, 82, 71, 55, 52, 83, 106, 103, 101, 97, 86, 80, 74, 75, 75, 53, 113, 116, 52, 119, 57, 106, 116, 114, 52, 66, 89, 69, 52, 80, 115, 69, 106, 105, 117, 115, 54, 89, 98, 77, 71, 98, 103, 102, 102, 88, 65, 69, 98, 121, 70, 80, 85, 115, 84, 77, 109, 65, 106, 50];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x72e65a1ff30646d02b53dded52109988u128, 0x44ef5e94622ba681c312792da2b8f2e5u128, 0xc7cfa6ac115f34f8b54581c101140f5bu128));
        let correct = [53, 68, 84, 100, 68, 70, 120, 65, 111, 69, 70, 67, 106, 98, 66, 100, 87, 76, 109, 56, 100, 76, 83, 70, 86, 98, 77, 66, 111, 75, 84, 110, 83, 77, 99, 106, 110, 111, 65, 98, 84, 70, 110, 70, 116, 72, 50, 52, 82, 76, 88, 106, 120, 51, 55, 105, 90, 109, 55, 72, 114, 119, 74, 106, 68, 76];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x51fa34125df9c5d2e0e696011e45bd1cu128, 0x5ac217b9c9eca03c02cbb61fc1cae275u128, 0x452d08725606f22833144715c90c6d00u128));
        let correct = [52, 49, 81, 122, 112, 97, 118, 74, 52, 119, 114, 106, 74, 84, 100, 119, 81, 49, 82, 116, 88, 120, 65, 54, 69, 107, 117, 114, 65, 75, 119, 70, 105, 71, 83, 114, 101, 116, 81, 114, 70, 105, 71, 55, 70, 83, 54, 55, 74, 97, 49, 74, 78, 107, 55, 65, 76, 103, 104, 115, 113, 84, 105, 109, 70, 86];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x41dd438ad344f4ed426bdce150261bd0u128, 0x69ef3f631db96f7750493fb265a2ac7cu128, 0x807b4ae886d37311295f2fdc9d1dea2cu128));
        let correct = [51, 82, 56, 101, 100, 114, 114, 83, 120, 114, 120, 72, 114, 76, 114, 53, 71, 56, 104, 82, 120, 110, 119, 116, 110, 50, 89, 82, 76, 117, 68, 68, 97, 82, 68, 83, 66, 77, 115, 80, 106, 75, 81, 89, 80, 110, 76, 106, 71, 105, 76, 85, 116, 70, 116, 87, 51, 109, 72, 86, 105, 54, 65, 80, 68, 53];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x6472281dad77c00972fd8cfebbe10dcu128, 0xae73d926c5a9c22bc88907c24c4d0554u128, 0x6744fc7f5d73204f27730b8477e36732u128));
        let correct = [49, 69, 77, 103, 119, 57, 56, 75, 49, 87, 51, 82, 105, 82, 66, 74, 111, 97, 56, 85, 122, 53, 82, 88, 107, 80, 86, 77, 122, 55, 81, 119, 54, 78, 85, 109, 52, 111, 121, 89, 115, 109, 76, 76, 106, 97, 109, 84, 110, 53, 71, 119, 85, 86, 110, 70, 49, 52, 78, 112, 80, 122, 72, 51, 52, 109];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x9987f5865f5f51f0399c587049cf1238u128, 0xd0214324bfbf2b91fbc4a49360208a7u128, 0x8609f6fe123870c5653af853543cf9f8u128));
        let correct = [54, 100, 101, 105, 107, 70, 75, 85, 65, 110, 103, 72, 107, 82, 107, 83, 114, 100, 78, 71, 67, 49, 65, 115, 100, 75, 76, 86, 88, 113, 80, 101, 86, 110, 52, 80, 85, 120, 119, 104, 83, 51, 68, 55, 76, 84, 75, 80, 83, 69, 74, 52, 109, 109, 102, 117, 55, 109, 120, 122, 54, 116, 78, 113, 107, 98];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xaa9ad3cf30fb077147873f68cb7c673eu128, 0x3d476fa0211789f452fbfc4f9e1622d2u128, 0x1abd1b9f0e938d64d48196303735b0b0u128));
        let correct = [55, 70, 121, 99, 90, 55, 122, 55, 101, 76, 104, 117, 118, 54, 81, 83, 106, 53, 104, 57, 102, 86, 87, 65, 116, 87, 112, 68, 105, 56, 110, 89, 75, 97, 89, 89, 77, 67, 99, 49, 107, 111, 107, 68, 51, 101, 114, 81, 103, 85, 51, 51, 56, 74, 65, 54, 110, 74, 75, 89, 68, 121, 65, 81, 110, 84];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xc69a63d87691d3ec8b6691d0acca3b3eu128, 0xae20e68bb444d8f274fb273942a46e43u128, 0x272b9354887f32232f396b394d1434c5u128));
        let correct = [56, 72, 89, 98, 107, 82, 120, 71, 114, 68, 99, 118, 103, 71, 75, 109, 49, 119, 83, 82, 74, 105, 76, 81, 71, 89, 56, 84, 52, 52, 81, 118, 76, 81, 51, 100, 117, 49, 106, 86, 90, 86, 66, 97, 51, 106, 105, 85, 99, 100, 104, 97, 56, 83, 70, 53, 101, 107, 121, 90, 51, 72, 52, 110, 106, 118];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xaee28b7dffa19424129fc4aa1cf614c1u128, 0x38648de2511afb80dd9ff968f567c4c6u128, 0x869609a43a23e167e39a61f2298b7dbbu128));
        let correct = [55, 82, 53, 110, 80, 104, 104, 65, 78, 101, 114, 117, 77, 89, 109, 67, 50, 100, 49, 86, 119, 112, 100, 52, 76, 77, 107, 99, 115, 119, 68, 89, 109, 56, 106, 98, 54, 66, 52, 97, 90, 50, 81, 97, 80, 72, 122, 83, 119, 122, 78, 110, 118, 54, 121, 107, 85, 106, 55, 109, 76, 87, 87, 82, 49, 99];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xb8f31eafd25a2f8c18091d7eb56f8ea8u128, 0x8e254d1db9bdaaf3f07caed248e68f86u128, 0xf98ad1c8e064108a7c9c2f74abd2c052u128));
        let correct = [55, 110, 86, 109, 106, 68, 71, 87, 118, 104, 88, 76, 119, 115, 65, 82, 104, 54, 103, 77, 57, 49, 105, 82, 103, 104, 112, 75, 111, 119, 101, 116, 70, 104, 56, 114, 111, 90, 75, 65, 77, 101, 53, 54, 86, 98, 52, 80, 56, 85, 67, 115, 112, 52, 121, 87, 102, 109, 86, 52, 80, 85, 81, 90, 53, 98];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x767f7f73c0bcae4627a496f53e3b9b86u128, 0xb2f0f823eff8b5b2c95a3ed38625897eu128, 0xa5637ee31a1b2971b3ddc455440e64a0u128));
        let correct = [53, 77, 55, 101, 81, 111, 88, 72, 88, 71, 111, 90, 55, 67, 72, 80, 113, 51, 97, 117, 71, 111, 112, 86, 52, 83, 82, 65, 118, 82, 77, 85, 102, 53, 119, 105, 78, 89, 76, 122, 103, 65, 110, 106, 72, 67, 99, 120, 113, 71, 121, 111, 89, 100, 98, 102, 74, 100, 113, 50, 65, 70, 89, 105, 54, 98];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x8d1f2a1b6ea4f7131ae941d8a8e03808u128, 0x31e2fa564b9fbcec4547bf19e6137b84u128, 0x705a2671742f8c48ddd35dc633be1057u128));
        let correct = [54, 66, 70, 81, 98, 98, 89, 112, 106, 97, 80, 114, 99, 103, 84, 76, 106, 66, 100, 54, 68, 113, 84, 89, 54, 121, 53, 106, 104, 72, 86, 65, 66, 113, 115, 53, 90, 83, 72, 68, 116, 80, 109, 66, 104, 118, 83, 116, 120, 89, 78, 77, 102, 102, 50, 104, 55, 106, 115, 80, 71, 70, 74, 115, 68, 112];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x34ed04eee4837597b0fa8e5e54b9b0a9u128, 0xa12b6b063a6608d92da2520890349248u128, 0x154553c81b0ea13945a15eb575e86e73u128));
        let correct = [50, 119, 99, 51, 99, 54, 50, 81, 119, 88, 110, 68, 120, 111, 70, 52, 50, 89, 56, 106, 82, 57, 81, 88, 106, 86, 52, 101, 115, 97, 84, 67, 77, 109, 55, 90, 87, 109, 83, 105, 80, 101, 50, 76, 115, 76, 97, 120, 53, 110, 51, 70, 76, 86, 53, 54, 122, 72, 104, 83, 119, 103, 98, 76, 49, 56];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xc41d907d76ffa77b6a1407aee840caddu128, 0xee2732c2b4b53680f5d5bec79b016f4cu128, 0x5be803faeda78808d2694d7f50f69be3u128));
        let correct = [56, 67, 70, 100, 87, 110, 115, 103, 90, 65, 86, 105, 53, 103, 50, 113, 49, 122, 75, 74, 101, 88, 106, 81, 86, 81, 71, 89, 116, 116, 83, 57, 98, 113, 75, 74, 115, 111, 66, 53, 76, 49, 110, 104, 90, 55, 70, 117, 100, 122, 100, 65, 111, 106, 70, 109, 100, 112, 72, 84, 72, 54, 98, 56, 107, 65];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xb245d6e003f9c069051a41f9c029183du128, 0x1eb5ad729d321bd00e72ee12c608cb06u128, 0x1dddb57b39a9ee753eb35777122ada00u128));
        let correct = [55, 89, 72, 114, 50, 87, 75, 77, 88, 81, 111, 54, 56, 82, 116, 117, 114, 80, 57, 87, 90, 98, 103, 97, 87, 105, 82, 54, 102, 100, 100, 110, 121, 87, 89, 114, 49, 101, 90, 87, 78, 113, 49, 89, 86, 74, 121, 116, 106, 118, 65, 57, 87, 103, 105, 75, 51, 101, 50, 112, 70, 84, 76, 72, 114, 70];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xbae779f890f82f41627b15da44db9e80u128, 0x9638e74ed27e98f2a00889a08d72024cu128, 0x819b0e77d5b2ca240da8f3a35b5d0696u128));
        let correct = [55, 114, 101, 120, 98, 71, 86, 77, 80, 90, 68, 99, 66, 88, 114, 99, 118, 107, 112, 111, 76, 70, 114, 113, 54, 78, 65, 107, 100, 111, 107, 72, 80, 78, 83, 100, 100, 100, 57, 122, 99, 118, 70, 90, 97, 100, 78, 67, 68, 118, 87, 72, 52, 90, 86, 118, 75, 51, 65, 106, 99, 119, 68, 68, 107, 57];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x63e94156fde3ea4fc89b937596104efdu128, 0x3cb5be5570e43d83b1828cf5eab48051u128, 0xf6b3acd140dac0e772c2fc67961b70a9u128));
        let correct = [52, 102, 97, 50, 85, 83, 55, 100, 49, 87, 52, 122, 98, 97, 56, 49, 104, 78, 76, 54, 112, 52, 57, 71, 77, 90, 98, 105, 117, 112, 84, 74, 75, 67, 90, 112, 76, 77, 57, 65, 103, 119, 115, 116, 69, 80, 119, 121, 88, 90, 54, 54, 76, 72, 100, 100, 110, 56, 118, 114, 99, 111, 75, 89, 122, 76];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x813f3c5f98dd0723ff93aa52b426b966u128, 0xcae8c77838f1408e3c8e2310cd7e3cb7u128, 0xc670eade0e3730addace2029b63ab522u128));
        let correct = [53, 106, 122, 52, 118, 65, 80, 121, 52, 57, 49, 122, 80, 51, 115, 114, 112, 103, 65, 122, 70, 84, 82, 70, 101, 67, 74, 107, 85, 113, 71, 106, 101, 71, 102, 101, 82, 105, 98, 49, 100, 77, 52, 85, 76, 102, 68, 116, 75, 67, 80, 88, 102, 110, 102, 116, 101, 89, 113, 50, 102, 89, 102, 118, 78, 68];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xd2eb3d783ef8596cba28f1289834f5bfu128, 0x86415cc74643f22fe25928dcdb88ef92u128, 0x81a5221f3f22ef8b6b2656b84861edd4u128));
        let correct = [56, 106, 107, 78, 84, 112, 120, 118, 65, 101, 49, 77, 101, 120, 89, 70, 88, 55, 55, 57, 85, 117, 52, 100, 90, 53, 83, 72, 105, 98, 97, 49, 119, 86, 118, 110, 113, 114, 53, 113, 107, 98, 112, 109, 49, 109, 52, 53, 72, 89, 82, 111, 97, 121, 70, 56, 107, 107, 102, 56, 67, 85, 113, 109, 83, 106];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x980c5757f32c725d08f8067dd7e68dc9u128, 0x1fe0ff5fd0324eabe726530e739d7513u128, 0x8cc5c029d284aaf6006292c02646570fu128));
        let correct = [54, 97, 86, 106, 85, 67, 121, 111, 103, 103, 103, 99, 69, 90, 49, 69, 74, 119, 74, 112, 114, 65, 107, 49, 88, 109, 121, 115, 68, 54, 113, 113, 51, 116, 119, 89, 98, 65, 56, 103, 82, 111, 86, 100, 68, 89, 54, 54, 117, 83, 100, 120, 68, 121, 117, 82, 81, 78, 114, 114, 101, 106, 99, 89, 98, 56];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xc8aa4c54a6de9c14403436b42d0adbf7u128, 0x96a0ed85624fb7dad5a8573259e50d22u128, 0x523df693cff431b8d2a96d582505d199u128));
        let correct = [56, 77, 119, 52, 116, 109, 118, 85, 117, 88, 122, 75, 78, 102, 68, 78, 104, 51, 54, 77, 113, 116, 70, 115, 98, 76, 65, 81, 105, 76, 76, 90, 121, 122, 111, 113, 56, 51, 106, 116, 89, 71, 102, 114, 106, 114, 65, 115, 102, 85, 85, 113, 54, 69, 115, 115, 50, 88, 77, 122, 84, 76, 105, 103, 49, 54];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x3302e66ad9a433359b64eb3a969efda8u128, 0xd3cded807fa496be45e0feba15fb10cdu128, 0x2e3dd640bf8dcf30c6819d6a5afc9ea6u128));
        let correct = [50, 115, 88, 110, 120, 85, 51, 54, 116, 72, 88, 69, 82, 117, 109, 54, 101, 97, 120, 84, 85, 89, 88, 81, 72, 55, 51, 114, 68, 121, 57, 102, 53, 105, 100, 81, 86, 72, 109, 52, 97, 70, 110, 80, 53, 111, 100, 120, 77, 65, 74, 121, 119, 74, 117, 74, 72, 75, 77, 70, 51, 109, 71, 105, 65, 49];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xe124c20b3733e1de7d03afe4b3eb0041u128, 0x76b54076cab27709dc18304d982c4bffu128, 0x56502d7a2ae07107011eaa23e3e7c1d3u128));
        let correct = [57, 71, 49, 104, 70, 72, 52, 98, 109, 106, 88, 52, 103, 82, 56, 97, 76, 65, 81, 77, 98, 74, 50, 56, 49, 106, 120, 54, 99, 69, 54, 118, 74, 118, 80, 120, 54, 70, 104, 109, 68, 71, 109, 74, 81, 78, 66, 69, 76, 66, 51, 114, 103, 109, 53, 66, 101, 87, 103, 89, 86, 85, 119, 102, 106, 81];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x854c6f636a690238322764c47783f76cu128, 0x6ffb329c53bde67ce967c9823932d8e8u128, 0xdfff30accbbd4fc0a7aef89c38318d65u128));
        let correct = [53, 116, 99, 50, 105, 81, 74, 110, 54, 54, 76, 90, 54, 89, 98, 69, 86, 121, 54, 109, 121, 106, 118, 56, 55, 88, 107, 70, 57, 107, 67, 85, 104, 98, 55, 104, 75, 101, 107, 118, 70, 111, 120, 49, 57, 51, 109, 68, 82, 72, 74, 77, 77, 113, 56, 89, 81, 116, 65, 116, 102, 122, 87, 51, 74, 107];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x1abb2653b5a5445c351946445b37e251u128, 0x3b63a5d96eb390ef0fc57bd512bbb422u128, 0x7ab86d8bd83b099242e1b08a8f931f7du128));
        let correct = [49, 121, 115, 99, 75, 121, 115, 82, 120, 105, 119, 115, 98, 103, 87, 90, 72, 116, 71, 107, 109, 57, 116, 105, 103, 119, 87, 98, 81, 55, 115, 99, 84, 78, 67, 115, 66, 116, 115, 76, 65, 89, 99, 88, 54, 83, 51, 69, 113, 114, 106, 65, 86, 49, 51, 100, 104, 104, 67, 113, 112, 114, 87, 75, 120, 56];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x7ecce44f54379c968d701befadd16434u128, 0x9e061126e20bf7aec7919887631729e8u128, 0x659912dfbe05bf868fc12ce92307006bu128));
        let correct = [53, 101, 110, 57, 105, 122, 100, 75, 53, 65, 72, 51, 78, 120, 90, 67, 52, 102, 55, 54, 82, 105, 107, 102, 53, 50, 67, 116, 104, 65, 98, 66, 84, 111, 97, 119, 85, 88, 118, 116, 103, 97, 117, 53, 115, 107, 50, 67, 86, 118, 77, 112, 98, 90, 74, 116, 78, 53, 74, 104, 105, 86, 102, 52, 118, 110];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x9ab93645361c1cc0b204d060bb738c42u128, 0x669012972f74fab574df9082dd0e2d37u128, 0x1cd645125392dc6fbb748d4c44c0205eu128));
        let correct = [54, 103, 66, 114, 119, 100, 53, 70, 69, 53, 111, 51, 83, 78, 98, 114, 55, 72, 69, 76, 50, 114, 117, 101, 89, 72, 110, 107, 114, 112, 49, 86, 84, 70, 110, 84, 75, 74, 66, 52, 107, 122, 119, 114, 117, 103, 77, 66, 113, 68, 87, 100, 54, 85, 103, 89, 102, 107, 77, 102, 117, 53, 98, 121, 74, 77];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xe0e051232184be6653a0bec2364c0e54u128, 0xaabb0341bb9ce5bd95ad58d1fbdde17u128, 0x6e7d74729fc0dbba2b75b201f6554576u128));
        let correct = [57, 70, 83, 104, 110, 98, 71, 70, 86, 100, 65, 69, 106, 84, 119, 104, 71, 98, 98, 110, 67, 82, 89, 80, 121, 74, 76, 109, 68, 109, 112, 65, 120, 69, 120, 69, 117, 88, 56, 97, 104, 90, 71, 98, 101, 65, 102, 82, 68, 49, 97, 49, 119, 114, 83, 67, 121, 101, 105, 86, 99, 78, 87, 90, 121, 70];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x1dea3aafcdd88adfb0675d4c1c3fab25u128, 0xd848c04f9eac43f35ec5824ff679774eu128, 0x3491df0c82eb839ac762be62b792fe64u128));
        let correct = [50, 54, 101, 87, 57, 97, 51, 99, 66, 50, 121, 106, 106, 122, 67, 55, 88, 115, 70, 117, 70, 90, 119, 97, 83, 69, 112, 49, 72, 84, 53, 74, 114, 76, 90, 74, 121, 110, 56, 57, 75, 121, 102, 104, 81, 74, 66, 55, 50, 82, 121, 106, 103, 119, 70, 117, 68, 76, 51, 88, 71, 117, 100, 54, 99, 51];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x32775a576c3435d8ce371fbd1c888cb4u128, 0x2ede45d07cb0bf62211e12d0a5e1f585u128, 0x5fe69bb094b4f3b43cb60cd3e42d3528u128));
        let correct = [50, 114, 78, 88, 88, 87, 113, 119, 112, 51, 109, 66, 110, 84, 98, 104, 50, 122, 101, 51, 69, 113, 55, 103, 56, 90, 120, 68, 51, 51, 115, 98, 112, 69, 120, 49, 67, 77, 52, 86, 71, 104, 53, 67, 102, 52, 105, 71, 101, 67, 74, 115, 83, 104, 121, 75, 105, 78, 51, 82, 71, 112, 121, 87, 69, 75];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x2ba157bf6c9b5893145d854943131d6au128, 0x7c56feeabef6029f890aeda0f645b485u128, 0x4df8aadce74ea0241efb801a66637c6au128));
        let correct = [50, 98, 112, 121, 55, 100, 85, 106, 81, 118, 74, 81, 89, 118, 78, 65, 120, 115, 67, 75, 112, 109, 121, 114, 97, 120, 81, 98, 114, 122, 50, 97, 81, 78, 51, 66, 50, 118, 111, 81, 51, 118, 103, 68, 103, 104, 84, 52, 106, 55, 57, 50, 88, 78, 116, 72, 114, 107, 90, 84, 106, 83, 50, 117, 77, 84];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x3f14c6c78cefc6180f8843ae609c4c5au128, 0x8d7c5168613c1a67b5313be2573bdf7eu128, 0xf08ba8825dcb3b1ca4fbde361572b578u128));
        let correct = [51, 75, 68, 68, 52, 110, 97, 118, 71, 52, 78, 70, 56, 54, 76, 104, 113, 122, 88, 85, 75, 68, 104, 52, 66, 103, 77, 87, 77, 85, 103, 122, 112, 69, 86, 53, 110, 77, 89, 110, 105, 86, 66, 52, 99, 76, 88, 113, 111, 82, 89, 87, 107, 111, 53, 71, 54, 50, 120, 66, 118, 111, 54, 118, 100, 77];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xd8f3e07ea040437c7204c292968dcd9du128, 0x79ccc153b41095b45e2e2f1b2898f30fu128, 0x2f534ad881aef59b4c852360501bb515u128));
        let correct = [56, 120, 97, 119, 54, 71, 81, 74, 54, 115, 113, 112, 68, 89, 105, 113, 89, 52, 107, 56, 65, 78, 55, 90, 88, 75, 83, 112, 104, 87, 54, 51, 83, 50, 111, 105, 110, 109, 90, 86, 101, 54, 85, 72, 109, 72, 118, 103, 88, 98, 104, 99, 49, 110, 106, 121, 70, 68, 111, 54, 50, 112, 122, 57, 70, 74];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x502a9f3265503d3a3aa55931747c3499u128, 0xe9794e6080eac96dff43d5a13fd56a5cu128, 0x396a2ce814ccab5c9b7648d32c2929e4u128));
        let correct = [51, 119, 90, 89, 55, 57, 110, 67, 69, 87, 115, 115, 103, 107, 55, 122, 75, 66, 112, 80, 111, 98, 51, 81, 77, 66, 49, 83, 67, 86, 77, 81, 103, 72, 83, 121, 87, 112, 80, 54, 77, 88, 104, 117, 99, 88, 55, 105, 57, 67, 76, 110, 56, 101, 90, 57, 50, 117, 118, 52, 54, 117, 104, 85, 49, 121];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x2d0d3cf0fe510fca109bc459ab53ec25u128, 0xd7a9b7492f76c79bc8fe44cf3c1cdfafu128, 0x847ade285b9a3c8d903b12bc85ac80bfu128));
        let correct = [50, 101, 114, 78, 112, 101, 89, 90, 80, 103, 52, 118, 84, 78, 71, 102, 54, 87, 84, 80, 121, 83, 122, 101, 89, 53, 57, 68, 84, 90, 55, 82, 75, 98, 113, 67, 103, 69, 118, 72, 54, 70, 57, 112, 80, 105, 71, 105, 122, 54, 114, 80, 65, 74, 104, 88, 54, 112, 111, 89, 85, 55, 116, 88, 120, 83];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x1f1765c17898cd2b07d3009dab50e9e1u128, 0x3351bed36b442324063ee9326633c7bfu128, 0x80970971b6f22061f5aa3b386f2e66cu128));
        let correct = [50, 57, 57, 103, 57, 83, 70, 99, 78, 104, 115, 68, 100, 120, 87, 117, 90, 109, 100, 113, 122, 107, 106, 103, 121, 54, 52, 104, 70, 74, 87, 81, 68, 77, 77, 111, 90, 88, 53, 117, 85, 119, 57, 120, 105, 51, 114, 49, 54, 103, 70, 105, 121, 88, 90, 99, 82, 57, 88, 67, 117, 101, 105, 83, 57, 90];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x3e44f33627a264c689cb33ab7e48b599u128, 0xf5b842e77a476ffb0b5fb1b6a6a415b8u128, 0x7c9d78b3dd3c5e9762ab72c5f80159cu128));
        let correct = [51, 72, 86, 50, 104, 85, 97, 76, 122, 80, 117, 87, 81, 87, 54, 68, 117, 102, 113, 100, 50, 65, 50, 100, 52, 100, 51, 55, 98, 121, 120, 55, 68, 66, 99, 53, 76, 57, 111, 49, 85, 68, 114, 98, 111, 70, 121, 112, 113, 49, 52, 121, 88, 88, 115, 72, 55, 56, 74, 101, 98, 98, 115, 71, 120, 84];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xb22783395bfec2f708a9a68c57bdee49u128, 0xa10bdee6564956586f0e03ae248c1205u128, 0x4659dab207a8b161ed662567c3c364efu128));
        let correct = [55, 89, 51, 69, 65, 54, 83, 80, 90, 100, 121, 88, 98, 89, 53, 70, 88, 101, 88, 85, 90, 66, 115, 103, 51, 71, 75, 82, 103, 72, 120, 67, 111, 55, 84, 53, 87, 103, 82, 101, 56, 67, 98, 111, 54, 105, 54, 106, 99, 116, 74, 110, 105, 67, 83, 88, 49, 87, 86, 86, 89, 72, 101, 117, 51, 52];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x8274fc797d5cb8998f47da59f259728du128, 0xebffee267ed0f9380d621e56b3cd5a76u128, 0x56f0301a88f990c19572c6a7a06beaa3u128));
        let correct = [53, 110, 90, 78, 114, 83, 82, 116, 88, 112, 70, 66, 83, 114, 69, 55, 99, 76, 71, 82, 75, 117, 70, 66, 76, 85, 77, 120, 55, 49, 112, 70, 82, 111, 115, 51, 120, 110, 99, 67, 103, 106, 54, 90, 118, 67, 70, 105, 50, 86, 69, 70, 98, 98, 89, 113, 51, 115, 100, 83, 82, 122, 78, 98, 68, 67];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x7196dcfde8209d12497a843587ef3f74u128, 0x95ae827b07d9c44182264c95265ea52au128, 0x737a9691c694d13ee62e4eceb1fbb0edu128));
        let correct = [53, 65, 102, 117, 103, 112, 118, 87, 57, 54, 116, 101, 98, 113, 51, 99, 100, 111, 84, 100, 68, 104, 117, 65, 67, 120, 104, 90, 110, 84, 83, 51, 51, 110, 104, 71, 71, 99, 53, 76, 65, 118, 69, 98, 56, 106, 103, 104, 88, 51, 118, 68, 75, 52, 65, 118, 77, 56, 68, 90, 99, 87, 115, 74, 80, 69];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x8d58c5d7211386e439c4aef43d8afbc1u128, 0xe3d632948e5863b1a5b0944ba6d1b218u128, 0x1b974825193d20cbbbf6821cb6c18dccu128));
        let correct = [54, 66, 106, 66, 67, 86, 56, 90, 72, 114, 118, 75, 105, 90, 89, 90, 117, 69, 67, 106, 74, 55, 75, 114, 66, 51, 66, 107, 116, 97, 98, 52, 70, 114, 98, 100, 119, 101, 98, 57, 106, 105, 49, 112, 69, 99, 105, 104, 67, 122, 84, 109, 89, 106, 83, 85, 76, 109, 99, 67, 72, 103, 90, 90, 111, 113];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xf842e0c1ab09b1275c14cb7214a10b6du128, 0x71d79f4513d60171cc91a29f620ad397u128, 0xe9c08b1a4932055de725a04b5b4d2cd8u128));
        let correct = [65, 55, 67, 81, 110, 105, 83, 89, 106, 101, 49, 110, 78, 106, 55, 78, 99, 110, 56, 106, 88, 77, 106, 75, 65, 75, 66, 98, 122, 121, 83, 70, 113, 113, 53, 68, 78, 104, 54, 116, 122, 99, 56, 110, 99, 78, 83, 106, 99, 65, 119, 77, 97, 104, 87, 104, 110, 112, 51, 121, 103, 82, 50, 99, 84, 49];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xfdbd1549f691e53533cfaf13af96d360u128, 0x3a944dbd808e51d8fe20030f2fa832aau128, 0x82338f82fc7c6702f63e8fa478496092u128));
        let correct = [65, 74, 114, 75, 76, 119, 55, 89, 110, 101, 97, 66, 105, 107, 68, 118, 102, 81, 82, 81, 120, 87, 57, 100, 83, 49, 55, 84, 117, 56, 66, 111, 117, 56, 114, 80, 105, 86, 116, 75, 71, 67, 50, 98, 70, 87, 83, 119, 118, 118, 107, 83, 57, 99, 78, 76, 115, 83, 49, 80, 114, 75, 81, 53, 104, 84];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xd56877fffe9f51abc75b07def6deaf05u128, 0x5b13c8ae3b918729d35f3fc654a10c2au128, 0x1fb3a89a2d913145729e7941a4bd13eeu128));
        let correct = [56, 113, 51, 88, 120, 122, 104, 66, 99, 53, 120, 115, 101, 71, 100, 117, 112, 110, 101, 115, 81, 83, 76, 72, 52, 89, 118, 106, 68, 105, 53, 112, 84, 110, 105, 57, 99, 115, 121, 75, 110, 82, 111, 114, 50, 72, 67, 69, 116, 66, 102, 69, 50, 122, 87, 49, 115, 82, 116, 103, 81, 98, 122, 100, 114, 86];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xb2132a3662140f8c4b18b527b54b62a9u128, 0xc5604fb85db7d9207f683cf84b96338cu128, 0x6d8522db487936248750deae286c5fa1u128));
        let correct = [55, 88, 115, 82, 72, 70, 56, 120, 119, 115, 113, 107, 72, 86, 74, 100, 106, 83, 50, 100, 50, 76, 56, 111, 113, 88, 70, 52, 106, 69, 115, 55, 69, 53, 65, 115, 104, 67, 72, 88, 88, 104, 57, 57, 85, 102, 109, 121, 112, 71, 103, 77, 74, 54, 52, 78, 121, 106, 49, 122, 117, 109, 122, 104, 56, 52];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xa859dc854ef727c1d98e665959d6bd31u128, 0x2e9de3daae7b30ca8fd968bd4509df1bu128, 0xa678339909b1fe345cf20c15b70c7654u128));
        let correct = [55, 66, 66, 86, 114, 121, 90, 112, 57, 84, 106, 115, 57, 100, 90, 111, 99, 81, 81, 49, 109, 65, 104, 49, 80, 53, 70, 122, 120, 77, 109, 56, 56, 71, 99, 83, 75, 67, 111, 75, 87, 80, 114, 116, 97, 68, 102, 110, 53, 67, 105, 71, 98, 88, 50, 51, 104, 88, 49, 71, 81, 100, 117, 65, 120, 84];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xee6c08f357a9666c3c0f8941f15dbdfcu128, 0x66ff1967698b7b815d3e41caeeaad8c2u128, 0xd01da9e899cdd13bd63c0c301f48c762u128));
        let correct = [57, 107, 71, 70, 87, 99, 56, 55, 67, 116, 88, 121, 53, 116, 119, 49, 70, 101, 67, 77, 51, 118, 99, 77, 101, 122, 112, 76, 72, 104, 114, 54, 97, 99, 69, 105, 86, 68, 111, 105, 57, 121, 114, 105, 74, 53, 112, 50, 50, 56, 81, 85, 87, 122, 88, 116, 76, 98, 53, 100, 83, 116, 49, 109, 90, 98];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xb335f9543870dec1278e082a76a7300au128, 0x8daf8d291f4bad62255d2f038e21d44u128, 0x8e8faa3637379c146c5be1e8872a3ca6u128));
        let correct = [55, 97, 72, 98, 102, 57, 99, 86, 104, 53, 88, 109, 67, 109, 76, 105, 101, 115, 105, 87, 113, 85, 76, 51, 74, 68, 113, 72, 51, 115, 57, 110, 51, 72, 80, 98, 116, 84, 106, 115, 98, 90, 111, 82, 120, 82, 109, 117, 119, 121, 71, 114, 114, 102, 53, 106, 75, 121, 65, 106, 99, 102, 75, 82, 118, 117];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x8b95e6e4f8a61faad1af67fe55d5c5a6u128, 0x7daf62296f6fe7c1580651c4898d4b95u128, 0x57079e00368d71b064fbadebec7ce616u128));
        let correct = [54, 55, 121, 113, 114, 51, 89, 66, 54, 97, 101, 119, 90, 112, 67, 110, 97, 115, 87, 86, 52, 78, 114, 119, 114, 88, 69, 120, 85, 87, 76, 57, 77, 57, 121, 104, 74, 114, 110, 52, 119, 109, 99, 109, 84, 55, 52, 110, 116, 86, 118, 69, 113, 120, 102, 83, 53, 112, 109, 113, 53, 53, 89, 102, 99, 121];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xe65f26c055926aec4cef1a4a4c1a08bfu128, 0x74067a482b70232b164bdd0811b06977u128, 0xbd8464b23466a54fae0e6eecebf7f05du128));
        let correct = [57, 84, 56, 113, 109, 76, 90, 105, 97, 101, 77, 68, 67, 103, 100, 102, 121, 67, 86, 110, 51, 105, 49, 117, 116, 89, 83, 66, 121, 68, 121, 82, 97, 52, 72, 111, 67, 82, 103, 81, 99, 111, 78, 106, 105, 74, 86, 103, 78, 114, 87, 75, 102, 55, 106, 110, 114, 121, 120, 55, 104, 49, 54, 50, 66, 110];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xe4fff90bb2803abbbbb6473327284733u128, 0x6420777a588c20acfeb0a0e11f92efcbu128, 0xd5577e5eb1c162efadb11b1e9acda694u128));
        let correct = [57, 81, 68, 90, 98, 66, 112, 75, 112, 113, 105, 110, 78, 98, 122, 66, 116, 107, 77, 99, 118, 76, 120, 81, 70, 85, 81, 88, 68, 116, 115, 70, 53, 102, 77, 54, 122, 53, 70, 90, 57, 110, 106, 120, 114, 120, 112, 90, 116, 56, 50, 100, 120, 54, 99, 114, 56, 50, 114, 89, 65, 74, 75, 56, 117, 72];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xfab9a62eab52831ab1c3f47570fa2d1du128, 0x53b3c06e9d8907d7cd66648363a74ec5u128, 0x1d3b812e0737e01e0f4cf27fddd07581u128));
        let correct = [65, 67, 83, 84, 107, 112, 49, 85, 65, 67, 53, 119, 49, 78, 83, 83, 97, 77, 118, 119, 57, 54, 72, 85, 81, 71, 120, 115, 117, 74, 90, 101, 88, 113, 69, 67, 54, 115, 106, 53, 112, 57, 76, 76, 69, 89, 85, 122, 105, 100, 76, 80, 55, 74, 86, 56, 109, 102, 121, 119, 82, 110, 51, 105, 118, 85];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x54f6bca759afa84da3791b2fe442c6feu128, 0xfe4efbf7c5bc4fff6f4bc1e58d1abbc2u128, 0x7d2baea63553715c60bad3e60dbe25c3u128));
        let correct = [52, 55, 109, 88, 86, 68, 70, 54, 68, 70, 84, 82, 90, 106, 53, 76, 49, 57, 105, 114, 117, 106, 97, 83, 98, 68, 55, 49, 114, 111, 54, 113, 56, 119, 83, 121, 77, 77, 53, 114, 82, 109, 90, 112, 84, 89, 54, 118, 102, 53, 105, 56, 89, 66, 75, 81, 117, 68, 116, 122, 89, 51, 85, 55, 50, 122];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x5f923efaa635ca80b01eeeac17af2e67u128, 0xccb65e1b372b8896413d2533528d59a2u128, 0x29dfa87c62240fb1b6e558bb37cadb7fu128));
        let correct = [52, 87, 76, 86, 55, 90, 53, 54, 86, 55, 70, 82, 57, 109, 77, 76, 87, 51, 100, 69, 105, 117, 81, 53, 50, 103, 55, 68, 87, 78, 121, 112, 119, 105, 52, 50, 102, 102, 72, 85, 76, 75, 111, 71, 120, 98, 97, 117, 52, 89, 72, 78, 77, 76, 70, 69, 120, 104, 74, 117, 117, 89, 66, 55, 75, 76];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xd0381d6fad963e57f680cb3d256df5e5u128, 0xb88f69c436db33ac5ca333edf5c2e14u128, 0x6b118c47b82168f12a2b544aae8cff91u128));
        let correct = [56, 101, 49, 69, 56, 104, 112, 57, 102, 120, 67, 110, 116, 71, 90, 99, 55, 122, 75, 110, 87, 111, 99, 74, 69, 69, 122, 68, 114, 77, 119, 84, 67, 85, 90, 112, 74, 51, 111, 82, 69, 68, 119, 67, 74, 78, 97, 70, 87, 67, 89, 68, 80, 107, 103, 102, 107, 109, 117, 51, 101, 99, 116, 82, 119, 110];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x2de5e72345fdf9a6869fb463da9f6fa5u128, 0x286c7c1c5afa43b224f254471d2f8646u128, 0x66e4e49d4dc47452a3f80c0defc7bd41u128));
        let correct = [50, 103, 101, 112, 72, 115, 76, 111, 65, 52, 72, 104, 86, 77, 114, 52, 106, 68, 53, 113, 90, 56, 57, 118, 107, 57, 65, 119, 85, 110, 76, 102, 71, 114, 49, 77, 83, 67, 55, 53, 72, 52, 120, 112, 55, 49, 66, 118, 72, 118, 121, 118, 77, 107, 67, 75, 120, 118, 99, 56, 65, 100, 100, 118, 99, 89];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x966bd9eae0cb534a26246885064e7105u128, 0x3a9f0e667107befbdfd911aca7815531u128, 0x507e7f830c7ba5be2d0a9deaeecea246u128));
        let correct = [54, 88, 50, 121, 76, 69, 83, 89, 109, 88, 100, 53, 82, 88, 111, 111, 102, 82, 80, 122, 66, 86, 97, 116, 106, 120, 72, 105, 68, 49, 87, 111, 65, 114, 88, 101, 76, 120, 51, 111, 82, 67, 106, 55, 105, 110, 90, 85, 106, 70, 121, 111, 89, 53, 101, 119, 52, 69, 74, 85, 52, 74, 89, 118, 107, 68];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x568dbe824592f2f0313bb736bb83c3c7u128, 0x3486bba7b6759e3a2a65b73d3c3e34dau128, 0x160a12cba3c5a92e359907d68bfe3907u128));
        let correct = [52, 66, 57, 105, 87, 86, 121, 100, 56, 55, 109, 98, 52, 50, 77, 89, 105, 49, 122, 100, 65, 84, 66, 105, 76, 76, 80, 102, 55, 55, 111, 116, 102, 86, 116, 82, 88, 80, 113, 54, 122, 107, 119, 97, 49, 68, 70, 77, 74, 76, 53, 75, 99, 119, 69, 68, 69, 76, 109, 116, 76, 78, 85, 78, 117, 99];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x709698c43df0250c46c1f8cce1bcd6d6u128, 0xf2af8837942d88c0cafb6d778a86ddd9u128, 0x2abd0f47a900c03793ff45f24b24c69eu128));
        let correct = [53, 56, 89, 80, 51, 83, 101, 119, 100, 54, 49, 85, 104, 86, 81, 78, 83, 53, 102, 69, 121, 121, 99, 90, 122, 105, 88, 69, 122, 120, 121, 117, 90, 104, 81, 81, 71, 70, 110, 50, 89, 105, 113, 115, 122, 104, 78, 81, 120, 97, 81, 52, 90, 75, 114, 111, 54, 66, 90, 69, 65, 109, 70, 103, 105, 57];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x60868576f616c91eb4369c6c0cf21504u128, 0x9b392fa2961695b2b0a199b643db668fu128, 0xb1d6ba4df03a05e039fc9f145650fb86u128));
        let correct = [52, 89, 78, 69, 87, 100, 109, 114, 107, 99, 117, 106, 117, 78, 106, 107, 89, 56, 57, 111, 86, 54, 119, 112, 81, 101, 102, 87, 99, 70, 71, 80, 55, 81, 109, 107, 107, 81, 106, 83, 99, 109, 106, 78, 106, 77, 111, 109, 56, 120, 56, 118, 122, 78, 106, 82, 78, 118, 68, 65, 72, 78, 57, 55, 57, 70];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x290b914c68733ac6cf208a0962abe0f6u128, 0x52cde9f9631de4403a25b51ccca607feu128, 0xfad69fc7bf27af3877f429b08a7bdd9u128));
        let correct = [50, 87, 75, 121, 76, 119, 120, 90, 111, 69, 53, 69, 116, 87, 70, 114, 77, 89, 118, 115, 106, 107, 115, 54, 106, 122, 113, 75, 99, 49, 53, 53, 68, 76, 88, 51, 75, 115, 107, 78, 90, 72, 111, 53, 49, 90, 66, 89, 102, 53, 109, 116, 89, 110, 122, 53, 71, 54, 121, 51, 86, 65, 103, 111, 87, 103];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x9d9b60079d4749a1b050ab6521c26e78u128, 0x8e8f66af66fba479c20e7c0882ce977cu128, 0xcf5156f15cee35621950fdd07d64f4f3u128));
        let correct = [54, 110, 75, 103, 77, 72, 71, 77, 80, 53, 103, 66, 77, 81, 118, 80, 100, 99, 116, 116, 111, 105, 113, 70, 76, 66, 120, 118, 107, 82, 82, 100, 85, 81, 99, 107, 65, 117, 67, 70, 51, 116, 50, 110, 84, 53, 50, 82, 111, 65, 57, 81, 106, 70, 98, 98, 120, 99, 90, 55, 54, 114, 116, 66, 103, 69];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x530a1395f8faa5c673eea81f7e9710d1u128, 0xa9de2233bf70d08b3c0b5d70443ed1c4u128, 0xf93c4eec49e082051600fdad51e69f97u128));
        let correct = [52, 51, 103, 51, 110, 115, 98, 121, 105, 71, 99, 53, 57, 54, 114, 90, 49, 87, 70, 111, 110, 120, 115, 116, 65, 100, 66, 120, 51, 84, 49, 115, 68, 102, 122, 55, 116, 84, 109, 51, 71, 65, 97, 77, 66, 98, 106, 101, 71, 50, 52, 75, 104, 114, 85, 120, 56, 101, 122, 50, 75, 98, 81, 80, 98, 76];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0x7e7ba0fb5ae647586862316f5000d79eu128, 0xaedae004356055d67de76f4af640d2c9u128, 0x3840fc786d48cf6f178db88dce8ab348u128));
        let correct = [53, 101, 54, 121, 110, 113, 100, 100, 98, 121, 89, 76, 121, 111, 101, 80, 89, 90, 105, 81, 111, 50, 78, 81, 105, 102, 121, 121, 77, 86, 113, 117, 69, 71, 102, 101, 66, 113, 105, 112, 85, 55, 83, 99, 89, 98, 103, 55, 122, 76, 109, 67, 67, 72, 67, 112, 65, 89, 54, 87, 118, 100, 112, 57, 83, 55];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xaa078f66f731174befd1b3c1419b5019u128, 0xc438a592c4d8949af0b4849f249a2333u128, 0xc0ac8e3206f6dfcdd7ce84b3f3579f9cu128));
        let correct = [55, 69, 107, 100, 72, 105, 103, 72, 113, 67, 120, 81, 67, 107, 54, 78, 110, 102, 76, 118, 119, 85, 49, 65, 50, 49, 116, 116, 89, 83, 82, 120, 69, 89, 88, 110, 54, 88, 84, 90, 104, 54, 87, 110, 106, 76, 105, 77, 74, 72, 52, 78, 88, 122, 55, 107, 97, 84, 120, 54, 85, 76, 115, 54, 54, 102];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xdf9e22c5e7d0e59db18d1b84460eca89u128, 0x31bf0032e72108806be7d5b44efcac91u128, 0xf6ddc56718472d5f996e8a2c2c6affa3u128));
        let correct = [57, 67, 109, 81, 75, 71, 87, 121, 112, 106, 83, 115, 98, 109, 86, 101, 87, 110, 107, 112, 111, 66, 118, 90, 66, 100, 81, 112, 69, 115, 83, 57, 106, 86, 121, 110, 78, 89, 50, 74, 72, 121, 74, 103, 53, 52, 121, 81, 122, 112, 81, 51, 70, 66, 107, 105, 113, 112, 116, 71, 119, 75, 84, 105, 56, 83];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xdf52c1a4bd12d57b51f863e8c45b30fu128, 0x1e333eacfd06b4df37032b23a2ef4d55u128, 0xbc3189d396c875115f588df8516baac5u128));
        let correct = [49, 87, 104, 78, 122, 89, 78, 88, 98, 101, 99, 100, 90, 56, 106, 78, 66, 71, 87, 100, 55, 83, 52, 122, 111, 113, 52, 71, 68, 51, 72, 76, 106, 107, 99, 104, 111, 114, 71, 72, 98, 104, 54, 54, 84, 121, 56, 111, 110, 99, 116, 87, 89, 70, 90, 98, 109, 105, 71, 102, 104, 111, 113, 78, 55, 78];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xbf60f97cf0279d64fb5af35060588248u128, 0xfa06418243434195166c5ad61dba9125u128, 0x87a8dd78cafb6a31098d541a0f38656au128));
        let correct = [56, 50, 66, 56, 66, 102, 109, 53, 97, 120, 76, 114, 54, 102, 67, 83, 68, 68, 53, 57, 112, 113, 74, 84, 97, 84, 117, 85, 67, 97, 110, 115, 113, 82, 107, 76, 87, 50, 88, 84, 106, 71, 70, 102, 90, 69, 122, 81, 69, 67, 90, 67, 88, 67, 71, 117, 118, 52, 112, 117, 97, 74, 76, 84, 97, 90];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        let result = U256::to_base58((0xcbf335eda0cb566f5f0df28adeea5b96u128, 0x6eb2b224a301aaf63ce6d3e0c38d56ccu128, 0x651f2279ef26d36f20bf76549c50fee3u128));
        let correct = [56, 85, 118, 81, 119, 113, 120, 81, 71, 75, 81, 117, 77, 120, 56, 70, 102, 114, 104, 90, 57, 52, 49, 75, 105, 69, 118, 105, 111, 118, 121, 103, 115, 118, 88, 66, 104, 72, 76, 90, 89, 110, 80, 121, 69, 70, 67, 81, 49, 106, 68, 77, 107, 122, 71, 117, 100, 69, 80, 119, 103, 107, 53, 117, 101, 50];
        assert!(result.iter().zip(correct.iter()).all(|(a,b)| a == b), "Arrays are not equal");
        */
    }
    
    #[test]
    fn u256_overflowing_add() {
        let u = U256::one();
        // let (U256((upper, lower)), o) = u.overflowing_add(U256::one());
        let r = u.overflowing_add(U256::one());
        let (upper, lower) = r.0.unwrap();
        let o = r.1;
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 2u128);
        assert_eq!(o, false);
        
        // let (U256((upper, lower)), o) = u.overflowing_add(U256((u128::max_value(), u128::max_value())));
        let r = u.overflowing_add(U256::new(u128::max_value(), u128::max_value()));
        let (upper, lower) = r.0.unwrap();
        let o = r.1;
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 0u128);
        assert_eq!(o, true);

        let u = U256::new(u128::max_value(), 0u128);
        // let (U256((upper, lower)), o) = u.overflowing_add(U256((u128::max_value(), 1u128)));
        let r = u.overflowing_add(U256::new(u128::max_value(), 1u128));
        let (upper, lower) = r.0.unwrap();
        let o = r.1;
        assert_eq!(upper, u128::max_value() - 1);
        assert_eq!(lower, 1u128);
        assert_eq!(o, true);

        let u = U256::new(0u128, u128::max_value());
        // let (U256((upper, lower)), o) = u.overflowing_add(U256((1u128, u128::max_value())));
        let r = u.overflowing_add(U256::new(1u128, u128::max_value()));
        let (upper, lower) = r.0.unwrap();
        let o = r.1;
        assert_eq!(upper, 2u128);
        assert_eq!(lower, u128::max_value() - 1);
        assert_eq!(o, false);
    }

    #[test]
    fn u256_from_into() {
        let (upper, lower) = U256::from(1u128).unwrap();
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 1u128);

        let u: U256 = 1u128.into();
        let (upper, lower) = u.unwrap();
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 1u128);
    }

    #[test]
    fn u256_not() {
        let (upper, lower) = (!U256::zero()).unwrap();
        assert_eq!(upper, u128::max_value());
        assert_eq!(lower, u128::max_value());
    }

    #[test]
    fn u256_add() {
        let (upper, lower) = (U256::one() + U256::one()).unwrap();
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 2u128);
    }

    #[test]
    fn u256_order() {
        let compare = U256::one() == U256::one();
        assert_eq!(compare, true);
        let compare = U256::one() > U256::zero();
        assert_eq!(compare, true);
        let compare = U256::zero() < U256::one();
        assert_eq!(compare, true);
        let compare = U256::one() < U256::max_value();
        assert_eq!(compare, true);
    }

    #[test]
    fn u256_sub() {
        let (upper, lower) = (U256::one() - U256::one()).unwrap();
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 0u128);
 
        let (upper, lower) = (U256::one() - U256::zero()).unwrap();
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 1u128);

        let (upper, lower) = (U256::new(u128::max_value(), 0u128) - U256::new(0u128, u128::max_value())).unwrap();
        assert_eq!(upper, u128::max_value() - 1);
        assert_eq!(lower, 1u128);
    }

    #[test]
    fn u256_mul() {
        // let (U256((upper0, lower0)), U256((upper, lower))) = U256::one() * U256::one();
        let (v0, v) = U256::one() * U256::one();
        let (upper0, lower0) = v0.unwrap();
        let (upper, lower) = v.unwrap();
        assert_eq!(upper0, 0u128);
        assert_eq!(lower0, 0u128); 
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 1u128); 

        // let (U256((upper0, lower0)), U256((upper, lower))) = U256::one() * U256::max_value();
        let (v0, v) = U256::one() * U256::max_value();
        let (upper0, lower0) = v0.unwrap();
        let (upper, lower) = v.unwrap();
        assert_eq!(upper0, 0u128);
        assert_eq!(lower0, 0u128); 
        assert_eq!(upper, u128::max_value());
        assert_eq!(lower, u128::max_value()); 

        // let (U256((upper0, lower0)), U256((upper, lower))) = U256::zero() * U256::max_value();
        let (v0, v) = U256::zero() * U256::max_value();
        let (upper0, lower0) = v0.unwrap();
        let (upper, lower) = v.unwrap();
        assert_eq!(upper0, 0u128);
        assert_eq!(lower0, 0u128); 
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 0u128); 

        // let (U256((upper0, lower0)), U256((upper, lower))) = (U256::one() + U256::one()) * U256::max_value();
        let (v0, v) = (U256::one() + U256::one()) * U256::max_value();
        let (upper0, lower0) = v0.unwrap();
        let (upper, lower) = v.unwrap();
        assert_eq!(upper0, 0u128);
        assert_eq!(lower0, 1u128); 
        assert_eq!(upper, u128::max_value());
        assert_eq!(lower, u128::max_value() - 1); 

        // let (U256((upper0, lower0)), U256((upper, lower))) = U256::max_value() * U256::max_value();
        let (v0, v) = U256::max_value() * U256::max_value();
        let (upper0, lower0) = v0.unwrap();
        let (upper, lower) = v.unwrap();
        assert_eq!(upper0, u128::max_value());
        assert_eq!(lower0, u128::max_value() - 1); 
        assert_eq!(upper, 0u128);
        assert_eq!(lower, 1u128); 
    }

    #[test]
    fn u256_div() {
        let (d, r) = U256::max_value() / U256::one();
        assert_eq!(r, U256::zero());
        assert_eq!(d, U256::max_value());

        let (d, r) = U256::max_value() / (U256::one() + U256::one());
        assert_eq!(r, U256::one());
        assert_eq!(d, U256::new(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFu128, u128::max_value()));

        let (d, r) = U256::max_value() / (U256::one() + U256::one() + U256::one());
        assert_eq!(r, U256::zero());
        assert_eq!(d, U256::new(0x55555555555555555555555555555555u128, 0x55555555555555555555555555555555u128));

        let (d, r) = U256::max_value() / U256::max_value();
        assert_eq!(r, U256::zero());
        assert_eq!(d, U256::one());

        let u_3 = U256::one() + U256::one() + U256::one();
        let (temp, _) = U256::max_value() / u_3;
        let (d, r) = U256::max_value() / temp;
        assert_eq!(r, U256::zero());
        assert_eq!(d, U256::one() + U256::one() + U256::one());

        let (d, r) = U256::max_value() / U256::new(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFu128, u128::max_value());
        assert_eq!(r, U256::one());
        assert_eq!(d, U256::one() + U256::one());
    }

    #[test]
    fn u256_determinstic_k() {
        assert_eq!(U256::new(0xb3399a611c9cd50abbd62d386e40d5c0u128, 0x864f7b4e7a88bf26e6781392f34e4d65u128).deterministic_k(U256::new(0x668f300cb7d4a8853dd1c0bb46ca25d0u128, 0x50ec4eba143239132e7b26c0a3430bb5u128)), U256::new(0x9571488ac6c0fd75de33cdad362eadf2u128, 0xc99c2299701e036e433cf55517dbd849u128));
        assert_eq!(U256::new(0x92d1251950e96a32414026115fdffa35u128, 0xb3a4fa0549a2424739d59eb60cf48cf6u128).deterministic_k(U256::new(0x9998ce4dbb441404145d217d95c8555au128, 0x4ef0a9ea7bcb7122cd383eb92f539251u128)), U256::new(0xc92cd5e8ed64ff7086d71cc37fd87ed6u128, 0x6fc6c56495f5953e54f6ec62a9c566a1u128));
        assert_eq!(U256::new(0xa65ac33834d3414f8c60c4251cde1128u128, 0x7e898fc983362abde4d1074d4d0d308du128).deterministic_k(U256::new(0x5cee7c6e160ae4917232f1895f34f9abu128, 0x9675f77e6d0f1ffb7e91791332adf479u128)), U256::new(0xe78b78b82386aa2e0db4958cebd590bfu128, 0xcba4741210a22a51b9d40fd417fd30abu128));
        assert_eq!(U256::new(0x34a8a01e8ae700445b2f6308acdd983eu128, 0x26db486da82855d04447b43f59349912u128).deterministic_k(U256::new(0xa05b3d11e0d67122fc5600913d77bd88u128, 0x391f3aa098bcd72b9cfb9f1c016cd7b9u128)), U256::new(0x3b0f7de6b9fe12f3cc1b37a93c42e0eau128, 0xedb81e9f3ea0de4d0f6170b344a7c3dau128));
        assert_eq!(U256::new(0xba94f8d0b8575ef62a24e6f978ba8a83u128, 0x7a1e2724fab0113c76860959be2ac402u128).deterministic_k(U256::new(0x15223a5f21a783c029073702eaceb6ebu128, 0xf46b57f8a03a89d05b3318e4a28425fu128)), U256::new(0xbaef9714ba9788252c96284bf7bcea30u128, 0xf71dbecc0f18134e80583a2cadf0b286u128));
        assert_eq!(U256::new(0x7d059015b282b775044c1f96375a8cccu128, 0x52fd2e3ddec1ddeab8c8c324f05497b4u128).deterministic_k(U256::new(0xe53ecb4b6373ed2fcce18b66cf326388u128, 0x172d62e71a0e47e8f4828c863b0fbc64u128)), U256::new(0x9d7889c7c31cf87aea555ae7eb53b18au128, 0x6a392bdfeca9708410b065350a9f39d6u128));
        assert_eq!(U256::new(0x43f200c92cadbd4d8eb06910ff3df8f7u128, 0x20883976013887a44f1627d945bdcd8eu128).deterministic_k(U256::new(0x4b9d5beddaa9105bda69557cc360be35u128, 0x1cc9c2265627582b261991a260e32d54u128)), U256::new(0x274e9a16894d86db4c7b6523464fb12cu128, 0xc0782004e7a3f5ef9a825e9c7eb2bd61u128));
        assert_eq!(U256::new(0xda7bd63ec5e406f21085e13ec8684044u128, 0xe929d2861b24e27e34061009175fde1u128).deterministic_k(U256::new(0x116c9b15a6227453f8ed2c34bc925dbfu128, 0x96e5d9b0cf3a1daf3f96f2bd8316bf01u128)), U256::new(0x8b94722370d70fb8687947e9d8544e92u128, 0x292a329fa620f7a4318dd088f1b5d319u128));
        assert_eq!(U256::new(0x85e4d9f74e80859b9702f626e93bea0bu128, 0xc1fdd22e552dd01513646cdb590c7f3du128).deterministic_k(U256::new(0x35f4678ae41cd6d26ea8f25e7d14bea7u128, 0xc8deab4be445b2e376ac5e57a2a849e9u128)), U256::new(0x53540ff44f800ed93cccd9017702f432u128, 0x22c52da3bfbd806cb1b05758aa227b4fu128));
        assert_eq!(U256::new(0x43fb0cf79d4b2a39c536d83c34c76c9eu128, 0xba7845876f8346816429538d7e15570cu128).deterministic_k(U256::new(0xf747626442cbc2e2ddb3c0e4c43163cbu128, 0x9291524cb3bf4aa77240cb1ec59bcc10u128)), U256::new(0xe23ab40d08e57d6557e1173a1be079b7u128, 0x1cdfb7e0318a758851e8cac52caa0606u128));
        assert_eq!(U256::new(0x6b5ae817e768a443216007fd00fc5397u128, 0xb97886b8c790a1e9d1b462ae890e5a3eu128).deterministic_k(U256::new(0xbb55e99fa15a30987f3bb8628f44561au128, 0xc19fd476f618acaf7db728a639354807u128)), U256::new(0x9360e6fa3041e4727a46bc598603ef4du128, 0x945da6ccb2176735c3adc8e07ae0efc2u128));
        assert_eq!(U256::new(0x5887a86a7b3207ad21922a03b9116de1u128, 0x3dc45af364b246119616415b401db784u128).deterministic_k(U256::new(0x3633446cedbdff752147ec5ed1fb5eeu128, 0x368bd787be510c4d7a680b9f0870f7du128)), U256::new(0x9fd4e8a26b581c1c597df9bf20891a5cu128, 0x361816e58d5fc45337ae0150d76493fu128));
        assert_eq!(U256::new(0x91e05356d4b9e777d66edf6074d6ea88u128, 0xc530ebc25c3eda2199ab177366d28180u128).deterministic_k(U256::new(0x27667cae8f34d3c74ddbc1fef89693a9u128, 0xc5e1dae01a870b985e5ff7a1b6877123u128)), U256::new(0x1f4bfb0f650f50ffa4073401ff8dbbe0u128, 0xf5c816504fd784063fc80bdee37ba0bau128));
        assert_eq!(U256::new(0x2742a32452a32cac1a559952c2f00f9cu128, 0x74c5d3d1db435da5e26ad8238974b49fu128).deterministic_k(U256::new(0x683797317226329eedc91e8719c53de9u128, 0xcb66ec702992c7d8ee98ec04548cdec8u128)), U256::new(0xcdcbb61d49dd35a2b256f22f542795d5u128, 0x59e48b513aca7a2ffb3a0d571266bfe0u128));
        assert_eq!(U256::new(0xfaab4c0218cea6839cd998bf79f0c410u128, 0x170845bd4177b99ade2e5aa4af803f49u128).deterministic_k(U256::new(0xb79accaf7cd46aedac641fdf0413a06u128, 0x3b82e63747bfdebf5f19bd2da78b983bu128)), U256::new(0x4f193cb636bbcd3faba739539c2b7c3eu128, 0x51ee72af0aaf3fdf17ce5125c1587c24u128));
        assert_eq!(U256::new(0x1007f4b953ca644f53671bee61f8dfbeu128, 0x71cb5f662a4ecb5c8a48964cb1006e9eu128).deterministic_k(U256::new(0x65d14ea79bfdfa99f577cff3586c7888u128, 0x5544283faf1ccd26bfbec6575fc16de6u128)), U256::new(0xf7086b7334f2474d838ad6a2a12c3e0fu128, 0x6114fe56f11e92166ad64c233d1f5f54u128));
        assert_eq!(U256::new(0xbcab56d9092a1cc38a3f4cb85afd5232u128, 0x1964d062aa7d11f7cace54fed150e76fu128).deterministic_k(U256::new(0x74e90ab6db03fa57667da44c3b8f4545u128, 0x8f0fe2a5ad5c30f5306216082080c4b8u128)), U256::new(0xc614fa4421061399e2689aa711e9c31au128, 0x5e9ce0d80e7b288c25930c70046394cau128));
        assert_eq!(U256::new(0x4540e4c612eda1d1f512b5430e5a0f78u128, 0xc87e870734164ff32ef5f254135b692bu128).deterministic_k(U256::new(0xc209d77cf8fbff6014c49c3b5497b6a1u128, 0xec40d85dbbf6b6c4089a9c6fe2763fbbu128)), U256::new(0xcfcfce98a27debeedb42a9318ea26375u128, 0x71b3c23dcea109072bb8971ae11e1312u128));
        assert_eq!(U256::new(0x783dd81658e5495976d8da42fea46f17u128, 0x729b519491aa0e5a3a8fb398aaa2c0b7u128).deterministic_k(U256::new(0x5c4a54ea70785eeda364393d8226f935u128, 0x113ff145dc316420472829ce40c72c3u128)), U256::new(0xcea7679086a2917e832aca35ce05c301u128, 0x97db3d6273e0bb066c36ffb980a9b1a5u128));
        assert_eq!(U256::new(0x6ac7b644a3e37171133c06f2c9ff6e92u128, 0xd95c62b212753c82b6c1a9ec0e145b79u128).deterministic_k(U256::new(0x4725927d02b0dab04510208eb52fd1c3u128, 0xa9b2efd1f2d9ff83369f0f7cfa72704bu128)), U256::new(0x1717f29e04ffffa94d32557a0eb7d2f4u128, 0xed53edce25ca70ce97d628e43ed0bf7bu128));
        assert_eq!(U256::new(0xb980487ac857f06e14ccc8810e6d7269u128, 0x6c29f5db5fd11ee2a218da5283e73e67u128).deterministic_k(U256::new(0x5889808d622a3158355ca082fba85adeu128, 0x31926d3f84c0909dce2458b1d3468e9cu128)), U256::new(0x78e9a6d02acb1805172be681012ced4du128, 0xf21104bc327822d63f66ca40485d5f29u128));
        assert_eq!(U256::new(0x7f0c4dc4e9dc9cadd12a10640718e3a6u128, 0xbf433100bfe2a625539d14c5960bc886u128).deterministic_k(U256::new(0xe2d07235ba3d10f08b258f6ec2fe92au128, 0xc9f0eb1985cab53625e1f0c3cabbd61du128)), U256::new(0xf2323b9a86235adf20c27143b506f8d5u128, 0xba784afc2311e1b1c4995d3a149eb8edu128));
        assert_eq!(U256::new(0x3fe75a95371e1d267637befca43f2f65u128, 0x79f2ff6382a2e4d70c7c413bb55711ecu128).deterministic_k(U256::new(0x859f745e44b6c786fe174a04cf9affc4u128, 0xf9c09696f46f24d0f066113d58e56680u128)), U256::new(0xd609dd5a8673c43819d27daec07f6dbeu128, 0x55151d3c60570c623839dcfb318b55fau128));
        assert_eq!(U256::new(0x60bc775fd3b6e44acefe173ae98787ddu128, 0x62150aa5e8a1ca31e45ce8077d2ebf38u128).deterministic_k(U256::new(0x5dc879dd5c1551e8bcd74b4f6fe918e3u128, 0xad22757f9aef9926aa2208be2af812ccu128)), U256::new(0x6b3a4ac48ef03958f4ec16ae4a8f29d0u128, 0xd6ec2da5c8f731fbb2a4ad4d4fa5fdb5u128));
        assert_eq!(U256::new(0x9b86d4c5eedb2bccac9cdcc0ab97b46au128, 0xc2e86d8acb4d220352b00bbab112d80bu128).deterministic_k(U256::new(0xc7ac0f3d0a5f394631dd4b4766e6ca85u128, 0x5231a7f511d27b3fbffa567fc241c862u128)), U256::new(0x688ab70cbd9ca7f0497f72f40e6275c7u128, 0x62fc8a7e410455a257b105b7dd774164u128));
        assert_eq!(U256::new(0x905bbb389e1f7574664d7933fe6cf5f8u128, 0x182745c97335134733caf628ad538e32u128).deterministic_k(U256::new(0x1790548324690f70920e84a5d6622be6u128, 0x9912707f264a15d85102ba21d856e935u128)), U256::new(0x240617e59dd7fa4ae8a6d696c73dd1b7u128, 0x39107de2d071c916d0eec18fa31c931u128));
        assert_eq!(U256::new(0x448d39ef3052c25df3198e8835ccaeffu128, 0x89a8dcf10dbfdbf141caeb25fdf02cefu128).deterministic_k(U256::new(0xf4aa1b24a227a06dcbfa829b94ba3a28u128, 0xc3157a120f43091eee70d92fa89c16b4u128)), U256::new(0x7dd71bc3588e9a54fc898fccdbe3c6e7u128, 0x8922cacf6ee21f201e3bac3d258c82afu128));
        assert_eq!(U256::new(0x667e82bea721715c566207566ac1d5ddu128, 0xc98f6b6dc76cba3a402be2a722b76f6u128).deterministic_k(U256::new(0x4f544d85e93bfd2cdda9e6f557683154u128, 0xb3f0630dfae5034c165df6a068ef20deu128)), U256::new(0xd4ee6a7f8e955457e714a3ad5b76272eu128, 0xbc48d441102425729a4e802cafb8ca6eu128));
        assert_eq!(U256::new(0xa353bf4a00899dcf9de6645e150386a5u128, 0xde3c972bd0b017c5cbc68d14835aabc7u128).deterministic_k(U256::new(0xdb319c6ea0bf726ef0123641cf94ddd4u128, 0xeff6cb59f2a8d5202d2a95d02032efc0u128)), U256::new(0x661d6b7ac6fdc478c96f845dce9dcea7u128, 0xc5414896b2501bdc7e0264ca66044862u128));
        assert_eq!(U256::new(0x779511eb0f18524942f6dcca50d5552fu128, 0xbe55306c542a41b3fa2510b906f5e7f1u128).deterministic_k(U256::new(0x610d9a90413da41de4615dc7dba2f9bu128, 0x8c4a3be2c8266b71881751db6405faa4u128)), U256::new(0xec04db11c5b9a7a287f380291928f2dfu128, 0x4c77f8ee3b4cb0f2dd89f776e8b8819fu128));
        assert_eq!(U256::new(0x726442fc5ad6ac08cd12c3f51323df39u128, 0x1cef75ce11bd092503023ffc37a8a66fu128).deterministic_k(U256::new(0x1bd1e161a6a95c71ec6022d5007743cbu128, 0x7ac9dd5efee80697692c55dc09fa25a4u128)), U256::new(0xc6356863c2b5c7a36fc0e8a94a2bca28u128, 0x250f787b9fed48bdcba2baa4c4a73dafu128));
        assert_eq!(U256::new(0x20aabc5a125fd5d71637689721a7f485u128, 0x9df1bf961b682af73422a310b7a4e198u128).deterministic_k(U256::new(0xc83c052906826f87dbff3af3a3cf34e1u128, 0x2591471ebee4d474e09d2cd420ccd92bu128)), U256::new(0x28f51bc61b6b82497ff232a38ffa4c5cu128, 0xef3a07ac100b6954de6dfd44a37b4b24u128));
        assert_eq!(U256::new(0xcfa29e39bd9f6d093170e6bced91db49u128, 0xa5bc6a0d89639c4d49f6cab0363449fbu128).deterministic_k(U256::new(0x65b8a3477625e66015a78b4af5f4e7f0u128, 0x791ba047204fb42de97be043962fe850u128)), U256::new(0xa038dbccb2a43575988fa09c67b48ee3u128, 0x71743a6ea09878335dcc7b6d6f364664u128));
        assert_eq!(U256::new(0x919f982d7be80dd2f4822c3debee7002u128, 0x284e9b9ba9c9916074568d80eca6d56cu128).deterministic_k(U256::new(0xe8499f314283cdbef33ea9db1a81c3edu128, 0xd1b8fb5bfbfee6b5442419def59ee207u128)), U256::new(0xffadf97d54fdfab8a2ac71f734d68eccu128, 0x8007ca1048bbd18201559826c5a97d0bu128));
        assert_eq!(U256::new(0xfe12e4f44d7a07c68fa8979f6562f4b7u128, 0x30672fd4cad5ebeb6b4797ba61a8207cu128).deterministic_k(U256::new(0x53b568074ec83730ad0698fe6a7cac41u128, 0x366fd1404df8f4d75e3282e5f7ba196fu128)), U256::new(0xdd1daa8cf0dee9ae88416ce751d4e5aau128, 0x267d08e3153110f2334e2690e10a8e7du128));
        assert_eq!(U256::new(0x4da40f2683d83404ee8123095014499bu128, 0x76720b47463872a169ad7f9ec2b2aacau128).deterministic_k(U256::new(0xbe81ea402b691cefb5249a488a87669au128, 0x3e0c1f116912eaaa1fab9da8a0a39de7u128)), U256::new(0x8626d2ff0d5120f8bc621c6da3841e93u128, 0x6356bfa62f3776fc7472b6d6b8c90ab4u128));
        assert_eq!(U256::new(0x549d6fcc02b2a0b5791ab5cef58b6bcfu128, 0x3a5bbba9dd006b9eb7f4d797af1c768fu128).deterministic_k(U256::new(0xf5f7554ec377cd68a09fbd24da6b4267u128, 0xd2f012070956258aed7434d606e9c844u128)), U256::new(0x4ad63e84ab99e34cddc0b48597f888edu128, 0x1f3e06f17da6f4fcbc8216837ab1f633u128));
        assert_eq!(U256::new(0xef4ff63973d000438da2cade36c2ea2eu128, 0x8707a23437fbbfb596fc011e0ea4bbe3u128).deterministic_k(U256::new(0xc0647d27527682295c932ec47370c290u128, 0x8b43f8cf8cef2e2bfd168009dd202464u128)), U256::new(0x65798589be18f01540e35ee94b131c4cu128, 0x1b098f8a1ca57e15984c7ab0a0953339u128));
        assert_eq!(U256::new(0x6e576ad10c980a775d3496974858113fu128, 0xe0d21c3d304cf7ec9f2f875a14dbd475u128).deterministic_k(U256::new(0xa34a69a37eabd6081a88094affd0ad2u128, 0x79ca9fc934d513bc57e19920e2e8f8b1u128)), U256::new(0x9e9d3ec9ad89ac6379f558d27e3f819cu128, 0x349cdd2ff4b58d1395919e5b576bf388u128));
        assert_eq!(U256::new(0xf6f379edad6ce35467a9ae9428598d1au128, 0xe0b3b23fc3ae7aa5e5a6db745c0dfeaau128).deterministic_k(U256::new(0x713ee2cbd5620023f5e7f0f109f1e49du128, 0xfe876d2c148ca2c08fe318c348d37f01u128)), U256::new(0x4488ca9c60f1288f504e4282aa0c6d22u128, 0xe6bdf6b0319e20ba224e48fc1ebd864u128));
        assert_eq!(U256::new(0xe8e79899fca46efc59bdcac7cbfbf0dcu128, 0x7f68c90f0467f1cd1347e2ba1e35347bu128).deterministic_k(U256::new(0x444add211b986b72f5eb118e788ff060u128, 0xf2a362864aecbf92ef64ddae959aceeeu128)), U256::new(0x1311d4d762a4ddbcf9b1147e5f70d503u128, 0x8303aaba186d38a6317de5772b169ca0u128));
        assert_eq!(U256::new(0xb4c98a178efbe71cacb799359b65f54au128, 0x775faccdc76ede17fd74eb44a0adaba5u128).deterministic_k(U256::new(0x1b9d5055ea0e3feef7b17fced10ae659u128, 0x5e7bfc74d1343c5e8e1da11d06b8d45au128)), U256::new(0x619b169d1df1a28391045a695cad4bf9u128, 0xacda708cf613de90ca5f9a1a5d2a8eceu128));
        assert_eq!(U256::new(0x571718e4988fccc79c713efa1ad168c7u128, 0xe00b1f5835552aab8abf395ddecefe9cu128).deterministic_k(U256::new(0xb1ca2a1c9f501a847f5afc8e73b83f38u128, 0xb085d2e60f50bace6c6d26ff6b64f53fu128)), U256::new(0x17de0ff1f7d7db746dccd14cd31ba57au128, 0x2a4f092c9c02037fcbc8ed30d9c6f6c9u128));
        assert_eq!(U256::new(0xe08a6285cfd8067aa52dc5e582e5e5fbu128, 0xba1fb8e2c18f80ad0bc55b6d631d02c9u128).deterministic_k(U256::new(0x845b53fae4f1fcb9505e238017963e5au128, 0xda46af9b502e42b2d039dedb9cfa0b01u128)), U256::new(0x6cf255e1774e780a18b6cd209da63b7eu128, 0xdb995c1bfd0ecaf1e82807be79b41b1cu128));
        assert_eq!(U256::new(0x1eaed48caa79ae2aacb52132e433b6e0u128, 0x48f558365badc4a0d1056aecd47a65d1u128).deterministic_k(U256::new(0x1102952358413ae357814a50a7aaf608u128, 0xb2b75741c92c2af2d57c019a4e3585b0u128)), U256::new(0xbdd4d9fcd55d161025a7d4aad445ea44u128, 0x84e33cdfc828b237334af2d658da1573u128));
        assert_eq!(U256::new(0xfc6a8561d1b2710898faae7228d9aa14u128, 0x2d673db08b5305577622ffcaef7bf76bu128).deterministic_k(U256::new(0x436b6ad49923b06b050b6ad23d844a0au128, 0x73ad07286b3dcc32231e0a4c138d7e27u128)), U256::new(0x21214b918002898e4dd51b5e54d9fb01u128, 0x3eb8ed318f3b07658ad7e840abecf30fu128));
        assert_eq!(U256::new(0x53d6d20e34263a426cf7f36411e451b1u128, 0x9ceaeaeb3799db516167f1460f056169u128).deterministic_k(U256::new(0x2640d8c37a0440dd7d6fb522ed0ddd5bu128, 0xf5cff21ba91560dc08dd432b59ffd6fbu128)), U256::new(0x1a68b87b86c2bbd2145a7f12146a8e4au128, 0x2f07d8b062870851d696a8b9e153df52u128));
        assert_eq!(U256::new(0xca64197b6894695f6b5f9c709ef594e8u128, 0x9d05f9a35924c7fedd3377ff20696159u128).deterministic_k(U256::new(0x38758f15ce03b142ff4e0df8d7deab9au128, 0x4e14de2b1bca8670bb8ba43e39b8b196u128)), U256::new(0x8214b3ccc46d706f88efa3a875cdefa1u128, 0x56ff5bfe969de681444fc8f91014aa06u128));
        assert_eq!(U256::new(0x88da421e40e03418f08b1664b6033742u128, 0xe04c15921589e57a3017586581b5081u128).deterministic_k(U256::new(0x460f3573b3e6fdae63fa9f8e879e2d94u128, 0xd727025b9670313c5d18efb130806ec9u128)), U256::new(0x3408178f785f0e8c0d842025199fd79cu128, 0x4497f24ba1d8017b58713bd3a1eaea0fu128));
        assert_eq!(U256::new(0xce314f97a474d726be954eb5975c82du128, 0x24618ca6d1226e95a8e0c1a591bb7f28u128).deterministic_k(U256::new(0xed8b34b7bd6b9349c0a0477d3918918eu128, 0xbb65061f4a14078f4101af4265f224bau128)), U256::new(0x98ed5f22866dbd4c80368120a9482039u128, 0x2cb9120e08030938d9b65babe66da1e0u128));
        assert_eq!(U256::new(0x3984cc0f22dd0123231f76e741da8629u128, 0xb263753cbf7a4f99d73db1e84354ae1cu128).deterministic_k(U256::new(0x7146013883ce2ed9f6a59c839584d822u128, 0x1e712158fc92336cd70265353ffeedc7u128)), U256::new(0x20ec922208029129b0fbbd3dd8e39831u128, 0x961859408bbb40f5b1c96710b37e0835u128));
        assert_eq!(U256::new(0xc82fd0088b7a95fedcad3ad16222cc94u128, 0x16ee4c241e953472ec1586e4dd59f044u128).deterministic_k(U256::new(0xf538e785bd919865daf7f15c395703au128, 0x15bfb202ff0729a7475320eaa895c9a8u128)), U256::new(0xe414ab53b4193d0a8f0cdeaf8f5837aeu128, 0x1d7d99eba5059cfa2ea696011c822946u128));
        assert_eq!(U256::new(0x8eabb635e574d31cc577da1e43c89f87u128, 0xcfe04763284a420f3f4b1ac7cbbeb387u128).deterministic_k(U256::new(0x803022ad0786d6e523f0b110168c865eu128, 0x1ac0a1c28d186a6711afc6f59ca61ebau128)), U256::new(0x19e0786f6075a07002ca5447bbd3cbau128, 0x17e6f26e7e4fb00b300c20f1090ab238u128));
        assert_eq!(U256::new(0xee8c97c1c35258343b90265c79a215e4u128, 0x53fbae78db375dd0a3e66660ac75c73au128).deterministic_k(U256::new(0xaf2cb29ad866a07567ceb5213d60799cu128, 0x2b483d01b3f2d38c37a4ab1a97a2976cu128)), U256::new(0xb5b22058eeaddfa7a24701883455ff37u128, 0xd4aa4bf961b1f2354c4c6eebdeea108u128));
        assert_eq!(U256::new(0x185572089a2afffa5883f3e7d85b5019u128, 0xf01e72fbc82b882f93852f824f8ae23cu128).deterministic_k(U256::new(0x47c1a311becfb402d0d29e1d1e8f04eeu128, 0x2098713438c6e85820880e78a36a1757u128)), U256::new(0x89c2766ce71482d63cda5bcbcc72238au128, 0xe460360a17ab97c5fec8c629c6ba9a35u128));
        assert_eq!(U256::new(0x7d87b6f4ac16cecb9757f75c456dd88bu128, 0x3d3af28b868d2e896149e5326da27a4bu128).deterministic_k(U256::new(0x585abd1a5e89b1dd5a9e33de23a87389u128, 0xcb37a2f59b4896505a24628600d75d2fu128)), U256::new(0xe1856de53f2ee2dec74972b57bfdad61u128, 0x1407e6e692e8c72438b3c3f5a1cb18f3u128));
        assert_eq!(U256::new(0x358b210ffb1753125ef266aa46913d21u128, 0x85b833c8c3fe501d31c9d8d511d3a6e5u128).deterministic_k(U256::new(0x57354ca28f39fd9182ff4287228455eeu128, 0x70bd555c1a962df69446f87d4941b324u128)), U256::new(0x5d8328a1b4f2cbbe7da28d75afa93430u128, 0x8086feb4194b8c3eb846e993aa106633u128));
        assert_eq!(U256::new(0xb579fb93149d13217e78c68a354a0aaeu128, 0x611d54ced67f553e3b1bd70447efa236u128).deterministic_k(U256::new(0xd891576b157466df2cdd3cea8e5493edu128, 0x4b5754859766152428b68b31f6fef477u128)), U256::new(0xaf9a7503eb63d79a2482c3fc46788e21u128, 0xa1794c99aea5bcf938b3d811939f3b6bu128));
        assert_eq!(U256::new(0x81dc6df3caf4a40f5e971b2055f4a62fu128, 0x642d7d592b12dfa1a635034208ce38f4u128).deterministic_k(U256::new(0x2ae726f5813cc3d530f580fc009134d5u128, 0x71ed158da183b247ff7a4edec82aea71u128)), U256::new(0xc66b62dab89afd069f67bde65aae3145u128, 0x188769213e53002f438f3510c10e7b91u128));
        assert_eq!(U256::new(0x3cc30814fd2935f00a5b7f6e5af4bde5u128, 0xbf9648482ba69ad7ec56fec1a6d29137u128).deterministic_k(U256::new(0x3d8b71442d8ca2a2f39740325aee3d27u128, 0x110a9b0658c27d3c1751ee81000eb7c4u128)), U256::new(0x2f169d86ddc0c9f66f1a2dd62a3d1b0fu128, 0xd641145c501f78230131e3e46face41eu128));
        assert_eq!(U256::new(0x9548f54ffa7de58142d83c011a07dc10u128, 0xf2a9140b16259d1c7f3a962420f9e3e2u128).deterministic_k(U256::new(0x7c2a0466a952a39dc0cc7fc3d1a1e32eu128, 0x306846604c1ebd8ea75077d3b7855546u128)), U256::new(0x2e12fc7a500585f53b66a292cc3c9c7u128, 0x631a7cc4f47912d4195e5a833f1b2542u128));
        assert_eq!(U256::new(0x25d3c94dbc1f782a681d2eb0a59d7374u128, 0x75de94d805d0194f28a9c51fff70d51au128).deterministic_k(U256::new(0x2acd16ac25493ce9b3173f07414bab17u128, 0x3540ced5736bfa83b118beeebdb011d2u128)), U256::new(0x8a4a091069b042cf074721514c948d57u128, 0x89c852f86f67b6dca2ddca60368a2aa8u128));
        assert_eq!(U256::new(0x85f95f061a7f2ffccbf73580062f8d0au128, 0xc59e33b98342a245d05270584f7a5a51u128).deterministic_k(U256::new(0x6bfaf1aa75518b9623b0f69a599c437bu128, 0xeb7f9c01c3ec063ca2206565743daa7au128)), U256::new(0x4323b831c898757362d4bad73c2a67abu128, 0x619182cb3d11e50de3b7f2d58497ec00u128));
        assert_eq!(U256::new(0x34a57f80d2e23dccee51ea3eeb749c87u128, 0x9cb1e62f50d03fa5175b8a11e75b46fau128).deterministic_k(U256::new(0xad6924e0a074b7d5c137fbb8e6e73f87u128, 0xfb22a344c468c316c286b57b2e5b4a5fu128)), U256::new(0x3711666ab6b7b734ade81cca1dee5042u128, 0x39b3d4b8557f7bdcfce5e38f162c3371u128));
        assert_eq!(U256::new(0x11d2e9e85ab42e6c20d2f0a16c2f7023u128, 0xf9cae161948cbe3002bf702d3dcbfd0eu128).deterministic_k(U256::new(0xfec3d147a14ad58fff1484964c58bcccu128, 0x2f97e7ada78bf828f0cc34526c0b45d3u128)), U256::new(0x6efd373150e65fbd8274f9db2046281u128, 0x90fc30f5573a1dc34b292e1cee9c4948u128));
        assert_eq!(U256::new(0xfb3c2ab886ae1bd39fd6880ebf654a41u128, 0x82b1dc3fe6271af6dfabf65587544343u128).deterministic_k(U256::new(0x171250997df2b2262dd6cc9959f22f44u128, 0xf8b9bf620d13cdb1a4f68d8d9c355c20u128)), U256::new(0x7b3aaffb9d3373fb531d3a5c774a59cdu128, 0x5fe5a207ac640e33788a506cf8f43cceu128));
        assert_eq!(U256::new(0xef3d245adae053f56d5d0590a6dfc676u128, 0x96988ddf89defb57983acf0fdcb4d164u128).deterministic_k(U256::new(0xd38ed6b65d38686e7df95b169da3acbdu128, 0xf7fcd01d7619c93e1f88bf86ec828271u128)), U256::new(0xb5dd8e2f53e1bcf313579a84c9b13bb3u128, 0x4eab68de8b685234f13275f9a9fdf919u128));
        assert_eq!(U256::new(0x2580e8b5a7d53668d9d8282bd44f5919u128, 0x36439a61aea6257aaa46a5d8b2a32947u128).deterministic_k(U256::new(0xa68b287afc1b2478018599b778804424u128, 0x73e7f48d4f8769c1fa810d1cc152e2aau128)), U256::new(0x2f5b8335ced43887aff2323030d82527u128, 0xd72f127c1d61b95e1f30408a470645c5u128));
        assert_eq!(U256::new(0x83f91c8f686850bcff83e1328e1fcbcbu128, 0x33b9e05b063333f377cd15480f740637u128).deterministic_k(U256::new(0xbf617f28b3cd605f1d7ad76564287fc0u128, 0x48d11479ad2338eea39f64de69d565b2u128)), U256::new(0xe95c4625afe0458808eaddd131ec9257u128, 0x8c2f238b8239580869a57d74ab11d89cu128));
        assert_eq!(U256::new(0x205ae9e61f10908cd898173a0cd0fd0au128, 0x1d1ca7c9a099afa91789f294c446bf57u128).deterministic_k(U256::new(0x533f507c397c8c9b4eb610dd9d8e18du128, 0x8e5488d5b299724c1f252c5975e0af7eu128)), U256::new(0xd9d1c39f7142783f40a8ddf3a48c0d45u128, 0xf5f728c0c7a5de655c21d00c6212b928u128));
        assert_eq!(U256::new(0xbe72d252722347d0097d490eb05fba01u128, 0x6697513c457bbb4b4d52a570a0a57032u128).deterministic_k(U256::new(0x588a4c5aca4bd4b6dd78da24df91eb70u128, 0xd47766d0b88c51afd16572f9c34606feu128)), U256::new(0x585b675d2fc9ddc934af6761e9c6cbe3u128, 0xd2627e089733d75699009647b7d4edc9u128));
        assert_eq!(U256::new(0x40a467a0f8eacab693b9daebec7169b7u128, 0x64a312d06792f83427fdf75a4aa9f48au128).deterministic_k(U256::new(0x3d30453bfdcf3039d0513fd7745f2284u128, 0xb36149b22392209faf73770f17eda551u128)), U256::new(0x57599b3d008f9db4b3c5d61f398be255u128, 0x57011e7b1460dc57b546e6c56007ffa8u128));
        assert_eq!(U256::new(0x1795eb8687dbefab9bef96dfa6c6bd51u128, 0xd2516b8b05f92a5dd7dfea9876f3cc33u128).deterministic_k(U256::new(0x9610ad04f32b5f73b934fa02fceed08cu128, 0x4468f49b477404704618101e31aeb40fu128)), U256::new(0x7daabf1bbf22f7a0901fa263d68daf80u128, 0x8c34b88d3f181df13ec2d9260902b5c2u128));
        assert_eq!(U256::new(0xf6bfb97bf56a14b8f8c7009e1fa3bc3bu128, 0x735aaa26ea041395789dab095a668858u128).deterministic_k(U256::new(0xe6de4d45878d521a564c5971897877c7u128, 0x93ae7a0eaa7776234b22882d1b30856du128)), U256::new(0xd82b24b757b9662795958bc99d818b79u128, 0xa67e50d65a6bac37963d419613af0bf0u128));
        assert_eq!(U256::new(0x7e52806f292f9444a55c662023cad66fu128, 0xfff9575ea95984e9b910e02463639821u128).deterministic_k(U256::new(0xd9c8ecf5683ce9c635a0b6dd61ebfc8fu128, 0xaff6ad1d8d79ec81b138f0a0361f1613u128)), U256::new(0xa9aeb6fdb3ef79adbc615896549b3586u128, 0x78dfd776db2745a21e257352a92c7627u128));
        assert_eq!(U256::new(0x93191e796cbaa2ee701c4746bab358d3u128, 0x68b05c476d3cb738acadf6da02d38bdu128).deterministic_k(U256::new(0x822d4b6377610dae5362c6ded5479143u128, 0x5ccae55399ffd566c0a8959508a6698du128)), U256::new(0x7f2a1becd3179210b8fd46d24a9ccb8eu128, 0x9a1081bd4c16fa35cead6254a21d433fu128));
        assert_eq!(U256::new(0x56163f5be5cd37208d5bca48bca33160u128, 0x37328366a2db13c371e48378c470a6cdu128).deterministic_k(U256::new(0x256884110b2f44f035b5865fcae4443cu128, 0x16638ad63ac7b24aa9111d12216e6f71u128)), U256::new(0x60c3eb0c1ebf0928418de9388a5c48e2u128, 0xf69f729ce8c97d43bf69f730ec815090u128));
        assert_eq!(U256::new(0x6ba6cbae5b256690cf19d112cd3aa353u128, 0xbf91e432ee480b42ef982c54baf33472u128).deterministic_k(U256::new(0x4f907be1c82d2e14bd94172d4e4f5317u128, 0x58ac9cc6361dc9dd7897b49731fdb76au128)), U256::new(0x2c20435bc3597cfba627739126c7038au128, 0x3dd6b229508b74d48dc847b48561bbb4u128));
        assert_eq!(U256::new(0x641b4b4e390f6f907b2b786317dc51d0u128, 0x86e851df3ad4f44112284d1731608609u128).deterministic_k(U256::new(0x77ebc336937d4edad6375eb9dce66e96u128, 0x71d3f9986f227ed089d05be28d81c037u128)), U256::new(0x8ef99012874a5e5b074e7862f7403fd5u128, 0x77a326f6ce63c8870b22421141b357adu128));
        assert_eq!(U256::new(0xbccd44f119851d9560e9e9b2874fb8ecu128, 0x9432dea2485b18e1e931211d4fb97e0eu128).deterministic_k(U256::new(0x23684b9ac1940be2b112c9a669ca15a5u128, 0xf26c087add058355cf91b4f323d0bcddu128)), U256::new(0x952a989dd8e0832d7371a867fd5cf14eu128, 0xd5533f9796d602aa837e4aa895eac512u128));
        assert_eq!(U256::new(0x9aacfc8fa40618bdea8a065fc91048f4u128, 0xd07cb27c891cb65caff3edde75cd935fu128).deterministic_k(U256::new(0x7ef7c7d92020f43167d0a0ae29a834d3u128, 0x6f3c0f05a2830f1f17d9e09efb65a390u128)), U256::new(0xf3a9a3230267b6f4e94d1949e13d547fu128, 0x25303806af2c22778909451e7c5c8effu128));
        assert_eq!(U256::new(0x9cd7003beb2aa03840b625ed83803bbdu128, 0xbba92b78e198764022e2f01b9fb7cfc8u128).deterministic_k(U256::new(0x1cdfe51a85dd6682409cb7ed6946fa66u128, 0x320f05ea8584afdfab0826cce996f7eeu128)), U256::new(0x893abc6a1e29e96401d8f12d0c66f5d8u128, 0x33253359973abf5b9c236f8508cb56f1u128));
        assert_eq!(U256::new(0xae4c5340cbf51624783b820a89b4d921u128, 0x8e3406ff96b12f1db9952c5095e2b069u128).deterministic_k(U256::new(0x1131b7fff3e46f86c0aede35bc12c36cu128, 0xb7a266c476dee2efdcadeb0c4df5b6acu128)), U256::new(0x3c8753eb48c9d08113ff23a65ecef5d2u128, 0xc770ded3996cfc058017278ecf31e27fu128));
        assert_eq!(U256::new(0x5f2dfcbf7764497fca8250cac2f0a989u128, 0x5552db8d1c42f4f79ddfc9e7c15ab8dcu128).deterministic_k(U256::new(0xe5e26c14857132f99eeaf101db27d39fu128, 0x72708b86c277508153c1e5a6f204c3e9u128)), U256::new(0x29031bb0de12bbc944c2573e22793d80u128, 0x3ce21763da9005146e8fc04b07e292d9u128));
        assert_eq!(U256::new(0x315830c5f7ae191a3f8e5f231b1d4f20u128, 0x9d26d7952725f68e2c4052f652cfe316u128).deterministic_k(U256::new(0xd251eb364d9700b6a887fd4afbb8b9a7u128, 0x731b49effe78fe1f8563a75e61947c36u128)), U256::new(0x72ac8d10ab9a75a8df8ebc12f6be3cacu128, 0x48ec51d3b480ea0f23614a0ca1a324bu128));
        assert_eq!(U256::new(0x2cebbae64f1c663c9b69aa59e7a86f74u128, 0xdb11589008541d3741017f5cd97c85bcu128).deterministic_k(U256::new(0xa6e29fffd931a37d15d102406b0dcc9bu128, 0x61f293ee2b8a4e54dcc9097da2e003c9u128)), U256::new(0x1e0ce8f8b5c537874f969310a7cc0197u128, 0x66a0c2e3017237d6b24fc0147e0f8123u128));
        assert_eq!(U256::new(0x81f86133c595e5e320968e4fcfffc75au128, 0xd5075e79771315922f27474f0c305483u128).deterministic_k(U256::new(0x33f13a4a7c50d404e2c87936372fa209u128, 0x12d5464d2b043e0c7b740941a71fe3f1u128)), U256::new(0xeb48efa241f57698d595d723c4e05100u128, 0x9257c97824d9cfee0b75453742d4834du128));
        assert_eq!(U256::new(0xe7a7078f3d36dc88da986890ff837c4u128, 0xef6d8494fdb20dfd8680903df8028546u128).deterministic_k(U256::new(0xdf03506b614bf45eb999ad61560e6e8du128, 0xd972e8fe262b12559ecf657cea8db298u128)), U256::new(0xc2ad3bd661ee6b450d8a6f7fe564167cu128, 0xed43cd21680d1e8d9b56fe6fad59ff8du128));
        assert_eq!(U256::new(0xb184116844087d5d9948b9428b95557u128, 0x8dec5f0231b655a7cad5face1c024994u128).deterministic_k(U256::new(0x9e9f647ebff1e9983f3c6eddfdddc9d1u128, 0x4ffd1231bda996b1af9bcd061c01e6efu128)), U256::new(0x7ace292d73d5888e8036f187d6ccde17u128, 0xe7d7f07b60d58b2a4c550e6c53d4b8b3u128));
        assert_eq!(U256::new(0x37b76f33e80a765e568070d99c53daaau128, 0x11b1b66639915592d25799eace7b03e9u128).deterministic_k(U256::new(0xefaab4682f25adcc19a2e7748cd7f5aau128, 0x47b633e7a5f3b4287868f715b0a3fd0au128)), U256::new(0x1b7797542c2610d1386beb7e6034b89au128, 0x7925f1dfff64a0cd9b62cd0ef46fe901u128));
        assert_eq!(U256::new(0x8c1ad4b10d372b72f19f406b8b80d903u128, 0x23baf535578eb4e841f1a78cd3f6be6eu128).deterministic_k(U256::new(0xdf3b6484f2157399e989321b464b59b5u128, 0x9e6559f44caeece2a42ea442ef093f13u128)), U256::new(0xc6cf69c246280671c3e8737b8b64b137u128, 0x407e4dfb037bfe44025ce8086d3a4f59u128));
        assert_eq!(U256::new(0xce7e51c88abb0fe1000c90250ad2d35eu128, 0x6d9fbecaeef36a4e49d3895b2e75c9b0u128).deterministic_k(U256::new(0x35f49865f6c2a6277e1999e3c6b78ce1u128, 0x22372c4e4b29d847e9da7fdec5a9f701u128)), U256::new(0x248aa908de43e401b2c0be5d00d439d7u128, 0xddc1ce1f77fbbd22402e512abf045ad7u128));
        assert_eq!(U256::new(0xc69551e26a9a9965832dbe8e8b3f408eu128, 0xac5eeaf4debdc17dc6f329243351b10au128).deterministic_k(U256::new(0x9a2083e5b50fe3f8a63785476aeebb51u128, 0x1b01afe616760c1118add45bff7f1fcu128)), U256::new(0xadfcf69cec58962bf564e92409bcadc4u128, 0x7ab6624f6d94dce84f80effee0d8fc50u128));
        assert_eq!(U256::new(0x646f3f1ce5136a7543461028d6709bd8u128, 0x756a38e782f31b89635c69a92351b7c9u128).deterministic_k(U256::new(0x9e4d67e076187bc6eafd2a163758f1acu128, 0x902ef94f8ae3b75a7d15ae6542c8886u128)), U256::new(0xfe2c13b538cdbe6737d8ccb43adefd4au128, 0xe3b0c231e6c9634615dfac79db21c8cfu128));
        assert_eq!(U256::new(0x8deb36816dfd89eeeed3474fe4cc84f4u128, 0x6143b50e0ef7b699f43afe9e86ddb98au128).deterministic_k(U256::new(0xdf10ab29f65a3d31f66f8e85ef231940u128, 0x299e6f2cee1a9104d6e610962b35262u128)), U256::new(0x1e6aa7d5e83a6086cf29028851516848u128, 0x53224d582c75873565c85ea1dfb7078bu128));
        assert_eq!(U256::new(0x84e4b21ddfe79746f795a6e2a2687e1u128, 0x2a74bcde7145cf3e67fd379553998affu128).deterministic_k(U256::new(0x6c01c97f0be64758d77f3debc79bd3a7u128, 0x5f10c7e9117da45e721ccd5682c0f9aeu128)), U256::new(0x793fd1770bed3f667d0fc4d0585fa731u128, 0x54766b26bf1fb126a104a7e50c8e8661u128));
        assert_eq!(U256::new(0xe8849fd0a42ca9929a174e4081c3dff7u128, 0x95691f29967ab16e3a62c485fce7d968u128).deterministic_k(U256::new(0xea0455fd7f9a7eeb206d4e564c6f5b7au128, 0x17d06f13e71cc8040e95ce032f813edau128)), U256::new(0xe676ddad153fa991353aee3fecdab37au128, 0xdf854a2045b0ed4b1f7e3b8d565ce140u128));
        assert_eq!(U256::new(0x7a46856d532bb8e1d8383d8d36eacd6cu128, 0x1ab87b1dff9a9f20c035f9427075b5f4u128).deterministic_k(U256::new(0x8524df9805dfd889327bec8f08f7ed82u128, 0x57d00b94aa1ece826d702c82307502e0u128)), U256::new(0xc3a164b693b26d562f3c475a17362b75u128, 0xee8dacc2130eb87a4d57b99595d79ca5u128));
        assert_eq!(U256::new(0x4ed4862024686140b0cbd702f966f921u128, 0x72ac00994bdc036c7966a4bc5e137e00u128).deterministic_k(U256::new(0xcafaf48d760727462d569bb549ae44f6u128, 0x2f8f975996a94605c3ddbd6f95cf7cb2u128)), U256::new(0x7c91d779c45d116049435520478d0cd5u128, 0xa1d6be66a66e7668c4c56d5a10faeedbu128));
        assert_eq!(U256::new(0x6c643c898c633e2168f798c681eee319u128, 0x6c2c1dc52ad2de6051e24994b3c3142eu128).deterministic_k(U256::new(0xe7f64c67c3012a926088064a1308b64bu128, 0xf598f0df68f0596addff6d1873022c0au128)), U256::new(0xd8d4d925cbdf4ddde22c3f275cec3b71u128, 0xd4df1ac5d50fe76935c6789a24f10d7u128));
    }
    
    #[test]
    fn u256_sign() {
        assert_eq!(U256::new(0x85fe9664cdfb27264efd2450c1dd9a8du128, 0x8bc6b7f666d9941515ad6367401548d4u128).sign(U256::new(0x27996e34954f08e92178c39c4d53e364u128, 0x6f3d7b382bd3d6659eb8d9121b8d5a6au128)), (U256::new(0xe65bc024f039d11601eace7c926dc89bu128, 0x29826c7c5cac310ed825c0043c9bf0abu128), U256::new(0x6d96fa1dae4c9a461e12072c23e0583du128, 0x4ccc1b4a662e8c351451202b20949f2fu128)));
        assert_eq!(U256::new(0xb05065b06e13ef026dcc2423115b5b5au128, 0x20f8c738c20dba8a739082f5cfdb62fcu128).sign(U256::new(0x1f089774324d61ab33b96d7c0750ec69u128, 0xcd6e00d5aafad3dee27b14c824a25ae5u128)), (U256::new(0xc06948d726b70bd79975b4c447f4855cu128, 0xfa2c3e77b538f9e260779634121bbb87u128), U256::new(0x5bbefeed29b14e8d8aa73c4feb4bd25fu128, 0xa7f62d0f55d8ae2c1a769ae7793aa695u128)));
        assert_eq!(U256::new(0x7a3a5545b4b032ed012ee62bf075cda4u128, 0x2af7bc1d08e23b53a416d41667750fb4u128).sign(U256::new(0xef5434ae265a2025a51dcde8f6b37141u128, 0x8c3c6ce11650219157fc5e30e00719e1u128)), (U256::new(0x7a11af6c839ee93b7a9153b38e4c516bu128, 0xbf720788464bdc797de4bfd632bc1525u128), U256::new(0x432adc7e923983bc79c8e53016ad4f81u128, 0xaa0174fff1f6a21de39008dce074bb80u128)));
        assert_eq!(U256::new(0x646733a1b1eab16d1c23e0214d60743du128, 0x2bf34f973bc16915bddbba6bd5a1d802u128).sign(U256::new(0xe2edaa873588e10c4c511a8e2bd0a1e9u128, 0x3209eae8dcea8246d642b4dd897c42ceu128)), (U256::new(0x316b247bd35d3fec65cf2f07b299c763u128, 0xbd39328771979d3f867a00c5d172d5bbu128), U256::new(0x25542036c8f27ba99efbb66bc87c48c9u128, 0x2c220682477c47d50c35270d08c5eb85u128)));
        assert_eq!(U256::new(0x7e1447114a957afb360b70283eec284eu128, 0x2d592faff73fc50bac2406b5f7e2e07fu128).sign(U256::new(0xe06242ce888241da1aa2f9bb980e4345u128, 0x707f3517f346e8ab7183dd1cbd8595a0u128)), (U256::new(0x39d8f03850e5f1b71a065eaf2bc64256u128, 0xd83e96c793cc319e168baa5b53a4c924u128), U256::new(0xffde23b7a327fa3b489cb169a81d448u128, 0x1dad5b52067705a25c4faad147d9f90eu128)));
        assert_eq!(U256::new(0x3df60b283e40f1d62ef232187690427u128, 0x2a840adc5fecfd9f51a6d41dc75760fbu128).sign(U256::new(0x703178e9dd749749449c806b2cdb7d68u128, 0xbe466d8152067bd0f8531bc691b8640u128)), (U256::new(0x57e439ead452c40c8be797f75e62ee39u128, 0xc0d8bc99c7fc76e01dc8402159722aa4u128), U256::new(0x6896eab2f7ffc7af0343209d6e979aedu128, 0x696c411b5b0b8f771574562215d061fau128)));
        assert_eq!(U256::new(0xfd303d53779e79cdb677c9eb0465a338u128, 0x13c126049390b60d3264efc3b26ed192u128).sign(U256::new(0x9c18b90b402f6a0c9e5369a4e509853bu128, 0x6948c4b9b81e485c0717041642abc997u128)), (U256::new(0xd5bb7206d5bc5c9f0a62397628a37bd1u128, 0x2b83382c02b4b92776ac89b6fa5cc65fu128), U256::new(0x7886d906c4c1206888ec12daff57762fu128, 0xa724de76ec7802d2a5671455f3b9ff31u128)));
        assert_eq!(U256::new(0x7af5a7528597351a4a12dcac3e5af295u128, 0x59bba3d34eb3218078bdaa946b6c133u128).sign(U256::new(0xaa3af87d47a2585e5cda3d5758507247u128, 0xadc9e51a84fd2b376026dfc7c2dd7423u128)), (U256::new(0xbb4b84bfd9b6ff45961ac4935b0089d3u128, 0x60a95f020444bc3aafa4c20bf7012c0bu128), U256::new(0x40aacfdd568861232c96cca27862bac2u128, 0x3bb1b2ce33e318c926dad8cecfbd99aeu128)));
        assert_eq!(U256::new(0x6632d890e67e1ebbdc903637aca20661u128, 0xbb6307ae305b30b2de3f0da70a1ab99fu128).sign(U256::new(0x154358d6512507cf8c3f5d653dd99c40u128, 0xc4cdcd74b66f1e49dc500597d14feab5u128)), (U256::new(0xf63d3862a2a14224ad51b4f95e51ba7cu128, 0x4d841f74a03e494c7d11fe923f1cda7fu128), U256::new(0x48cc845fb8d617a40342f0e6c92555c0u128, 0x32db0231fb4430e16e0bd6fb1108628du128)));
        assert_eq!(U256::new(0x662a128b3426d52932a24bda7df0b19du128, 0x171d0432bef98d4df3fba20c1a515143u128).sign(U256::new(0x49339ad66d37cd3e9e405a2266ec1368u128, 0x24ea064c845469b93acbe9cb36be46deu128)), (U256::new(0x458cdfcc8af0e0f2b0c56896feb54a16u128, 0xc3ff7d96a4c5a79060693deb0b3f3cb6u128), U256::new(0x178f4b3d0bcd232c79e8544929bc588bu128, 0x8bd85951d1642e0d9cde92b3990d5feu128)));
        assert_eq!(U256::new(0x9bd074702e37e0c375a16e0b39b66fb9u128, 0xced3e01f9956a5e5f2695db4a3ed4ddu128).sign(U256::new(0x6db90fc91ed798dda5e93b147c2ab24fu128, 0xebf8fee58133a4b910e1cc36d5c78bc7u128)), (U256::new(0x37b0c22f616584c7aca9243b5ec68ea0u128, 0x8fa7c6db65f962014df276580bb985b0u128), U256::new(0x33321a309700a6e3401909ca3299760u128, 0xd31ac07a1273d0b363c0a56de9be862fu128)));
        assert_eq!(U256::new(0x3e18a88c410c96891ae325a31c0217bu128, 0xa73a1421b223a9db3d75492aefb2f902u128).sign(U256::new(0x3befcef1b69ce4b0c219b50cf5697928u128, 0xaed2e07de2902c9debf197bce3736d12u128)), (U256::new(0x9e5d1eeb74037681b604d1eb47d55ab0u128, 0x3a3827102485613e7283d5e94c8f9550u128), U256::new(0xfde8cd8be6d32b16d1a8ba85bf8364fu128, 0xa53b507cc09678717816877599c73034u128)));
        assert_eq!(U256::new(0x7fb7edd7c551d532b1cc95d398fe7ca7u128, 0xc8cd51a4daa58580eaf7e21b3134a5d4u128).sign(U256::new(0xe69b024230bf10078755e9580fb05bc9u128, 0xe46c9f35c0e87bbcee2b0b5d6edcf6a4u128)), (U256::new(0x4bd3f41e412ae99723bdc46fe052a858u128, 0x2d6a677f27dde2455a9a2673f587f2ddu128), U256::new(0x4eee851c8ff1eceba5bdef517ca03ba8u128, 0x949b387a79d0015537f1b0936613ac14u128)));
        assert_eq!(U256::new(0x7bc791253816c82375e58d19dd21c118u128, 0x4b22298f00c5a4582e1b04a65e8277a1u128).sign(U256::new(0x308e249d49cd6b1db24c1af98a5f97b9u128, 0x8c45d68a0e804b33a21e30e2672e4aabu128)), (U256::new(0xcf6a3a7bbe98078a11d16e9a55ba226cu128, 0x88fecf06e6f2d6126cfa743391f584e6u128), U256::new(0x13d077339655a846bef0b13a9b4dfb1fu128, 0x1e5fb166ab9c9a7769c55242ac36f60au128)));
        assert_eq!(U256::new(0x85215559f3eca5623d26fa59448b5690u128, 0xb1b190801e95f1162229f34b7c06dcaau128).sign(U256::new(0x6d96ff54f25d599039ad39af1041249du128, 0x1f2081274d080d3abedd4bc9222f03cu128)), (U256::new(0xd17b6226894d7fa62bb76a7a455ba7b2u128, 0xa8c48829f90f8ee0d0dd7663ac242685u128), U256::new(0x542749aecf5f6a4482b697e5286466feu128, 0x3fa5bc3feca5172a10474123dfe2bb62u128)));
        assert_eq!(U256::new(0x5622354e290bed15bb053b368a7969dbu128, 0xb1ca98dc1464147a227e227f29e548ceu128).sign(U256::new(0x14d51b9817659dbf780700fab097be9bu128, 0xaf52ee29b524ce56339e9b0f50d2bd47u128)), (U256::new(0x7d11acdadb91f9619a4d1d68922bf127u128, 0x2dcb84adec924faa6e1b1df8475d3140u128), U256::new(0x4156bd662ab8d23bda5e89247404d24du128, 0xd9cacb3f8f06dd6592b6eb4870af51du128)));
        assert_eq!(U256::new(0xd14c330837e72c2d9bea45165788cd73u128, 0x498baeb6f341e958f564f8caa3e8c249u128).sign(U256::new(0x408389341427caa253952f4d58b27f3eu128, 0xc1993c4f2b5a1f98bdfe9a5ef6ea8971u128)), (U256::new(0x4c74bc675ce6551eeb3a2476b9197c53u128, 0x581a6634e879d83b7c6ed2e051125eu128), U256::new(0x7462daac302af2f1dab65ea782d550dbu128, 0xf64ccdafa436869980d88d5499ef5669u128)));
        assert_eq!(U256::new(0xb6cbfb53620a3842d615a07308681dedu128, 0x59ecfc5ad88146a1e3f194cf8c74fc81u128).sign(U256::new(0xff79fcd730a956b1ac608204512ea886u128, 0x5f64d6e9e74f7728819759e0a63a0338u128)), (U256::new(0xdf7e32130c766260e57a9f68afabed25u128, 0x17d7671ebe08b3acf1e9e5258e1ea04cu128), U256::new(0x3cb9c6d750a15a35d73d83196ac35a7bu128, 0x20a57f417d3aa0a0582e002a108ca2b3u128)));
        assert_eq!(U256::new(0xb3884da417df3d00f42b3f118d028a85u128, 0x5cad583342b57539df74e192f159720u128).sign(U256::new(0xaa75c95805b11ae2261edad89fc124e6u128, 0xe2b9bc444339a6b4d963052d264b703au128)), (U256::new(0x7490e80dd2ac59fde22149507b768a8du128, 0x18551bda3c4883f04a08d902868a79a9u128), U256::new(0x7af251ddf5b4e74af8c72588e4d6c3c6u128, 0xab60658896765baad3295cc6613d4d29u128)));
        assert_eq!(U256::new(0xf0b9d7c311419d692d718d01b9848643u128, 0x77525cae2b3bf116a07bf02d6eb0c2f8u128).sign(U256::new(0x20b72ac0b5723fb5d8ebc8c3d729d43eu128, 0xfbe3696c6c17b35cbf690961f47b300du128)), (U256::new(0xbccc92b829c90515f8d5246573669585u128, 0xbcbd50fa09036e3054c117e4779986beu128), U256::new(0x5ecc5fbe7c9a7f3fa1dbb2ce1d6f6dacu128, 0x3d20355194b4bc66cc035c716e3d14bau128)));
        assert_eq!(U256::new(0x55eb75e03a49bf3b58b01c9e2d716c21u128, 0xeb33aa2e56a5b4550c6b5b81232e1ef9u128).sign(U256::new(0xb2a2b2f1730d8626e05d7e59685a36d7u128, 0x589eb9463715dd7f4c93515d0fd6980eu128)), (U256::new(0x49987a006d9cbc78d481165bc1bfbfb4u128, 0xee5c04ebac40bd105c4e48c5865b9d7cu128), U256::new(0x62f4593359fba4f57d64f495a135dbe1u128, 0x4e9ebd716c5389bfae1fb329b51017dbu128)));
        assert_eq!(U256::new(0x98fbedced48c18a9359407d5065f1bc3u128, 0x66decb45fc5fb511fbf9f2eda03ae35eu128).sign(U256::new(0x59a74da142b8dd86736112316c871620u128, 0x67039fdbea41d1675bbbd07d0c86370cu128)), (U256::new(0x4505597f9a3b9ec5f05e324695075133u128, 0x3163cb6493c60c9e361ff8c37f469a55u128), U256::new(0x45124ffd4655b8344f12a0204c8914au128, 0xae1e699b65775856af325c3ee5d59bfu128)));
        assert_eq!(U256::new(0x7dc249994a1b4541611740d6681ced89u128, 0xc091a2d129b298b8ba85c6ed9259356eu128).sign(U256::new(0x28c1558e36d8d811a9a6082980ca4017u128, 0xfe11e78e811f1efca04bee513664e68eu128)), (U256::new(0x74fb605b53c91454c17840dcd316b132u128, 0xbd431b5a4630f86b3c174b28cfebfeb2u128), U256::new(0x153833f0094462c46492d918c5a2151eu128, 0x7b205c3b20907b6602e8a069d15c28f3u128)));
        assert_eq!(U256::new(0x608736ecdf09f158b7e2ab28d61b194bu128, 0xc1e7778bac7aaafc84a18d1ad3017fc9u128).sign(U256::new(0x2935755b5f956b1610002cad210c71feu128, 0xbaa817fea3ef203b56bb703c0ba90dcfu128)), (U256::new(0x90377551c389f42489273a7e8c11fe62u128, 0xb6cdf33fa1435a4c4da527d7d7570118u128), U256::new(0x1927962cd9fc28db409d22160d6b39b7u128, 0x920e69639b0b0b639fac7db09d2013b5u128)));
        assert_eq!(U256::new(0xd6a52dce60d0347dbe7f88f1ec1b03b6u128, 0x2a66de5476e3cc8d3214e9f4353a3a4eu128).sign(U256::new(0x6443464189ed4de700c930bb0280758fu128, 0xf0dd7dfae55c4a2755898c1d4e487d8du128)), (U256::new(0x3970c7c65fd4732678a40169da3f24ecu128, 0x8525b45d7a3597d3c4a08ce56fc10a28u128), U256::new(0x7c37730f53452e13f779ad49d6d57471u128, 0xf54e7e80178db7327c1294551b6fa3eeu128)));
        assert_eq!(U256::new(0x23c4bdc5914a3d74f2df4a78c1ed8b28u128, 0xb2f1bc8606848ecef98ef428fdf20fc6u128).sign(U256::new(0x5e19bccd9e410e8af45ffd39b7c42822u128, 0xcf2400c83fa4e817e1ac0f9a7b56612eu128)), (U256::new(0xbf9fd867b27111774c600ca11f00a486u128, 0x845228293f078c6b6310871c98cef369u128), U256::new(0x5561bb343f635f8c8743b2c50476c41fu128, 0xc5e2874de39c0fd5c811ca863150445du128)));
        assert_eq!(U256::new(0xf747d36b32e0b7fb6b6973fd3e1cb951u128, 0x80b4a238094cedce1626943e37708a82u128).sign(U256::new(0x2b3fad5991ced316b352036290484ceau128, 0x67ab852b9ec4664f011ec354e9e280dfu128)), (U256::new(0x6cd57ea2f53b810b0c79535374594d7bu128, 0xb15977fe199795cd5792c18de0855f2bu128), U256::new(0x128c8f7553fe72194ddacaab554ebfe3u128, 0x9aa5f62091d6a68d78e47ea4f1ccf557u128)));
        assert_eq!(U256::new(0xa40e5ba9344bc17be1772e11d8e9fe3bu128, 0x97cd8d41e71937c67b37dd1ae8d2f475u128).sign(U256::new(0x43251a49e3cecf405fab82f80e0c8242u128, 0x2adb391cd47648d30b67c2a8e7eb1738u128)), (U256::new(0xd2669a07dd2e9f3e7bd00e6d813a0a5fu128, 0x7e02c08c62c43db8ad0449f85446d071u128), U256::new(0xa5cf953cd414deab2fe21944926693bu128, 0x9183033ab71cb2f35fece6890824c660u128)));
        assert_eq!(U256::new(0x43a4951e7c361ae2b6309753b00124d6u128, 0xa6129331b7bd1657a493eb925d17a9a6u128).sign(U256::new(0x78f49e12223bcfa2750c8a39f888bd47u128, 0x6913d009eb53909a641beecf208d1583u128)), (U256::new(0x1edd2d2babd810e84606ab2e257df996u128, 0xd097fb0201662ef49d82861e83c4a522u128), U256::new(0x26a78d5d8ebab76387345d5638d64567u128, 0x1ba4ff10211c5bf60c49906ca34caf8fu128)));
        assert_eq!(U256::new(0xde8ed1a4b7e942583c76be7b6dde49c6u128, 0x72388f2e94d692c0eac0ebb090eb3cd8u128).sign(U256::new(0x1712ca8502476c9f622b8142b84d2025u128, 0xa705100d4837183d7ca77964ac9955d3u128)), (U256::new(0x3aef94bfdf6f499dab6d99ede558939fu128, 0x9bf56f1764c1e4d36bfbde1c9a203fc0u128), U256::new(0x1c1cb2799a40606b702311d72bd6591cu128, 0x7760ef36f66b5cbb45815a50c10ad7eu128)));
        assert_eq!(U256::new(0xbf2cf3dffc8adce6adc1ea8619f6c7f1u128, 0xef1f5abadb44050d90409654e309dbcfu128).sign(U256::new(0xc29b624b07ea54b0faf3ce422debd06eu128, 0x7c4cb30d278e11be8e6062c5edd614edu128)), (U256::new(0xeb0052e763949ddde72339bcb601ec5u128, 0xe5d88975ca9d30ecceea0e33302891f7u128), U256::new(0x7b05628b48ef5b78969d0fc07edbed87u128, 0x42c91b87d4c87b2080209ba2235267d7u128)));
        assert_eq!(U256::new(0xf0bac378d323e96b8fd27a8043d91e5fu128, 0xe91a439d2ac5a06a4ddfa74a5df0b37au128).sign(U256::new(0x682335fb6b226376658e943aebf8b2adu128, 0xddd4cb595c961cb8e97e5162e62236cau128)), (U256::new(0xa84ff3dad9f3eb0b33ab020455b8906du128, 0x3e76d3b62588cc5f661a321b26c32db2u128), U256::new(0x31f4594371d6d5c741e8ab02aafdcb96u128, 0x2c8a5b18918f1ae43649e9be3c449c49u128)));
        assert_eq!(U256::new(0xf954d378e75ca4436df598f0f827cb35u128, 0x28e0f7fdefe456a87b20ae26d4fbb61u128).sign(U256::new(0x7a81fad62db252af65f6405aae2966au128, 0x198878cbee2c24a7c2051439dd5619au128)), (U256::new(0xd1e5d930e1f41a5c2bd865b8f708e864u128, 0xb1f615b3df19838864a5f4610076bc5u128), U256::new(0x46eecac9d2eb7039b3f80998eeadee5eu128, 0xa8e0a2c97966839c430b377764373b0eu128)));
        assert_eq!(U256::new(0xc34c327ae87111f115fdf6e22ef6b988u128, 0x11a0c590c6e173f6c47ad97caeea4f0cu128).sign(U256::new(0x3885ab82f0c7a9d3233d4bb26b85ee81u128, 0xae99a370e7f20dd8950de6d633851355u128)), (U256::new(0xded094ef8bccdf537b5b39166422977au128, 0xcde5f21fab737bb72717f9a71dda4a72u128), U256::new(0x249a144631164054df5c4452349b1322u128, 0x9ab1326fd54f1827678746888ed443c9u128)));
        assert_eq!(U256::new(0x10efb4a7de248498ee8edaf7f68ba6f5u128, 0x786f44f346caf3153c2936f54c3c09d7u128).sign(U256::new(0xefabd5eb1ea132ed327d193e3e66a5fau128, 0x8b8894b747e0d06bb1809109961a6b4au128)), (U256::new(0x2203b459ba30bd6fcb436441a24e80adu128, 0x7d890b67b9571605961172f3b9d435c7u128), U256::new(0x55c253621bf01e2bf43e36b86414999eu128, 0xa8217c5a941d33877cf899cdc469a76du128)));
        assert_eq!(U256::new(0x280282b6b8cec6dd8eceebcd0775acdu128, 0xc4e1d3ca9ef776d0e098e1a1e0b0486du128).sign(U256::new(0xf218f4572dc8dc46fadd443b5e966153u128, 0x4da13bdbc3553f22d17d0ff6fc54c927u128)), (U256::new(0xd93ef26f58c53258fae9e4c9b26ae8f1u128, 0x7f1263134d2577ca968376896e5f407u128), U256::new(0x514e8dfdf84aaf4196f3d4359808577u128, 0xdf2ae6fab9ea3e9f0760ca037b733c53u128)));
        assert_eq!(U256::new(0x540dca3bb98fe15f0f3785d7b94eba0u128, 0x2d108a5c5e9455066267dfcde39f012u128).sign(U256::new(0x48a25d587e08b0df47657604d8c70022u128, 0x6508ab09aca491c8b7ee8683a0f8b44du128)), (U256::new(0xfd7d06e6680db7444f030d74c0f18beeu128, 0x310d1cddd0d6253adbed749c89efaf43u128), U256::new(0x371a425b0ff707b8b0a8ffece066f303u128, 0xc73112fecf6daaa1f637ad4704bf1cc3u128)));
        assert_eq!(U256::new(0x8fc7014738e54e7db6e99fc7112f4b18u128, 0xcd852dea59439021c005339ff020b6b9u128).sign(U256::new(0xf2b8577cac7075d56aa22526124d9adu128, 0xc1166507a3d809a0871007e789a5d35du128)), (U256::new(0x1a99b70948f36a8cb3aa191811e7831cu128, 0x3df5c2f26af2f5ce48689c29a238c7e8u128), U256::new(0x7ed6b44ff09bae76263da44986a20e39u128, 0xf59b9e8cc218531fd7747428741e3b2fu128)));
        assert_eq!(U256::new(0x1b8f8c50052365b0b93ad4d2b9f24492u128, 0xaad0f7bfec0f5ce53ba503cbd6aac83au128).sign(U256::new(0xf66cd2e88ff0e564dbc393eda2e53046u128, 0x45b8e2c1f0300922203c17dc8e52b57u128)), (U256::new(0x630df46aea3365c48100850aa24548afu128, 0xa82b415c43dcbc14be7930a9757b72ebu128), U256::new(0x323ae598c4467511d73caf57c9fd8461u128, 0x385482c2931d8346dc94302dcc027913u128)));
        assert_eq!(U256::new(0x11a16e615d0ec5e7a9ce1f35b35af841u128, 0x27a14e66a3543f00fb0cb925a5bd652u128).sign(U256::new(0x77b3a8b3e1178313f59282b72dd55071u128, 0xd529a097dbe9d923cd5d102e4f6f834eu128)), (U256::new(0x695638f4b29702acbfa4e8d5f4abcba0u128, 0xaeeb61f1fbb4c85a3d11728baf6d3c25u128), U256::new(0x55632f8c83a8c449df5b7f9b513355e1u128, 0xc1394728696415edfad362177862cc38u128)));
        assert_eq!(U256::new(0x2fc8f80717c53a16125bce6a767e2089u128, 0xa52dd26556f5e9c17babcacea9c4954fu128).sign(U256::new(0xd11b911934675ae49ef905f6382b83e8u128, 0x11ad06c3de16f1e4e8997083a7f64af2u128)), (U256::new(0x32db8ee96be9f2b7e5f1dd7558a268ccu128, 0x937ad1a2f83540036d6bd61f37af633bu128), U256::new(0x43e846b4132f7d657f1da54e8cc44cadu128, 0xf87cec63bffbb2b4b305e602acc1a037u128)));
        assert_eq!(U256::new(0x4ac346d60934b0c1778d6c0367502d07u128, 0x97633b2e329328a99391490a91610d09u128).sign(U256::new(0xc889dcb636dccee29c865588ecb93c03u128, 0x85344c3c7b90a60f570d64c3e63bf2dbu128)), (U256::new(0x3493f0081c408ae524d172dba0c9d68au128, 0xf1077057a35ab216d29116aa93142d59u128), U256::new(0x3594a2666686c6989c6f213d17e196c0u128, 0xe1006cdf1d3fc1a857331c9b7a98daabu128)));
        assert_eq!(U256::new(0x5c77635e2b598c469fc8e3714f7b4f77u128, 0xa3514c738fca07655de840225f26ccc9u128).sign(U256::new(0x80d57972839c22392243b1d7554ffbddu128, 0xef8c57b7df62bdcfc9666b19af990959u128)), (U256::new(0xd4245b0b15fe39fbe575a2962ac206e3u128, 0x348c1773455f0a0d081f1f70e9c67d6au128), U256::new(0x5f52b6f64ebcfdf2c9e636ce88dccd17u128, 0x543e563c49ea32f7e9b24bfa84a7401eu128)));
        assert_eq!(U256::new(0xb742ad3445e5d77049c4fc30122d37a0u128, 0x70871d4bb0e0ed3146a30fb95d8c99e6u128).sign(U256::new(0xa5ab81930a454bd30e0128ec4df3532au128, 0x6bf481ee750c3f88dd4dc9d28c347bfdu128)), (U256::new(0x9e9e6470724325637ed84c71f5b78cc3u128, 0x21a815c1a1a04148e430f42dae6d69f5u128), U256::new(0x552ad0d9405c9ed511dabd7478cf168u128, 0x120f800f50fa1ed3bf9b83919ec163ceu128)));
        assert_eq!(U256::new(0x39211c9198f59285132e8197d65ea720u128, 0x6274fdcb2ad913f396d4c0ebfec28785u128).sign(U256::new(0x943793df445bb4e3d7f227a26ab94f3du128, 0xfcf78c08efbdd40a9d67424cf2e56fc3u128)), (U256::new(0x98d589560a71dc8b3567f7870818bae7u128, 0x34cf3c69f9cf405feaa4744e76ea5113u128), U256::new(0x2381a3a46d372d395ccc997a3a79e802u128, 0xbbb7bb51495d9e0288bc987e0e4b5099u128)));
        assert_eq!(U256::new(0x684b7ab7f06229fa67fe773f86af1b23u128, 0xc8f716e722ca7cb507d908fd797d1529u128).sign(U256::new(0x861e983d4e61d23005d52ea8711dbf54u128, 0xb1012dccbe340dd5fab5d14940dae328u128)), (U256::new(0x6ff33849d50b8a4c5d1bddd6b1023ef7u128, 0xbdbbc5420e6dbdb6a86cfe247bdbdde9u128), U256::new(0x614f074afdb06566011ff58ac9c0442du128, 0x16439da418a65728eeefa54db10245cau128)));
        assert_eq!(U256::new(0xdb64f4d8ded5f719a9621fc7c6acd5f9u128, 0xf038ba42748d16a354351417a246c53u128).sign(U256::new(0xdf9ca48490a0b7a1a21fc836b935fc36u128, 0x52516dc9661e58eb69dec01054a9b385u128)), (U256::new(0x8190924f6cd3852d33f05aa2e9cd014eu128, 0x942ee5d47af4b609731873d89b2eb33au128), U256::new(0x2ff7d217cdc29d724d3427906ef9f2b2u128, 0xc2c7325236e302c1f59b83c5efd46f25u128)));
        assert_eq!(U256::new(0x9381831172c5d1c2c02968ee553ef507u128, 0x61eb203a6e6e3e4117065895f3d7ccd8u128).sign(U256::new(0x2ac69b71c0b72527e16bb9c1dc4d37c6u128, 0xd5d8b1c6ca7badeeaf984ed72fbf7fb6u128)), (U256::new(0xebe217b41629cd584feaaab7b20f222au128, 0x20bb236856d5ead1ee3c64f6c406f0a3u128), U256::new(0x712732057b26757cf18876969ecab36cu128, 0xf4ce49a100c9f8f41e73a400dde40b36u128)));
        assert_eq!(U256::new(0x6c3469f33d07b8eb5222c223115b1838u128, 0x9cb990bef644817552ca745e5a5dc793u128).sign(U256::new(0xc5927226e798d14eba1c0fb1a5c7df27u128, 0xa5f71ac91ea98f02781c590410efda5eu128)), (U256::new(0xaf683a589bb0c0bc7b903b3e8799843fu128, 0xf0f0999fe761860916233c5a6d86f8acu128), U256::new(0x2bc41426b93d56514615d0f38dafe4c8u128, 0xb273244fb183c2a56dd7103c0e38faafu128)));
        assert_eq!(U256::new(0xb9ed67c55c3594ea53ab5be3cc02d586u128, 0xddf45061c7f38ee1c0ea23eb160d0617u128).sign(U256::new(0x1e9b97302f013dbe9fc3b6a4749accf3u128, 0xcd2e5656af3d6449b6b7648c1fd0a2f6u128)), (U256::new(0xe477d95493c54733fd51e1bac736deabu128, 0x71870a0c14cf65c3e7b04eba283baf17u128), U256::new(0x8d3a92bff1027af822e1f2e97988f28u128, 0x929ed904bf2a00faffa9ddee34c87ea1u128)));
        assert_eq!(U256::new(0x90c9e2598ce3036e494a922c4a1a7ec9u128, 0x67948573223c0ded0e7010e6838469dbu128).sign(U256::new(0xd150827f2800aea3152e891919248d06u128, 0xee09d4656de8f1ffa065d5a3fead2fbau128)), (U256::new(0x5084c11da77493e26d57db25ea92cc59u128, 0x796bf26fc2515afa4870ba5632f4d1aeu128), U256::new(0xa47181fda4efe2bf1436567d47e1e29u128, 0xa7dd5e862ceb1ee8413a0d56846cab41u128)));
        assert_eq!(U256::new(0x74a11f4d3cbe395a0e763f7d928b84eu128, 0x165b0188316845ba950cf6a97b30f0a1u128).sign(U256::new(0xabb8227f8eba0fbeb475774005205da7u128, 0x81dc8f8d2f9d0031d4e9d5392cc64be4u128)), (U256::new(0xa7e121324477e11ebe415485bbbe8fecu128, 0xaaa0d0934b8a8c530f3e80ed5d025b83u128), U256::new(0x765ea3bf65489b6f8234d588bc620cfbu128, 0x534eabf72443e33496f2157d725a491eu128)));
        assert_eq!(U256::new(0x2700b2976ec68e435c06dcd61a5a13bu128, 0x874354b8f82e3bdc57a2d6b5160841c1u128).sign(U256::new(0x1d2354ee87cae62ef3fdadf4e441cfa1u128, 0xc0813ef0f9a79200d0342d8d8563e883u128)), (U256::new(0x988747ab3d572e7fc67cd196e7eed491u128, 0xbfe969d7ca3a3263dd0096f373defe01u128), U256::new(0x1a62842c465bc6a21fd4ebda53f06fb6u128, 0xbe6ef1faaeb9846bece11519e721197eu128)));
        assert_eq!(U256::new(0xbecadd9d4bb89ee988a509cdc42fae39u128, 0xb1be62b25de9e97b5e920b979926a384u128).sign(U256::new(0x7038a8d51d87ecb11eac6135411062dau128, 0xe11d5c94c978799395b93bcc54902000u128)), (U256::new(0xb62924e5e38d4d7dc427fc742e438750u128, 0x269c5bfadbd8dbc98565543bb6f74689u128), U256::new(0x4d1e19087a81dfaabcf1fb368c25eea5u128, 0x113bce750c5560455c9e1a394ac327d3u128)));
        assert_eq!(U256::new(0xaff8c3f455f347bc22039c6c7678c6f5u128, 0xa965e6ad4c3fb0f37354fc92086f8da7u128).sign(U256::new(0x74b1a1b904285d7b83d5522152424772u128, 0xdf7b572e2c364577be678e910a30e030u128)), (U256::new(0x3e7702438cf043f5d797170efd5610f0u128, 0x2514349500b7aa57c5b85b53ccaa17fu128), U256::new(0x3d09d96d0ac85fbd8a4ce1354fc2786fu128, 0x866214666ab505b61d2c30cdb3b25dbfu128)));
        assert_eq!(U256::new(0x8d2694be922811e749e7fc91cb4c843au128, 0x2aa8b408ef094d7bc5debdc2b27e4b31u128).sign(U256::new(0xbacd20172f8dfdf4761db345213e3e9du128, 0x6f4eec31f64364ff1c48087283a15829u128)), (U256::new(0x846472f7b16b9a371a92e9df0652ec8u128, 0xaaa785c1377a3066396f83986b94ee9u128), U256::new(0x1a73355a12747ba58e3f2096ba06f3f3u128, 0x246bc2c228ffb7e2ff5d3e3adb0c04f9u128)));
        assert_eq!(U256::new(0x422e10b0f2320390287cf3b68e5a040du128, 0x354c11a46eb52f8c06a1d58112db2dedu128).sign(U256::new(0xf3abb6570619f508da5b7c48caf566d8u128, 0x9430604acaef5bd431dfdf376fe527e3u128)), (U256::new(0xb84d67f484507ff5475629fdf87b8829u128, 0x777931bc4b12adf9582fe79e8698bbdbu128), U256::new(0xe209c6d00c20fb35ead6d5ed764432fu128, 0x2cbe106fa77148391c0f0979b39fa9b7u128)));
        assert_eq!(U256::new(0x2515f614fa86e40dcf1b28c01acaea27u128, 0x6035b3878069f68f50a326a6beaf4365u128).sign(U256::new(0x551c5327ab716e5a874addf12e751e01u128, 0x6c42a82638609eef80ab6c3ba5ebb576u128)), (U256::new(0xf73e327229fc009274cf412d685f9738u128, 0x39ae8dd9c7120e2646672689826c573au128), U256::new(0x6f2db930806fd65821ca864a0b50802eu128, 0xc71adfa3614d11f1f894a10219a87a79u128)));
        assert_eq!(U256::new(0xfa7b4717db9d5861b7503ace641586a7u128, 0x49bdf449a771c1cbe42c12db1994b840u128).sign(U256::new(0x4185939edd1fcb317238fda7404c2c7bu128, 0xccce7c273c67145a6a6d965e57a7a95au128)), (U256::new(0xe5877d8873da09b96b44a796b720e995u128, 0xf0750d0a7ea2b72713ba81bd7caecdc5u128), U256::new(0x2de6fbc8150719c82f20f62fd80ab19au128, 0x9b4b0ff3e4a4937d20f559f775d8fffu128)));
        assert_eq!(U256::new(0x83c364a6997749682457ace7d3888c5du128, 0xb8d61c106f052404358bd19402a7a853u128).sign(U256::new(0x999bd67826504422c56c9ac8914b15c6u128, 0xac9c51fa6b18b19cd3f018c6d3ce92f4u128)), (U256::new(0xef17e45bb92189d62574a3a83842e1abu128, 0x13d2a9a3276b258ad261b4a9d7f58acbu128), U256::new(0x3a8cc27cb7853b5f054140059ebde5f3u128, 0xee40ac3d60c9c5122a0b4d682f54c63cu128)));
        assert_eq!(U256::new(0x888fd455586a6db1f639af95a47ea4ccu128, 0x5e11157d94bf5b7a9bfeba58fcf6e013u128).sign(U256::new(0x8eb1a4bb308ae29f24259b658de7eb2fu128, 0xa26e56e409254270623868edd139b082u128)), (U256::new(0x9912cf82f476d56ca17ba8ca6de75f50u128, 0x630a22dcd1c9291b19d2f9064455eb95u128), U256::new(0x3727f94b10328b2db824f05b0f6c06d4u128, 0xf30cf85166ce74b107165f11517f5874u128)));
        assert_eq!(U256::new(0xed8f55f39c8849fbbadd390e90b15a7du128, 0x8f52e494406b95ea016c23fe5ed74319u128).sign(U256::new(0xc3d0f06cf6350dc40583be6c82bfcf8cu128, 0x7c2eac91dbe0ef9eead9ebcbd7f21717u128)), (U256::new(0x7dba3b14085e2fd0eeb17432e6572533u128, 0x32dd262a9bff92e7225cd303f0008e1eu128), U256::new(0x53a41dfd44ad43f861e455626c4904d7u128, 0x6ef56fb5f626e6a05e734a7ebe0b60edu128)));
        assert_eq!(U256::new(0x8c68145dcfa1542339ec7a715ba84bc3u128, 0x92bb7234b28f894ceaab304997ee4979u128).sign(U256::new(0x13ee1eb038c635707fe8b705696c6f6cu128, 0x4ba2fabb036311a7a2e4991ca02a501du128)), (U256::new(0x3fe2b14448347b22e87c86bfa27eec3bu128, 0xef226b8444e460e2e42dabf7b8c688f3u128), U256::new(0xe9116703f15a016e222213f7fb3903au128, 0xea4428a5883dc3a31f36d0b609211b9eu128)));
        assert_eq!(U256::new(0x90377521f06491323d9743d17b9ece6fu128, 0xc27dcf73d5d0ba98ea6c87a5382d7c4du128).sign(U256::new(0xff113a622be4c98a5822e27caabebf2bu128, 0xa1c9d4df3bcde7848f6bb5150953b75eu128)), (U256::new(0xc9630acd682cb6cb00df706362473614u128, 0x3be7f1497533161f64005a59631c3c7au128), U256::new(0x5867ae50330b01ceb36cb4a4436fd3fbu128, 0x34952e5eb6f9a27d539ad0ea6a965163u128)));
        assert_eq!(U256::new(0x1cc145102d4545f9dbb376541b0d07dfu128, 0x821296b13ef3d8fa9f3f4a1d6a2ffb68u128).sign(U256::new(0x218e3fcfd4897ca23cf6b6808ce15958u128, 0xe7d8e7aae8a1054312f6254cffecf027u128)), (U256::new(0x42ac7d8fcb56ae6298ca6ba24f56bceau128, 0x632d56436b55b0aeb83980b661dde0f9u128), U256::new(0xaa96ddcf63fc27cda94dbbfc3e91480u128, 0x2a45560e72ec1f8feb7ed44d8cd6f5f9u128)));
        assert_eq!(U256::new(0x6be1501c927e5773223d34dcea419bcu128, 0xab7d1f4aecf9bfc3ccc2b4c734c6ccb2u128).sign(U256::new(0x71113c8c5eeedbc0a3f8673ef8638848u128, 0xfec9fcbac31d5d30208b75862412a5e0u128)), (U256::new(0xe06a622a3a1bf937b8b22d49aba329cfu128, 0x70f09e308286bb1a718ed8e2fe054730u128), U256::new(0x67e473efad4a29729b65ae76c6f2916fu128, 0x927caa407b3080ce9e033fcd4f8a10d0u128)));
        assert_eq!(U256::new(0x38d179a981f7d566db0357f2bac70460u128, 0x49b0571d2c6e0b8108b6ba7f1d357ce1u128).sign(U256::new(0xc5d93f80187f3ef42e8223b864728ba4u128, 0x37362e5009ce7b134d087c19d9a512d4u128)), (U256::new(0xa05324ee963ad79dc0dfdc5119a8bbc3u128, 0x3407ff88e4a0821be23a615ecfeddf77u128), U256::new(0x230c92a5575a4195ee281447243c192fu128, 0xedc599814f153a3c36329858a5ddb78cu128)));
        assert_eq!(U256::new(0xaee9d2d0f2416c6f03b4b262cf068733u128, 0xc5aa6b7f3bf8c0f51d728a0aa40190fau128).sign(U256::new(0x96d149ba0e96a710d7b4fb9c43f9cf13u128, 0x565afa1d01dc2c02e8a5dd900d7c2f7bu128)), (U256::new(0x9417e8869577a4fd6088aae11464922au128, 0x799069d8e7826b85b1dc6dba1f8d2502u128), U256::new(0x3d0d5819e695495f4305b41a32513223u128, 0x9c503e1684ceaf625c37abbe52c04be8u128)));
        assert_eq!(U256::new(0x3cea34678fd4e625a30bff07897a37dbu128, 0x4159cdf69e3df7901e3676b163d19f37u128).sign(U256::new(0xcf4ee4e10aabd52216b064844a893d7bu128, 0xe9f93523dfa6e1634efd4fd77a78f797u128)), (U256::new(0xf97863913ccce55aef19f41cc255b893u128, 0x8bed89a3d0212a7785f6e3d2d064234au128), U256::new(0x2f720b08e83ba4c4ef16136a9c93d1a6u128, 0xdab29e3e59adf27af680e12adeeb8af5u128)));
        assert_eq!(U256::new(0xe767b27939c9e7720d2176d19bf268fbu128, 0x68d80c601dc586317a4b6eeada1bf3d6u128).sign(U256::new(0xe49b732920fe34742cc521a400761d65u128, 0xfb639d420d2c1c2bf4e44bae23880e83u128)), (U256::new(0x602b495922832b0db5d90f3e85d81097u128, 0xee6bd942f194179139270f5b0a98a85eu128), U256::new(0x33aafb8e35d20543e5b567e87fa7e48cu128, 0x363a67dd95b83385ea2e7a5d0a5ac960u128)));
        assert_eq!(U256::new(0xc8fc298627bae5bbea47e6caeca06230u128, 0xb6f81c6b4599c67b9f1a95dc34e1a0e0u128).sign(U256::new(0x36b44c19d11d464f6ee3b42109defb4du128, 0xbdc737e120485f318187050da488fb22u128)), (U256::new(0x90c947894132416ed8b62ca137e625abu128, 0x9d99845315bc026d731bd96121d04f9du128), U256::new(0x3f8942ca89da66597539d0b1bf9c3a5eu128, 0xcbc63eed0f855ad57ebb63362b89bbaeu128)));
        assert_eq!(U256::new(0x37086ee0f9a3f5d0a8ebfa00fb20996au128, 0x452676a14b3374d1238f5377a5b30cdau128).sign(U256::new(0x80cacfb5f326520c6e1eec0276225e96u128, 0xc3da64fb66c2a8b2bba8980c3c3bcabbu128)), (U256::new(0xeb6ac9d5431fa8c4b19cc20c3965e5beu128, 0x2e1bae44b783f92c488e7505c3a60a2fu128), U256::new(0x7b9c038d4a0089eab320092216f2c658u128, 0x41ff9fd9d92cdcafb18411305fd5606fu128)));
        assert_eq!(U256::new(0x50ef4a546c6e4cff570ae2d61b551babu128, 0xdc2af5662ad01809b78522d62210730bu128).sign(U256::new(0x6eafe4da7d80919a71de05739bd10244u128, 0x459a36708f81cc037a2233344335549au128)), (U256::new(0x508cfc36b50fdfdcddc7304464540fecu128, 0x4d6ca9e891b78048ec4e9368be68c4ecu128), U256::new(0x1722fd3efe81d036eb748da96b0a0e05u128, 0x863a4bdddb01729e1c74f4d8620c749fu128)));
        assert_eq!(U256::new(0x4c6d83d98e625cd69b995365ddcb6eeu128, 0xb7b3261ca81055f824f3c9e0d4544f14u128).sign(U256::new(0xf3285b6fe25a08dc79572ff3943953fau128, 0x537243b5a5197a67281cf6a0b844cba3u128)), (U256::new(0xb2f9a09e253598abcd621c9e182af49bu128, 0xf8c79ab0ab5f35a35b54de9ef0337e82u128), U256::new(0x7d5a599fb95f36f61b7b8f652a6c6c41u128, 0x9ed0dacee9dd6e852baca2ffe6eb6465u128)));
        assert_eq!(U256::new(0x74b008eca54a5203b6e1584e4001faa5u128, 0x14591159a79963f431ee1328d75a8914u128).sign(U256::new(0xa56fedfbe91d4673056c052671ead52bu128, 0x3b04a21cb574c0f8862062333ff1fe82u128)), (U256::new(0x1a83c2adc81731b1b56214149a9e04a4u128, 0xf403b14d1099533ea91aa620bd470fdbu128), U256::new(0x588ed012caaead89bfcd26cfd3266681u128, 0xa224988d50ab4fd1de818cb9e9ddc227u128)));
        assert_eq!(U256::new(0xb54e81190845bcd721fa3b0e40028ad4u128, 0x80c3964764d1ed7ef411788835dc18bau128).sign(U256::new(0xe32f072bb90c72cae8ccdd5c102ba019u128, 0xdc419e1dc4245f77444ab278edf16cffu128)), (U256::new(0x917a88d1d9f330674ba36ada1a4cd274u128, 0xb3b0943450d67b40774adbf515cc9c02u128), U256::new(0x61d5782ae84f03c6174a24d9d82822f0u128, 0x18bf988f940b0fcb4ca95688ef86b395u128)));
        assert_eq!(U256::new(0x3d6543c3f2e652acc96adc1e8dd8f3a5u128, 0x347913cdd33068c625a97395be99aa91u128).sign(U256::new(0x4f07492a1d429871e606f6f51529fc97u128, 0xe9f7b341dbfe0b4594d737d5cd2c9393u128)), (U256::new(0xff5d80792f3dced9dc575fe4941110e1u128, 0xf8607db596fad2d4f5ada477a0e0fa27u128), U256::new(0x34cf7c2052f8b3d3ee62a85610b60687u128, 0xf9d472ede4071e651e58b352641c4026u128)));
        assert_eq!(U256::new(0xda6fb0095321f68f72df71bbb421c73eu128, 0xc57c1a36846bca762e3552797f794456u128).sign(U256::new(0xbebc3dcde2c48edae66bb3b45cd5e67du128, 0x29d230e3abb17151b1d678f99a53049eu128)), (U256::new(0x8918b96716184bb6bdb1188684f24eccu128, 0x2b0e4cb67b1e5a32f218d8fc3b02f5a1u128), U256::new(0x5da0880365263360494533ddb9959821u128, 0xbbe31c383f74e247d0ecac0bc994108du128)));
        assert_eq!(U256::new(0xa6cfdc478ed878fde75091e9f2e5f2efu128, 0xe617c227b7a0df7ffde6dfd161f78d4fu128).sign(U256::new(0xc7eda08758dcadd1ebd7f5142a202dfeu128, 0xff065d1a83a86d511f578a16e797e199u128)), (U256::new(0x2623b3d27f1f76742ccc71753c946022u128, 0x8157c716e6a7e9db6fa58bd8722d6b83u128), U256::new(0x4dda9ffc3f32fc29d2b8d779ce8b822cu128, 0x4a207dd9ea94a14145ff098a9603391au128)));
        assert_eq!(U256::new(0xa857b04ac0c8c2cb5578db993c3d40b4u128, 0x4eab852e2a5ce8533583a0f6b291e25cu128).sign(U256::new(0x14f82649270854959ddb20e9a9378a0u128, 0xca55a14e4bb2b7ac842c5fb0e3ef4ec3u128)), (U256::new(0x1736329aa7b12ab7c57dfb2c2505699cu128, 0xaa52ff53b8118fe0a665e980ac8cd47u128), U256::new(0x55a4d7230dd11984098127660aef38afu128, 0xfc9d20303730a13b7057f2e59bd758u128)));
        assert_eq!(U256::new(0x30176a85909e9b0e21616be66ff92c05u128, 0x6971ee8422be80dc8a196d02eba77f69u128).sign(U256::new(0xc2f8e729a94298561f393f119c4d62cau128, 0xc785f6cbf9322793a3c86c9844f358b3u128)), (U256::new(0xe93919528352ceefd5b9f45ea963c048u128, 0x840634faa95f2d8be6e5048b633313du128), U256::new(0x30306c079332bddf8dbec03668e8d5e5u128, 0xf5bd199ce0f46bf139bdf0d437d4ef46u128)));
        assert_eq!(U256::new(0x2d1a3303b8382d3706e8b3774b9c4220u128, 0xf53965b1de4a513466e307b8a894e0eeu128).sign(U256::new(0xf36aa00e4d12f31534a4df19a60eb85cu128, 0x70c42d38ff2d4ae0216bf6e7dbf9cfb4u128)), (U256::new(0x68d8bb242a15a43ce5767b0e6e416236u128, 0x297683b640695bcdafdd603f1666e62u128), U256::new(0x7d604f9982ec91c3aa586148e5c86d63u128, 0xd3b84e21c3382416c05192a44376c31au128)));
        assert_eq!(U256::new(0xa024beb3a134d3b59b32ecdcc4a6d1eu128, 0x5d2a4691abb7d6fe9f34fa5e66d56c9cu128).sign(U256::new(0x167b00acc067c4a901bb44bc61cc2c4bu128, 0x84f3ca867b68ce4c34eaf79a5b3499b5u128)), (U256::new(0x364a00cae61975f5419643fd39d4567bu128, 0xb78b290fad94d592bbf52808f354f656u128), U256::new(0x2322bfe9a3f3723f78ba9adfe5110c8fu128, 0xa03fb616fe7594da813ffd8444a76bf4u128)));
        assert_eq!(U256::new(0xa73b5876fecad2079a3c914970b841ffu128, 0x2a78e6b925579ecc9292bac92e7495acu128).sign(U256::new(0xbb4bc2fd6ec0570eae0e2c72ecb9f33fu128, 0x832dec72d9684309ff8b22d5a8ac90c1u128)), (U256::new(0x74865ec74f727d11e47b5e1449d3b510u128, 0x7c2202151cb051759d269ac05abeee68u128), U256::new(0x1cc7478d411ebe328206cf83ad5cd8feu128, 0x5d1a8622b13cddac8eec3059818782c9u128)));
        assert_eq!(U256::new(0x3db5125a6510a31f7244050919c2d096u128, 0xb1f2cf2634d6e4a94f13a341efc36bdu128).sign(U256::new(0x38bf7304d67336dea5e67ae762647265u128, 0x26ac218ad000a9102fbd713bfdbaa00u128)), (U256::new(0xa51d9aa7655035de4d70d5cd6e27bf43u128, 0x237e03042a653dc847b99a5b6719fdu128), U256::new(0xfd3557c6cd26d2dd52e74cbc1ef85c4u128, 0xddb299c82b5536f108c6716274e269e9u128)));
        assert_eq!(U256::new(0xc985ead7f77b20908355383211c83af2u128, 0x3bd75c2205a4537c2c5f3cfce6a8faceu128).sign(U256::new(0xe7118876341e783197380c3a36f2312bu128, 0xa67de87856c0d2416d2f72f858656b1u128)), (U256::new(0x4e8ae9a06dfea6aa8d6a2d4b8e232172u128, 0xa8f0a616f3f9737e488969c4e90b25cbu128), U256::new(0x7c347d42d6097ae0e3296653bb597881u128, 0xd730dafa3576808296ae472c0f88b28du128)));
        assert_eq!(U256::new(0xd639ef59a42833634af3243dc0107bb5u128, 0x30952f8f24e24a603ad67de396b4f95cu128).sign(U256::new(0xe5a7a9d0c81cee78503372926b786223u128, 0xf6da9a8dfa7f8dbab1a577e6a98cc58eu128)), (U256::new(0xaf2e746c21614ae0744556c4510cf1acu128, 0x814bf45b2410e2dca563fc0277feb828u128), U256::new(0x7bc557f0d55b3165b961025442861383u128, 0x8edc9ec632ee1db510fef974d2bc1783u128)));
        assert_eq!(U256::new(0x2855c86e2a112ff023acce2c32a1674fu128, 0xc6cd8019e49100b04d935676737d0f90u128).sign(U256::new(0x43317d93ea3656a44de9d2ac2454691au128, 0x6bebcf88b51582fe2d63c158e38dbb77u128)), (U256::new(0xf797287ccb3fd79eabacf1016d529e5bu128, 0x6004e1d08ba2e4f0f561b5ca4b44eadu128), U256::new(0x30a8413e6dd1aa08b2917755658dfebu128, 0x1918ef95eab18c31b0895824cd87bf29u128)));
        assert_eq!(U256::new(0xaaf26aff240a466740ffc561098d0cb5u128, 0x6310ee3b7e408a942fbe6ec84a846754u128).sign(U256::new(0x160f5827d76f1f5997d5b617fcef49c3u128, 0x80ee98a96ab1031ed28eb3098491ec5fu128)), (U256::new(0xa719136b7d6b0cbceed7a4963e5b386fu128, 0x6dcfa0aa15da69cf84a43ccb0a73ee52u128), U256::new(0x6f3b2445b190a9802abb5d0ce728d20du128, 0x9ae5e765e3045faaaac722758cf2f116u128)));
        assert_eq!(U256::new(0xd618af0e1a3c4743ef65b109fe299b4eu128, 0xa8bb2d24df14f3fea302289860d8d687u128).sign(U256::new(0xf400f3414e2bf04c0f98af27d0771d88u128, 0xe7c47758c715723de6a165641a44aa6du128)), (U256::new(0x51cbd689d7f035eda8a90c61dd9ad381u128, 0x77f78c95afd7e10f5f3943a4c77c4f0bu128), U256::new(0x4915339d943021ef3ae617da4fea4ba1u128, 0xe9acdb93c4b2a4249093a3ccf36eaa4u128)));
        assert_eq!(U256::new(0x6ffa444a98b303c6eb3fed840e0be78du128, 0xb0e128598e5f9d9157d8b1f3391e0e02u128).sign(U256::new(0xab6ed32cce193c142199c576e4e8cd39u128, 0x72074c40d3adec95330b1695b89c10du128)), (U256::new(0xfecb65a9341735e7fb7627ef4f5ddd05u128, 0xe5c34c88be2f65f1d52e376c235de12bu128), U256::new(0x453a3cc5a9202c6fe1ab0584987c1562u128, 0x9a9c052e3c0d6caab2a31fc167574c2u128)));
        assert_eq!(U256::new(0xe20b3e11d9b58ffd3ad48d472f04f16eu128, 0x44da816ccc18e1f43fe2b0ed638d0924u128).sign(U256::new(0xd38db3aff65e6bdcd281a2890fad6fbu128, 0x33a4c60a8c09d9839b91da04228c928fu128)), (U256::new(0x1275534558aad854b8edba6f474a7429u128, 0x3feecd541904d0f57f7366c306907du128), U256::new(0x4b70a25c62e791e063138697522a7bc7u128, 0xea54f79633b2690f0013708a1fa3840bu128)));
        assert_eq!(U256::new(0xdbc6de7a76cc7ab4b72abd5c8de55c70u128, 0xec3246155a8a991919faafbf876df01eu128).sign(U256::new(0xe5b1dd72ee641869a1e757a57e8416efu128, 0xadeb2558e4276ec7a45364e8da8a6dfdu128)), (U256::new(0x90608066d5780b8a4a4a829c2506ae23u128, 0x5a16bdb536e0f03b23dc48fa302a569au128), U256::new(0xce85a6d982cf9c0c60f285b7a001b14u128, 0xbe60f05ca5e9f1b87a0c3f8ee6d092ffu128)));
        assert_eq!(U256::new(0xe6fa2f589d2a86847c2e2b7ab62a979cu128, 0x42f52789b48fdd29a857316fcc4f3594u128).sign(U256::new(0x2ceb6b446616938590738847f301bd5fu128, 0xfce1c3316ffd9d72dc8f8c1ce90ef1c0u128)), (U256::new(0x6aebe6b3cde9ad534255637524c7addfu128, 0x3c4fec0319b9c09f608f0728aa130a87u128), U256::new(0xd0c973c8f9f89617aa32c0b821784f0u128, 0xd226fac2c8da2f688a52029988e3d513u128)));
        assert_eq!(U256::new(0xf90215e07875bfb6d04460db3c803907u128, 0x6098b350575fcf1d78626ecb10153771u128).sign(U256::new(0xd2685cf2748062dd4835c1b779b58fd7u128, 0xd1145e3d2af826e9938cf6a7d919f97du128)), (U256::new(0x29486a54c078c28b05f6a08a19ae3a0eu128, 0x4032e1530186f09e25913ec4128af270u128), U256::new(0x4cb57098c12813cc015d31b61ac8109fu128, 0xf71e221abbf11648305a770ff95fdf1bu128)));
        assert_eq!(U256::new(0x7d1ae02104f0d21e040b9bacfd15ef91u128, 0x93c767baf27e9d6ff2e67f9205537b50u128).sign(U256::new(0xf9e472c594ce6bcd71654809a4e9a09du128, 0x3d6930dacde8d7d1090ae7739d810bfdu128)), (U256::new(0x2ca9eda777c20ee111a12dc8e400a8bu128, 0x5fcac806a96584737825ccef89e8323bu128), U256::new(0x38c7c35a42ba14c48a2ec883ba53cc31u128, 0xa894d9f4aeeed5c114190fc6d2676cc0u128)));
        assert_eq!(U256::new(0xa1585956f8a33bb4b53f18cb1a12b76u128, 0xbb76b8f040d97b4ff0cdc33a1e3a7d6cu128).sign(U256::new(0x70c9b9a082a4b1b11288923a37dedf5bu128, 0x350f3116eec2ccea6d03beb6863e6ab7u128)), (U256::new(0xf20fdee60c8de03bd40cd9e2ddd1afccu128, 0x30531bdb9977cd5d53ac06f8f3fe48d8u128), U256::new(0x4630f807b3730936a6c81aedf5dc8f34u128, 0x6481866412f95c3282abe1427473f31eu128)));
        assert_eq!(U256::new(0xd14b17dd7ef1dda57a99595369bc4a7bu128, 0xd964d2bae66895d014e528d8e163f262u128).sign(U256::new(0xe3a5db1e8d758dd2fd79dd6768bf6e77u128, 0x698dcffc6ca0f9ca127e52a3524cf646u128)), (U256::new(0x70e2558ede78d28a927586e5e94b0054u128, 0x49e6426bcaa07ee418a9294529afec9bu128), U256::new(0x5f962f1b4926adf2288d920211c4fc86u128, 0x502ffa9de147a21b99c77bc26328e185u128)));
        assert_eq!(U256::new(0x285d294706de8bb21c2dd4ea97cb8110u128, 0x6ceb97372e670af20ec5bb803481a900u128).sign(U256::new(0xfac520fbe997ccf3afbaa07e0c010132u128, 0xaadbb2795eb35e1b9063f901feb79fb5u128)), (U256::new(0x5bd3e1b00dab7dfa15a88e1418cc5e90u128, 0x3a9547baaf598fbfc8203c64a92e3321u128), U256::new(0x2c4325d41f4edc25d15cb29599e60689u128, 0x847aa4d7a1b537eb92f7edf5ff277058u128)));
        assert_eq!(U256::new(0xc1b2d659430206d09c82b2bd17af590bu128, 0xfd0e237ba4da7468fad5fcb86c92d24au128).sign(U256::new(0xdbc383c44ad99b64d2915e07b5dcca5cu128, 0x6241c0ac3bc295e96ef81a5dde8c2160u128)), (U256::new(0x9c7b3b70c8dbe01247a870c95d9331u128, 0xad6e13cf57aee1cc177e4e83c64a2623u128), U256::new(0x607c006ea3ded86cdfcd7abdfb0cdf6au128, 0x5ed9ef4a494b66242c76a9a15f69cb45u128)));
        assert_eq!(U256::new(0xcc807445f28af1f0b541529b7c0225e3u128, 0x26d187186ae753535fc9c8d2181932e6u128).sign(U256::new(0x72ee8eeb1b834c9262fe009967222a0au128, 0x7b20f6b58d9611cc1aa9533609ddb9cfu128)), (U256::new(0x169c31ed187eaf5d0edff3db7909dda4u128, 0xef1ff2a0fb07cd3cb5579c68d60144b5u128), U256::new(0x1c962d64008b6c79f190294d29f57de5u128, 0xdc7e914b6c7cb1814beac03228dd8a14u128)));
    }

    #[test]
    fn u256_mod_inv() {
        assert_eq!(U256::new(0u128, 42u128).mod_inv(U256::new(0u128, 2017u128)), U256::new(0u128, 1969u128));
        assert_eq!(U256::new(0x40077a21236606a32e5f58b9c6aaf867u128, 0x4cf3fb4cb2bef15b8d72273df5cca429u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x0a9babb76285acf116bf56213bafc4b5u128, 0x36ec564659bc79dad9574355df8fe3a8u128));
        assert_eq!(U256::new(0xb65c71702849380e1f3d60e7e5b1cb1au128, 0xd098276521b5f2792d76405cb0575b69u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x681ab004fe0f48426d685c30d954849au128, 0x478c8ba4e75a3a6ababf03e045d6c818u128));
        assert_eq!(U256::new(0x9948dfaa09fa434805a3cbc9b5c73df0u128, 0xa90618cfe857990bd85b8aefba383784u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xe8eb8bee76a1043a4ef1ced1cf01c540u128, 0x6ea4feaa604dd5abc60c5eff8e8a1ea0u128));
        assert_eq!(U256::new(0x31c3454a32af29657fe9d8516b15cbc6u128, 0x432c048ec506f321998d0b9bccc7e2a9u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xb135fe5215b41ca747c5729ee9e39672u128, 0x5771394f3841b1e37ce0f30e69c49863u128));
        assert_eq!(U256::new(0xf486458a1b488075c1b43c3b04337716u128, 0x81df221c1f61eecdde10e4102504920eu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x7969592a9330f60616745985b2767be6u128, 0x2114840aca2f3817d97eda2b08bf69aeu128));
        assert_eq!(U256::new(0x8a349cb3b07c8e240b2fd13dfb8ed46au128, 0xb8bd7ddd728d879dd16b079d7425f050u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x4ec85db139a361178dbb1513760c7ebfu128, 0x27422ff9f6d2565e28a6bc39a031a7beu128));
        assert_eq!(U256::new(0x9eebdc0a6872172a94e8401ce8bfa48bu128, 0x577fcb7a8441c475381a642733cfdf3du128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xb06c9610a9635b5c02005fa3dc8dab46u128, 0x5622007b0d7fbfff59a09fa6c36cc733u128));
        assert_eq!(U256::new(0x71a5ab6437c7b1af8407e75d1b0faf80u128, 0xf6a75906cea2e98fc36a541328d71653u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xba9bbb07db050537e3a0ac9c1a55225eu128, 0xb13b34258766943965dc47d443e18cd1u128));
        assert_eq!(U256::new(0x0244c5f9d776bcf709649cfd3a3a2a92u128, 0x1c25ccdab87ffcf1551cda5e7d931afcu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x081cd838f9ead42c376a757ef9c99a8au128, 0x42cbae85b4f6724245d32a24a4a3d186u128));
        assert_eq!(U256::new(0x3eac3ec15766cec6e23b5f5619ffc548u128, 0xe77b46f080d6668ef3e2e619806a2c0cu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x2bc693ee0695bdfc6172254655219240u128, 0x1a62d5dc3109c98f86865fcbc2409fc1u128));
        assert_eq!(U256::new(0xd3b2d81d71845660fb3ee596de0d2586u128, 0xd6ad2ecd2a0f998d92cbc3c3857956a3u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xbef262ac993702d76fbbc5ab68f6a1f4u128, 0x37a2d5156d16259e5f31d0c22f11e41fu128));
        assert_eq!(U256::new(0x620d65181731d3b0f105e048ed5e2a36u128, 0x9bfbec6516478c2b172535ee53db3dccu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x0a6622feeeb7d4e46ef9b2fc457b7de6u128, 0x942c61782373efa07800c38b895ebf95u128));
        assert_eq!(U256::new(0xc6f0b13019d6eaa50d0f392198efcf4du128, 0xe565d59f17932c812149feccb7cf188cu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x588a25a83492e44ad5b9f02e2e90710au128, 0x4a3810440d91315034c59af6449a3f6du128));
        assert_eq!(U256::new(0xbcbed4fc9c5fc67d0932f0b22c78ec77u128, 0x96dcd9aaebde04a04245265ecce761beu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xc43d5f3d390049d7ceee765ef872d551u128, 0x31b6f52feda9c217a09cf2fc39d32db1u128));
        assert_eq!(U256::new(0x1819fd7b02b1d05ec03bc9e989efa4acu128, 0x8b1c6a50d9c1088d935962396c391a17u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x029fd56a855f2c5506bc14b2b8bb1357u128, 0x5543e6c22490d89d276a2da4d3dcb230u128));
        assert_eq!(U256::new(0x918154c15ac205e578e876b2610d072du128, 0x50caba3bf220bb0f326afff5edbbf64du128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x079626452b3f2b3ac531cc4eb10d0cf0u128, 0xe5c06c6d3abb734bbeed5a93baedf4afu128));
        assert_eq!(U256::new(0xb0b6ff6350ac319f0670d314252a5c4eu128, 0x7f91c69a3f5e47263059e9093829d485u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xf7f06d8184e2ca6b2dc70f3adfb3a7adu128, 0x49d83ebada078c162c6c3777bf338c7eu128));
        assert_eq!(U256::new(0xce5a8af60aebce8c379411bb0d88f6b2u128, 0x8e1b046e1b07aca1e095564395e5f873u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x57bbc3f26d1199d6386f1639075726e9u128, 0xdf5e74933d902a3543c17e846aa3c797u128));
        assert_eq!(U256::new(0xd3357ca2de13a28d62baee9340e7308eu128, 0x9a0273ec38d1bd54963565f06fa8aaf6u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xfc41a5a221abd99ad6e1a796fb2a13c8u128, 0xcd3346c7412c97e95d649f5374e505abu128));
        assert_eq!(U256::new(0xc8faafba63c287b499d7c3b076743708u128, 0xc1cee7051d22596a2a2c2a2a7f611aa6u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x6d975e4bed24424299c2a2a23fd9b694u128, 0x4cd684de7b6f12471430de9a8f239e92u128));
        assert_eq!(U256::new(0xb0ebd410a584d90d3b72dece474c5ff5u128, 0x5f4ed9a87a1052d520a294e213b06c42u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xccbe2ba0eefd3f841c2dabb8909e2e4du128, 0xd78a2ef347d9a62d3ee6b7a61084e764u128));
        assert_eq!(U256::new(0xdf3ce0b17bbf935695949a294d8e8805u128, 0x4aea0044a015e294476a93f29596523fu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x855de5a005536e007114de53890f8a26u128, 0x9c4a2aa4f34d0f72df43375813a4890du128));
        assert_eq!(U256::new(0xb26ff0c7e9e0a6645ed8d720fb563315u128, 0x40b0ca548d3caf4cce2c624f85ddf2fbu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x02969510de70ad0662c6d6f7b1954499u128, 0x94e1f7af41942c9849b20ff6f9dafb24u128));
        assert_eq!(U256::new(0xeee1881b878807ff11b66e361230ca5cu128, 0xe2340bc2ce068b1ea6e7f226ab245508u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x2ff08124f5282dfecc00df852ae42ac0u128, 0x20eb324a53a1b8e79128d7ebf6bbf54fu128));
        assert_eq!(U256::new(0xd6dfc3ca76d789e5fc89d16878197a44u128, 0xb99ee30acaf38dda6c4b07d4631d32d6u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xb51823cce675c5a6c9b4d45856c93ea2u128, 0xc0dc04911d74054d7ef6988c4d73766bu128));
        assert_eq!(U256::new(0x93c12ed2c308caf8a64473a4000815d0u128, 0x77629f40195a8e9c2f106e0047b9b112u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x8b39f23139c7405f661ea33cd057179du128, 0x9502459643d423fe432c3ef4b937da19u128));
        assert_eq!(U256::new(0x0eb68039c4a8838d5d06ab1c17d1bf83u128, 0x763bcc2d18bbf330fef6e0ccf0ca803fu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xce7d5ccb9f028122466e42f7c7f59b6du128, 0xd32f2b72172643cc28903a8df450a848u128));
        assert_eq!(U256::new(0x3c46bb8a5fffa92feb1e94f6c480b4b8u128, 0xb4757bd204fba6756685b94632c76b62u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xa0935272d5543d113a6db3a1f1021207u128, 0x7a92cf5e7cf7c66294fdfad3a8e4adb9u128));
        assert_eq!(U256::new(0xa2002d805fd0270f86ef6d969e6ea0ffu128, 0x40b8256b492c607443fb524fbe1d7395u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xf14ee29adc13691e08a0c9ffda9bbcdeu128, 0x90d8c33a0b1c07652fa7c901fe0e2ef8u128));
        assert_eq!(U256::new(0x7de557497208326206987d7272436a80u128, 0xbe13c07decf9b07cc2fae53e3170261du128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x146b3b4c4f46f97e597692cf61d35a6du128, 0x0f15cca4e423ab918e4c3490e57fec37u128));
        assert_eq!(U256::new(0xfd043fa75d2a576027750dca0d689f21u128, 0x17d35928a994eb436c67d23be0ca8621u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x801ffcd64ebf3cf7a06be1b2d4800c81u128, 0xb141b8670d7e54535aa593d367ee0c11u128));
        assert_eq!(U256::new(0x315697e11e863731e928759d0235994cu128, 0xfb726d2563886bfdf18b77b37fd65271u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x8457c5a3d871980a6314ef692695606bu128, 0x14d64e0f71ff3e0b4a2080c5532befaeu128));
        assert_eq!(U256::new(0x9c0b7d966965a381456b6ddb197521e0u128, 0x53d2c7183e10f338933fb09ac55ec06du128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x62491739973bb56a76204a79ae9bb039u128, 0x42c9419b0bc52470aec9ab20e2fbf4d9u128));
        assert_eq!(U256::new(0x917219ff5e4bdb74f74fe852dd49e2f4u128, 0xed8778ce9bc023397fcad3ad2ce62663u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x008c9195e69bf327d24b772f09f67a5au128, 0xa3237c4b3b9bb8f1221579fca5ceec6au128));
        assert_eq!(U256::new(0x59a2ffe0504f8bb40487d208a795c1f7u128, 0x6db7b20babf9b59e5fa807f74c6e213cu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xb10e700399c9bd75f6244ea2324f54d2u128, 0x468fdb0b65d418b04e46fb51d4dbbca3u128));
        assert_eq!(U256::new(0x0512666954e81409f71cfcb04b04ac1cu128, 0x3dcadbca884955346431a6f553cab2afu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xf2b5e6ad351b3ee15c4100150130dc95u128, 0xb5b9ba41690c613b5700004c13949e2fu128));
        assert_eq!(U256::new(0xd807e8e09c252c94c5b609082eb50bc2u128, 0x1254f2eccf40e2a4644c97d2a93e5b1eu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xb6116fbfb31790889f77707c9dc2b3eau128, 0xd00e6e9ca9ae22591987999d2fdf4f20u128));
        assert_eq!(U256::new(0xe8046addbb180fd57c1f3c0c96b3cec2u128, 0x810d35b91f9189b70c25b061c5e36fe3u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xc143138b24de4d20e87630add9dd0f0fu128, 0xfba90e62493ff98a1693059494f0f921u128));
        assert_eq!(U256::new(0x9c7a18d999b14cb8556289cacfbd2187u128, 0x25cad6954201436bd579235a049d4fb4u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x747ada1dce5e92f61b31b9063f4b556fu128, 0x5b7f9be4fcddc684dfb39c4494aca7fdu128));
        assert_eq!(U256::new(0xacd1e40c376ce71a9127b73e64714986u128, 0x34e04d2b921a09013c66e4ef8dab460bu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xf7bdd6629e1485bdb38932bba0d80703u128, 0x58c8c7bcec83f037e06b862656b257beu128));
        assert_eq!(U256::new(0x06effe2fb76ecbcb6905a618cd7017b9u128, 0x10675cafb76832fed6523ff682122b46u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x4261df9fe6d530f50a2de3058ca667b6u128, 0x15bc62a1f1632b3546282d1411efb879u128));
        assert_eq!(U256::new(0x014d66f936408eeadc4c280a5d518feau128, 0x511b2edcce52b23a672893c270cd1d7fu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x8b27a334f724f22050bbb368d7c054b3u128, 0x4928cb67db55ffc980c9b8ecf45981b8u128));
        assert_eq!(U256::new(0x04a23ebffc8fe27b9c156314f3c0001du128, 0x86602082179198bc5fe19403456c6582u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x526a4dd8f8f7e5c63f7e44de3abb2b2du128, 0x1a0d3408dba53105c46556473fc66b41u128));
        assert_eq!(U256::new(0x0a67c73cb33522e8db8b227a56f006deu128, 0x2ab59f61ecc7a79859b3497375824c88u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xa09dcc80bea2615bd404a0a975ad68c9u128, 0xd3ff155ec34cff80c3978915bacd35e4u128));
        assert_eq!(U256::new(0xbaff06526739c2c4ebde860c7eaa97bau128, 0x6c08055c0ea4c60214ef07ff36814183u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xa016dc4aa408302fc72e3478e8995835u128, 0x3cd5280d9d9f934ff8d66900cfa24317u128));
        assert_eq!(U256::new(0x36148d91771e0aafe27600996d39fec5u128, 0xdd1a9c9090e721d99edd9973299bd560u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xa9a585db8fee2c579463a8898e7a2e54u128, 0xbfc9b6f0f61685eb54db4e116c8478a2u128));
        assert_eq!(U256::new(0x69eeb5ecffae838830143b160b896099u128, 0xae2b7ed15006d506ca13735d80314688u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xebfa0009e2df1b5dc22cdb8fdd584a7cu128, 0x068ca845ac41abe1d966e81f396a9d85u128));
        assert_eq!(U256::new(0x18c72d08780ab250c799383a85f45e39u128, 0x3876344943329355a5c753a7430259f0u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x4880624bad0d57cfb9f877d6c593d886u128, 0xf682d71f1a1188f5b4f73ea7a3c1e81cu128));
        assert_eq!(U256::new(0x7b3f1717d4a9dc79df3a75a835860fd9u128, 0x237cb6a37072b2fa341631a65cb0afb8u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xb1433aea85e4293b1bdb1629838814ccu128, 0x88aab14e65db9faf0817218eb652d7c9u128));
        assert_eq!(U256::new(0x594c29dc6b12710da0895a446208be97u128, 0xc34aeb84e736e9bc14ce7ce453c59ad8u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xe2988ca08471a92f81d77e3f88ba53fdu128, 0x6d9f8f0b04f6dc6262a5b97ff55fe24fu128));
        assert_eq!(U256::new(0x3b8ba099b2b3f5915fe530b3cfec737eu128, 0x600119a146203ae8b6e16e46b47b9d00u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x08314df1e8423dbc6a326c01f9634afeu128, 0x7e53cc37280b760a61b95b598b10c934u128));
        assert_eq!(U256::new(0x14c7a2a3a3645c65ff6326aa32ffef2fu128, 0xaf6bdc7a4ae3bef44557b91b43d9841du128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x8f35e517f87411000c89e11a01b26440u128, 0x1bd22fae768fae74f208d0a1ed956820u128));
        assert_eq!(U256::new(0xff8584fd27dc2a7052493a056cb29c9eu128, 0xb3816987ffd86535bea7974454abf146u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xa11cdf3fc03354cab2f0389e8e6ffbb9u128, 0x07ee8b8b1442e1eae443a645053be54bu128));
        assert_eq!(U256::new(0x6cadd2ef8cc3e3dda79905d18537bac1u128, 0xfa06580276ff055b46e11b02fca78410u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x65cbfbc96d72b001dde0fd5a060409a7u128, 0xdac853765800c6ff6e82df8e00780e3eu128));
        assert_eq!(U256::new(0x15d64aff149fed8126946a6b0e9bc8c9u128, 0x2340006c6d8c6208fc6fa094ab7f7143u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x12e2327bdbf1b57906ecb49dc58a6bbdu128, 0xb04ff65f8824d1215dd06f82e4c1a79bu128));
        assert_eq!(U256::new(0x5519c3c937b90f5367ae32d6b710ee88u128, 0x92c94e7cdb4bcec7da11f589938304bfu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xca182f9c22fd58e2d16727a2b716cf4au128, 0xbc6dbc8b1406c5d2fc0b31a01cb0201au128));
        assert_eq!(U256::new(0x80facb1ad2ef3111511b628577f350e1u128, 0x1b3ba9b6d664cc95f11cc66142b4ec1du128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xcfcd9eaa630a5d4908febf96f935a095u128, 0xb96489aaf7f4ef26108aa7dd2bc36e3fu128));
        assert_eq!(U256::new(0xc63377fb18640e229ee9c49ecbd4eefdu128, 0xa68b30984a69dbf6c5afd886f5410161u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x87a027c8e667f7c3edc48f6bcd0e7d0bu128, 0xe100958ad06c7e10a50c3ff606d070a0u128));
        assert_eq!(U256::new(0x77550f2b1379e00b40eecb32130270efu128, 0x439c4cce6e03a42733f02b5f8abe7af7u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xd7d2a907ab82422745c11c6addbf2537u128, 0xc285012c5b27fa38c6ec3f29dfc5e466u128));
        assert_eq!(U256::new(0x7e5953894b954da612146053390f0947u128, 0xce6ec20edd79b2f3f5124a960ecedef2u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x1e42a3bceb9aa1dc0e96dbdf70ff481au128, 0x542739b29885d07539943a317083c29au128));
        assert_eq!(U256::new(0xe23ac7a979c87d1660c086e21d659d6fu128, 0x328aab5c21b9cef203cf02d0899adaaau128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xa448afe0e6b415c38edf2ab63c6d3765u128, 0xbba87dd3805ed0961571a8857a19454du128));
        assert_eq!(U256::new(0xdc9b95762efecac527e5c16edaee09a6u128, 0x688cf0ba5cc6fbf77ec8611ead4bc320u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x85428bf7546823ee9d4dc622d68f8670u128, 0xa69d12f77d95b24e20e2e9ff6ca146b2u128));
        assert_eq!(U256::new(0xe946531d02dbfa9240345decef03068eu128, 0x1eaeec57de7de76eef4111daf2726412u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xb8d7b225d2843bfb4755508c6dbd9bbau128, 0xfd84870357d5ca1cd628992560786bfbu128));
        assert_eq!(U256::new(0xff9620a4a8803708bf66f4c946675aa2u128, 0xb99902ee041596f8339ae2e4e58cd3b0u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xc984d3f86ce5ad20610e32fe3ffd9aadu128, 0xa5611bdf5b640ec12f63cd6a7f352910u128));
        assert_eq!(U256::new(0x7fcd7daafaabb29a454d9ee7595b80bbu128, 0xb494361bfba948b8896cc5a5dc88f938u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x125ef6208532ac4367dfabd080cef84au128, 0x606a340b3e0aada014b5f13d7d48469fu128));
        assert_eq!(U256::new(0xa53b6ee6a5322f6fb6fed160ee63f8b8u128, 0xe1d9992f2f6b78d34ab5c41ff92f690eu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x083444b7a7b66e1f6c85f40cac54677cu128, 0x7ae07653304dcbb32fa74da845e54f1eu128));
        assert_eq!(U256::new(0x7a6201445ff1d95fec2e5fe9419ed3d2u128, 0x3f6018315cf83a25fc44d97d748f53e7u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x926a86e76a44dd0e0a25e02950a9d0e0u128, 0x9bd75f448745fa6f42f4a056b2e36ba7u128));
        assert_eq!(U256::new(0x6fa0b7dc8b0606c224e4c029fe826f05u128, 0x74ae69e98ee3b2e37d2040e2a7aa3fa4u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x3f8b5e2e5c1369e7b8c32981cdd9b73cu128, 0x5998e7af3252d19055cffb59195d9e28u128));
        assert_eq!(U256::new(0x3853b2931daca7cf01b256773c0c9be6u128, 0xa05d19caaa0f874976db7ae616e4fd43u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x5dc1a2bae1fbd5f258a3c9e263c7e817u128, 0xdd81f3d48d1edcdf10bd367860a51a71u128));
        assert_eq!(U256::new(0xc660f6e6c9a5b41d2406d9815afe7279u128, 0xf3debb1c338c9750f3583dde2c70dc84u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x60526cab7b9684eae36008ac2ea9a77fu128, 0xa572d2657cf7ea4aca398a27a5ab03b8u128));
        assert_eq!(U256::new(0x9d4add4a9f987d0d3a041e8c566048dcu128, 0x4333a595db555bd3e79185282f84be81u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x7a8e4a92efcdcf1bd0901fdb61ce8aceu128, 0xbd3abf2f70354e68f99e3fc751aca0d8u128));
        assert_eq!(U256::new(0x1943f56bef21aab8a55a9d9fbaa87947u128, 0x6b412d36909d5f11b016b9c66c2f0835u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xa4c0faaefedbcb84fc508dc1b730bcb2u128, 0xab6d14f5297299082733e27b9b31a018u128));
        assert_eq!(U256::new(0x4e3869ef26cf038be67a8c83075059beu128, 0xd25bef9d03a5fbafcd1366ddd91e1221u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x26ea66a01a6073f60774beae102974a0u128, 0xdfb2e402d3bc1f8223e21310aaed97eau128));
        assert_eq!(U256::new(0xdb22a6154a35f7dc5795165bbd660c16u128, 0x3de5f7f8d3d3cb8d4a6e65e44b2233f9u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xce3d95b85381f3058812bf4fdae8623au128, 0xd5392e5ff9df8cdf593792c83992b3a5u128));
        assert_eq!(U256::new(0xb9b0a5d6711d34267991b4a1b9b3e47du128, 0xc7885649ed818fda1ac0a7dc97850616u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xe1e3c5ba1086a3086cf7f740d0d084c7u128, 0x4c4ba3a8cda0eef576e1ace2c47ac77du128));
        assert_eq!(U256::new(0x433e3491f68af5425f64eed858884dfcu128, 0x4edf977be6145a75f12cc52dc9294f60u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x7247ad4c5454ce4923bb3451214c00b1u128, 0xcc76a5ce6c2330a98bc855776b512cb9u128));
        assert_eq!(U256::new(0xda8d24695c1e34dcd13245bd85012f46u128, 0xb1470da1d3abd0ea54d1da1288eb8c8eu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x87a839ae03bf21be9128bceddec735c3u128, 0x1bbe2eb9d0d3f8502be501fd99909feau128));
        assert_eq!(U256::new(0x8a2f94e35247763acfea246de66a6818u128, 0x0c5278f390ffee629a1543fdaa946accu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x013dc06f388612b9f68e8803eaad5f8du128, 0x637e83d4b9e302ff064f810749512ee1u128));
        assert_eq!(U256::new(0xae91c12a42c2a01272050ff3549593e9u128, 0xbbdc6c2068be7fb0ee50305917d9db48u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x06ab2a6832668b57eece3e281b3ddebau128, 0x629327bee7a24deb20395bc83e8ebdfeu128));
        assert_eq!(U256::new(0x6d6dd88f66b6f77743f7c1b5fb01021eu128, 0x672990f43684bf43fff1d540b700be51u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x361f5683f7aa04d8992ae3d356fdb52au128, 0xfbca3195b279d693097c5b25850851f3u128));
        assert_eq!(U256::new(0xac78f2baa3aea4d70023e567dbeb6e13u128, 0x66ef63e9114d83b3423916e0168632a4u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x09b4b20c90b9abda934e00310f98a0d8u128, 0xd54f7fcd3663c60c24f8a15fd3682bb2u128));
        assert_eq!(U256::new(0x03e75eff7187e7e1318df2dd1ab10a07u128, 0x5a6107e072d5320ed11e6f09d4d45300u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xa6ab60f35fb435e5796122d2188fccecu128, 0xbc6d3998fe61b372cb20bec26de8a789u128));
        assert_eq!(U256::new(0xc07bd3656c68541c718e1ffb323510d8u128, 0x7b4362526c17e25dddb5be0d4552d12fu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x3e63fc79b597b83fd7ebb919be25cb3au128, 0xbb0092a77fc65164a64eaea8c02246c2u128));
        assert_eq!(U256::new(0x573873c26f02111d4ef5f0420379436bu128, 0xe81c78de0488daee60ec3d94b9e8808cu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xbb784e6fab8fffa772c0c4705abad926u128, 0x364794d27b2cd5980ded49d1e5f02b97u128));
        assert_eq!(U256::new(0x4530a2271b1cf6940e5a3d244829b3c4u128, 0xb6482af7d71d3912b1be04ec79c2dfa5u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x00f93a0fd3bec39ccb547c1b4134617au128, 0x712d44ba75cc1e8febb2cd0ee10f90dbu128));
        assert_eq!(U256::new(0x600dc501b371093169b007abbfd71036u128, 0x00304b86e853d4d121922906cc219a62u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x1dae575554e804722762bd33323420eau128, 0xb61f59bc29131d88ea2c343272d6e737u128));
        assert_eq!(U256::new(0x164bce599d31d0d2c4d15d9296e881cdu128, 0xbdf765b9c46e1a115b8afa7a9beebac7u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x9c7d3089a14f9a21ffc99dda8cb1ca5fu128, 0x0f269df9ef6bee7f7b376337c79db9d6u128));
        assert_eq!(U256::new(0x3af3dc917dc4171ccce14c28b9226184u128, 0x7bc2c7d4be22c76a1111a3b1790994adu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xefe7d3aab57f57b08b960347a064332fu128, 0x17133428365ab78c2d469d213256b346u128));
        assert_eq!(U256::new(0x0e971cf18245193d022d04dcdcdd36e8u128, 0x9423a5fc9d425be89dea746fc15cf82au128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xc63d38dc753596341f8e734931574100u128, 0xb37743d7b8cdf9c1fa5807f335f51f0eu128));
        assert_eq!(U256::new(0x02bbeaa995e44a484de2f1561001eb0au128, 0x437999bfe0e50ffcd26d4db0de11f1deu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x4f01633adfbaab4d70cf066062a0c31eu128, 0xa8004b1fef5f3369d1c995f77c2e7d6eu128));
        assert_eq!(U256::new(0xbddadd2490f8b287583ce55150ae0b34u128, 0xa818117a71ea379db8ccb25f18a7378du128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x040b748626abafa2cf34d7c1dc5e56cbu128, 0xece84642560c71813efd3fbe0b35bfabu128));
        assert_eq!(U256::new(0xa66c4430e4280f2a16ef4aac7e56e866u128, 0x568eafdad785fe6027c5b0f8bc3c95abu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xb246df0b0f1a3ba1605ee84fcc6100adu128, 0x0e5c7c064b30f3193c32bf736adf6a4du128));
        assert_eq!(U256::new(0xf70af1dc6789ced7cfd97a1632c3bca6u128, 0x22d97ace9e7acf47b9aa639ee36441e2u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xe6bd7d6a6ee856726de9110fd8be9b03u128, 0x971e4312092088ca97a944286b3bfc68u128));
        assert_eq!(U256::new(0x541e9703e2b7239f7408723332457303u128, 0x4cae1ccd51bf89309c629de4e4f0a510u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x4c6d400cbe678a986be0d05ff03c2027u128, 0xb12d5179acc04201ba9a203567e05433u128));
        assert_eq!(U256::new(0x643a24010d3293995db41c93de71492cu128, 0x343f0aac282488ceaf7e71c12e955027u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xf69d0fd42a4986ef4e48309a195b321du128, 0x32669e2bf7ad8816432ac845e3e4058du128));
        assert_eq!(U256::new(0xb37e527c33af2101bb5aea38b96bdeb5u128, 0x733d6c7deb8860364c79be771123a5b4u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xca336d79275b58894f85d6a48db7f96eu128, 0xf38c8f7f0bbe13b9d6d1f4704f923911u128));
        assert_eq!(U256::new(0x7cf512cbfe0008b08be42635406ff4a0u128, 0x2782a79f37dfb0ae15e4eec2f1b56573u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x29d13f18e7bb61d2679c6d4edac8fa41u128, 0xf1e6334ae8320469f166af92a0caf4e2u128));
        assert_eq!(U256::new(0x5e7edbd4d9cbc05427b6e0425ba6ebcbu128, 0x13376ca5d11abedff4a7176a2dd752dfu128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x80dadffd230737093bf87adfabaca026u128, 0xd879e88904a01b086e227ac984f89023u128));
        assert_eq!(U256::new(0x51288193f3bc6d0cc895e191854edb72u128, 0xc6c432e60c5311eaf0d23e55a8401174u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0x588b212034554ec6a09e779eee231685u128, 0xb13d5cca0f6ad8183a783690d293dee3u128));
        assert_eq!(U256::new(0x56fb92894ace4f6ace3960b0623b974cu128, 0x50fc7dceb0bbec8ed91bad5bd4f14c01u128).mod_inv(U256::new(0xffffffffffffffffffffffffffffffffu128, 0xfffffffffffffffffffffffefffffc2fu128)), U256::new(0xbd6075b56df518204411b796284028cbu128, 0x56bfb9c9566398af7d540012ec1120abu128));
    }

    #[test]
    fn u256_shl() {
        let u = U256::max_value();
        let (x0, x1) = (u << 1usize).unwrap();
        assert_eq!(x0, u128::max_value());
        assert_eq!(x1, u128::max_value() - 1);

        let u = U256::max_value();
        let (x0, x1) = (u << 128usize).unwrap();
        assert_eq!(x0, u128::max_value());
        assert_eq!(x1, 0u128);
    }

    #[test]
    fn u256_shr() {
        let u = U256::max_value();
        let (x0, x1) = (u >> 1usize).unwrap();
        assert_eq!(x0, 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFu128);
        assert_eq!(x1, u128::max_value());

        let u = U256::max_value();
        let (x0, x1) = (u >> 128usize).unwrap();
        assert_eq!(x0, 0u128);
        assert_eq!(x1, u128::max_value());
    }

    #[test]
    fn u256_encode_der_signature() {
        assert!(U256::encode_der_signature((U256::new(0xc392799ed0ed5110f66b4d8a25eda2d7u128, 0x174de25168c96bb5563dffa20cef1d98u128),U256::new(0x6dc3b0999c9d020947e3f0caee1332a1u128, 0x2d2237cd6412629ac2767a6224f56f83u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xc3, 0x92, 0x79, 0x9e, 0xd0, 0xed, 0x51, 0x10, 0xf6, 0x6b, 0x4d, 0x8a, 0x25, 0xed, 0xa2, 0xd7, 0x17, 0x4d, 0xe2, 0x51, 0x68, 0xc9, 0x6b, 0xb5, 0x56, 0x3d, 0xff, 0xa2, 0xc, 0xef, 0x1d, 0x98, 0x2, 0x20, 0x6d, 0xc3, 0xb0, 0x99, 0x9c, 0x9d, 0x2, 0x9, 0x47, 0xe3, 0xf0, 0xca, 0xee, 0x13, 0x32, 0xa1, 0x2d, 0x22, 0x37, 0xcd, 0x64, 0x12, 0x62, 0x9a, 0xc2, 0x76, 0x7a, 0x62, 0x24, 0xf5, 0x6f, 0x83, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x48e7df160ed0643467f3a46c2b6f1aa6u128, 0x4e106ca8478aa581f257e2d55f8538acu128),U256::new(0xd09e7ac6168a902630ae6d9198ebbc6du128, 0xa72a26eef5fbf0cce8af0151432820a1u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x48, 0xe7, 0xdf, 0x16, 0xe, 0xd0, 0x64, 0x34, 0x67, 0xf3, 0xa4, 0x6c, 0x2b, 0x6f, 0x1a, 0xa6, 0x4e, 0x10, 0x6c, 0xa8, 0x47, 0x8a, 0xa5, 0x81, 0xf2, 0x57, 0xe2, 0xd5, 0x5f, 0x85, 0x38, 0xac, 0x2, 0x21, 0x0, 0xd0, 0x9e, 0x7a, 0xc6, 0x16, 0x8a, 0x90, 0x26, 0x30, 0xae, 0x6d, 0x91, 0x98, 0xeb, 0xbc, 0x6d, 0xa7, 0x2a, 0x26, 0xee, 0xf5, 0xfb, 0xf0, 0xcc, 0xe8, 0xaf, 0x1, 0x51, 0x43, 0x28, 0x20, 0xa1, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x95e5cc22a0458b81f0799fe7b07b69cau128, 0xf4887663882b2c6b9da992f46054411u128),U256::new(0x2c48a6c4a2a1acdc15c4b5fa7ef1e26eu128, 0xf63741800600fc0fbc7b04245da92c2u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0x95, 0xe5, 0xcc, 0x22, 0xa0, 0x45, 0x8b, 0x81, 0xf0, 0x79, 0x9f, 0xe7, 0xb0, 0x7b, 0x69, 0xca, 0xf, 0x48, 0x87, 0x66, 0x38, 0x82, 0xb2, 0xc6, 0xb9, 0xda, 0x99, 0x2f, 0x46, 0x5, 0x44, 0x11, 0x2, 0x20, 0x2c, 0x48, 0xa6, 0xc4, 0xa2, 0xa1, 0xac, 0xdc, 0x15, 0xc4, 0xb5, 0xfa, 0x7e, 0xf1, 0xe2, 0x6e, 0xf, 0x63, 0x74, 0x18, 0x0, 0x60, 0xf, 0xc0, 0xfb, 0xc7, 0xb0, 0x42, 0x45, 0xda, 0x92, 0xc2, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x3169e03183919399eb695cd91e384697u128, 0x9d840e158e9c9faa704df2c4948da4d0u128),U256::new(0x9e3cc580a88c4d807b00d28d76587d29u128, 0x2d55f7fafe136b00ac766bba8a644deau128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x31, 0x69, 0xe0, 0x31, 0x83, 0x91, 0x93, 0x99, 0xeb, 0x69, 0x5c, 0xd9, 0x1e, 0x38, 0x46, 0x97, 0x9d, 0x84, 0xe, 0x15, 0x8e, 0x9c, 0x9f, 0xaa, 0x70, 0x4d, 0xf2, 0xc4, 0x94, 0x8d, 0xa4, 0xd0, 0x2, 0x21, 0x0, 0x9e, 0x3c, 0xc5, 0x80, 0xa8, 0x8c, 0x4d, 0x80, 0x7b, 0x0, 0xd2, 0x8d, 0x76, 0x58, 0x7d, 0x29, 0x2d, 0x55, 0xf7, 0xfa, 0xfe, 0x13, 0x6b, 0x0, 0xac, 0x76, 0x6b, 0xba, 0x8a, 0x64, 0x4d, 0xea, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x2cb7fdaf6f55fd486d3422b843fe7742u128, 0xc993e20da9a9228432bbe60a7e317e32u128),U256::new(0xb4f327e8ea997aeebc851bc9ca0e0824u128, 0x7c58b6d7a6f9d0e2aab010a1187c86e9u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x2c, 0xb7, 0xfd, 0xaf, 0x6f, 0x55, 0xfd, 0x48, 0x6d, 0x34, 0x22, 0xb8, 0x43, 0xfe, 0x77, 0x42, 0xc9, 0x93, 0xe2, 0xd, 0xa9, 0xa9, 0x22, 0x84, 0x32, 0xbb, 0xe6, 0xa, 0x7e, 0x31, 0x7e, 0x32, 0x2, 0x21, 0x0, 0xb4, 0xf3, 0x27, 0xe8, 0xea, 0x99, 0x7a, 0xee, 0xbc, 0x85, 0x1b, 0xc9, 0xca, 0xe, 0x8, 0x24, 0x7c, 0x58, 0xb6, 0xd7, 0xa6, 0xf9, 0xd0, 0xe2, 0xaa, 0xb0, 0x10, 0xa1, 0x18, 0x7c, 0x86, 0xe9, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xbefe588dea9184691ffda1116151f39bu128, 0xb415c3c8e4a9ee458d70e21cb02b80b4u128),U256::new(0xe20bd276c2a5a38e2b7d464676436647u128, 0xdbda4123dd3d93925494fe1a28bb5du128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xbe, 0xfe, 0x58, 0x8d, 0xea, 0x91, 0x84, 0x69, 0x1f, 0xfd, 0xa1, 0x11, 0x61, 0x51, 0xf3, 0x9b, 0xb4, 0x15, 0xc3, 0xc8, 0xe4, 0xa9, 0xee, 0x45, 0x8d, 0x70, 0xe2, 0x1c, 0xb0, 0x2b, 0x80, 0xb4, 0x2, 0x21, 0x0, 0xe2, 0xb, 0xd2, 0x76, 0xc2, 0xa5, 0xa3, 0x8e, 0x2b, 0x7d, 0x46, 0x46, 0x76, 0x43, 0x66, 0x47, 0x0, 0xdb, 0xda, 0x41, 0x23, 0xdd, 0x3d, 0x93, 0x92, 0x54, 0x94, 0xfe, 0x1a, 0x28, 0xbb, 0x5d].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x320365811951c76c59eb836bd86b593cu128, 0xa49e1e42271679af0fb2b5a4aad115e9u128),U256::new(0xa69eb28f2f242cff81b88a38d2bd3326u128, 0x57328d5648d5cb288889ff210d5e5037u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x32, 0x3, 0x65, 0x81, 0x19, 0x51, 0xc7, 0x6c, 0x59, 0xeb, 0x83, 0x6b, 0xd8, 0x6b, 0x59, 0x3c, 0xa4, 0x9e, 0x1e, 0x42, 0x27, 0x16, 0x79, 0xaf, 0xf, 0xb2, 0xb5, 0xa4, 0xaa, 0xd1, 0x15, 0xe9, 0x2, 0x21, 0x0, 0xa6, 0x9e, 0xb2, 0x8f, 0x2f, 0x24, 0x2c, 0xff, 0x81, 0xb8, 0x8a, 0x38, 0xd2, 0xbd, 0x33, 0x26, 0x57, 0x32, 0x8d, 0x56, 0x48, 0xd5, 0xcb, 0x28, 0x88, 0x89, 0xff, 0x21, 0xd, 0x5e, 0x50, 0x37, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x63d91d0fc7a52ad4b068670fba0d7ce2u128, 0xab8079be6def54f28e0aec924152e32bu128),U256::new(0xc860eb43564d39f76b498cc7f7f4551eu128, 0x90e47c068d06decdbef5106c02b8c055u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x63, 0xd9, 0x1d, 0xf, 0xc7, 0xa5, 0x2a, 0xd4, 0xb0, 0x68, 0x67, 0xf, 0xba, 0xd, 0x7c, 0xe2, 0xab, 0x80, 0x79, 0xbe, 0x6d, 0xef, 0x54, 0xf2, 0x8e, 0xa, 0xec, 0x92, 0x41, 0x52, 0xe3, 0x2b, 0x2, 0x21, 0x0, 0xc8, 0x60, 0xeb, 0x43, 0x56, 0x4d, 0x39, 0xf7, 0x6b, 0x49, 0x8c, 0xc7, 0xf7, 0xf4, 0x55, 0x1e, 0x90, 0xe4, 0x7c, 0x6, 0x8d, 0x6, 0xde, 0xcd, 0xbe, 0xf5, 0x10, 0x6c, 0x2, 0xb8, 0xc0, 0x55, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x69fec4b62183a773fea8670ede644a83u128, 0x1ce735f020bc425bfd14d2b887d4e113u128),U256::new(0xbc4d9542dfb6039d63107c685240ff2cu128, 0x209d80694837872a344ef8027151e949u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x69, 0xfe, 0xc4, 0xb6, 0x21, 0x83, 0xa7, 0x73, 0xfe, 0xa8, 0x67, 0xe, 0xde, 0x64, 0x4a, 0x83, 0x1c, 0xe7, 0x35, 0xf0, 0x20, 0xbc, 0x42, 0x5b, 0xfd, 0x14, 0xd2, 0xb8, 0x87, 0xd4, 0xe1, 0x13, 0x2, 0x21, 0x0, 0xbc, 0x4d, 0x95, 0x42, 0xdf, 0xb6, 0x3, 0x9d, 0x63, 0x10, 0x7c, 0x68, 0x52, 0x40, 0xff, 0x2c, 0x20, 0x9d, 0x80, 0x69, 0x48, 0x37, 0x87, 0x2a, 0x34, 0x4e, 0xf8, 0x2, 0x71, 0x51, 0xe9, 0x49, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x24030d28a4dadc0b45b1c0f39dbdccbbu128, 0xe1e7c8f5959d79a93674b1b19667c5e5u128),U256::new(0xe64ccb4615e0b0174caed58adf58edbbu128, 0xa87d88fa049af29070f6c81ee964236eu128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x24, 0x3, 0xd, 0x28, 0xa4, 0xda, 0xdc, 0xb, 0x45, 0xb1, 0xc0, 0xf3, 0x9d, 0xbd, 0xcc, 0xbb, 0xe1, 0xe7, 0xc8, 0xf5, 0x95, 0x9d, 0x79, 0xa9, 0x36, 0x74, 0xb1, 0xb1, 0x96, 0x67, 0xc5, 0xe5, 0x2, 0x21, 0x0, 0xe6, 0x4c, 0xcb, 0x46, 0x15, 0xe0, 0xb0, 0x17, 0x4c, 0xae, 0xd5, 0x8a, 0xdf, 0x58, 0xed, 0xbb, 0xa8, 0x7d, 0x88, 0xfa, 0x4, 0x9a, 0xf2, 0x90, 0x70, 0xf6, 0xc8, 0x1e, 0xe9, 0x64, 0x23, 0x6e, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xe04ec38e280dbd24411f1d20ef88770du128, 0xe0508345eb401ab14a4ab7f25847289fu128),U256::new(0x55ac4d4d62b08ed0b397fba1ee35aed2u128, 0x2d92ea16690245b864e26968a616a905u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xe0, 0x4e, 0xc3, 0x8e, 0x28, 0xd, 0xbd, 0x24, 0x41, 0x1f, 0x1d, 0x20, 0xef, 0x88, 0x77, 0xd, 0xe0, 0x50, 0x83, 0x45, 0xeb, 0x40, 0x1a, 0xb1, 0x4a, 0x4a, 0xb7, 0xf2, 0x58, 0x47, 0x28, 0x9f, 0x2, 0x20, 0x55, 0xac, 0x4d, 0x4d, 0x62, 0xb0, 0x8e, 0xd0, 0xb3, 0x97, 0xfb, 0xa1, 0xee, 0x35, 0xae, 0xd2, 0x2d, 0x92, 0xea, 0x16, 0x69, 0x2, 0x45, 0xb8, 0x64, 0xe2, 0x69, 0x68, 0xa6, 0x16, 0xa9, 0x5, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x6157b3132c6b7d7dcd22d8c136c0f214u128, 0x6523e4c91b484fa854ab572fdcd4d2d7u128),U256::new(0xea1e6c97cd0289149af56451b0e93185u128, 0xcebba82f8164fca1a92b5fcb808550a6u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x61, 0x57, 0xb3, 0x13, 0x2c, 0x6b, 0x7d, 0x7d, 0xcd, 0x22, 0xd8, 0xc1, 0x36, 0xc0, 0xf2, 0x14, 0x65, 0x23, 0xe4, 0xc9, 0x1b, 0x48, 0x4f, 0xa8, 0x54, 0xab, 0x57, 0x2f, 0xdc, 0xd4, 0xd2, 0xd7, 0x2, 0x21, 0x0, 0xea, 0x1e, 0x6c, 0x97, 0xcd, 0x2, 0x89, 0x14, 0x9a, 0xf5, 0x64, 0x51, 0xb0, 0xe9, 0x31, 0x85, 0xce, 0xbb, 0xa8, 0x2f, 0x81, 0x64, 0xfc, 0xa1, 0xa9, 0x2b, 0x5f, 0xcb, 0x80, 0x85, 0x50, 0xa6, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xf956193db5c11675972cc62d6bced217u128, 0x14b6bcefba28d2f8d17338fd3c33eabfu128),U256::new(0xe2d797740e4fa7567b385bf6ef2e9a09u128, 0x375b0d58b049ccded574d2f9c67b536du128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xf9, 0x56, 0x19, 0x3d, 0xb5, 0xc1, 0x16, 0x75, 0x97, 0x2c, 0xc6, 0x2d, 0x6b, 0xce, 0xd2, 0x17, 0x14, 0xb6, 0xbc, 0xef, 0xba, 0x28, 0xd2, 0xf8, 0xd1, 0x73, 0x38, 0xfd, 0x3c, 0x33, 0xea, 0xbf, 0x2, 0x21, 0x0, 0xe2, 0xd7, 0x97, 0x74, 0xe, 0x4f, 0xa7, 0x56, 0x7b, 0x38, 0x5b, 0xf6, 0xef, 0x2e, 0x9a, 0x9, 0x37, 0x5b, 0xd, 0x58, 0xb0, 0x49, 0xcc, 0xde, 0xd5, 0x74, 0xd2, 0xf9, 0xc6, 0x7b, 0x53, 0x6d].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x400d76d7f7ad1b15cb50e1f291f955b1u128, 0x93636d2d40878690bafbd739da7ca060u128),U256::new(0x7ecf2a97934d2059a08c9f78070c3469u128, 0x30d50fa2da828aeaf6deb0077d5b0a38u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x40, 0xd, 0x76, 0xd7, 0xf7, 0xad, 0x1b, 0x15, 0xcb, 0x50, 0xe1, 0xf2, 0x91, 0xf9, 0x55, 0xb1, 0x93, 0x63, 0x6d, 0x2d, 0x40, 0x87, 0x86, 0x90, 0xba, 0xfb, 0xd7, 0x39, 0xda, 0x7c, 0xa0, 0x60, 0x2, 0x20, 0x7e, 0xcf, 0x2a, 0x97, 0x93, 0x4d, 0x20, 0x59, 0xa0, 0x8c, 0x9f, 0x78, 0x7, 0xc, 0x34, 0x69, 0x30, 0xd5, 0xf, 0xa2, 0xda, 0x82, 0x8a, 0xea, 0xf6, 0xde, 0xb0, 0x7, 0x7d, 0x5b, 0xa, 0x38, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x3e63827f345f137aedbaf5ae44df4fcu128, 0x7e8a5f75c96215384127da1cbe3196d0u128),U256::new(0x54a8305b217a52bd8e2b3ea52e3196f3u128, 0xc57b4877405718b577057e5d90f761e9u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x3, 0xe6, 0x38, 0x27, 0xf3, 0x45, 0xf1, 0x37, 0xae, 0xdb, 0xaf, 0x5a, 0xe4, 0x4d, 0xf4, 0xfc, 0x7e, 0x8a, 0x5f, 0x75, 0xc9, 0x62, 0x15, 0x38, 0x41, 0x27, 0xda, 0x1c, 0xbe, 0x31, 0x96, 0xd0, 0x2, 0x20, 0x54, 0xa8, 0x30, 0x5b, 0x21, 0x7a, 0x52, 0xbd, 0x8e, 0x2b, 0x3e, 0xa5, 0x2e, 0x31, 0x96, 0xf3, 0xc5, 0x7b, 0x48, 0x77, 0x40, 0x57, 0x18, 0xb5, 0x77, 0x5, 0x7e, 0x5d, 0x90, 0xf7, 0x61, 0xe9, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x65468db7e2783f5143780ebf2b90816du128, 0xd2c371e2718901c73c1a4764e17ec7dfu128),U256::new(0x6883e0ec35eaf2b667bf55ae9a81d2feu128, 0x13eb36a4c7a35aed90edba3d64def002u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x65, 0x46, 0x8d, 0xb7, 0xe2, 0x78, 0x3f, 0x51, 0x43, 0x78, 0xe, 0xbf, 0x2b, 0x90, 0x81, 0x6d, 0xd2, 0xc3, 0x71, 0xe2, 0x71, 0x89, 0x1, 0xc7, 0x3c, 0x1a, 0x47, 0x64, 0xe1, 0x7e, 0xc7, 0xdf, 0x2, 0x20, 0x68, 0x83, 0xe0, 0xec, 0x35, 0xea, 0xf2, 0xb6, 0x67, 0xbf, 0x55, 0xae, 0x9a, 0x81, 0xd2, 0xfe, 0x13, 0xeb, 0x36, 0xa4, 0xc7, 0xa3, 0x5a, 0xed, 0x90, 0xed, 0xba, 0x3d, 0x64, 0xde, 0xf0, 0x2, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x9ba833d412b351c5253fc42440e79b15u128, 0x74d0479d1b754bddb1eddf566e2548e0u128),U256::new(0xca370cd415e197a301f961c6ad378f1au128, 0x9f041d4f3f3a05296f43aa14f134ebd4u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0x9b, 0xa8, 0x33, 0xd4, 0x12, 0xb3, 0x51, 0xc5, 0x25, 0x3f, 0xc4, 0x24, 0x40, 0xe7, 0x9b, 0x15, 0x74, 0xd0, 0x47, 0x9d, 0x1b, 0x75, 0x4b, 0xdd, 0xb1, 0xed, 0xdf, 0x56, 0x6e, 0x25, 0x48, 0xe0, 0x2, 0x21, 0x0, 0xca, 0x37, 0xc, 0xd4, 0x15, 0xe1, 0x97, 0xa3, 0x1, 0xf9, 0x61, 0xc6, 0xad, 0x37, 0x8f, 0x1a, 0x9f, 0x4, 0x1d, 0x4f, 0x3f, 0x3a, 0x5, 0x29, 0x6f, 0x43, 0xaa, 0x14, 0xf1, 0x34, 0xeb, 0xd4].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x2773379fc16d5b7a8b9ef3be9c8e62d5u128, 0xd6a722b98af917b033a58e930735175eu128),U256::new(0x2cbf9ee2abaef965d49a3e8345c2fc82u128, 0x4f733d8f298dbc1a10ed8ccfec5f677eu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x27, 0x73, 0x37, 0x9f, 0xc1, 0x6d, 0x5b, 0x7a, 0x8b, 0x9e, 0xf3, 0xbe, 0x9c, 0x8e, 0x62, 0xd5, 0xd6, 0xa7, 0x22, 0xb9, 0x8a, 0xf9, 0x17, 0xb0, 0x33, 0xa5, 0x8e, 0x93, 0x7, 0x35, 0x17, 0x5e, 0x2, 0x20, 0x2c, 0xbf, 0x9e, 0xe2, 0xab, 0xae, 0xf9, 0x65, 0xd4, 0x9a, 0x3e, 0x83, 0x45, 0xc2, 0xfc, 0x82, 0x4f, 0x73, 0x3d, 0x8f, 0x29, 0x8d, 0xbc, 0x1a, 0x10, 0xed, 0x8c, 0xcf, 0xec, 0x5f, 0x67, 0x7e, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x608c2bb9df1f5cdf2758374fdbb4093cu128, 0xabb7efe6a2333f5b1bf7eefa71f5d7acu128),U256::new(0x2526f83b30a0a1436e0236475a484ddfu128, 0xd064022dc134f8db475d2c0fd20203dau128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x60, 0x8c, 0x2b, 0xb9, 0xdf, 0x1f, 0x5c, 0xdf, 0x27, 0x58, 0x37, 0x4f, 0xdb, 0xb4, 0x9, 0x3c, 0xab, 0xb7, 0xef, 0xe6, 0xa2, 0x33, 0x3f, 0x5b, 0x1b, 0xf7, 0xee, 0xfa, 0x71, 0xf5, 0xd7, 0xac, 0x2, 0x20, 0x25, 0x26, 0xf8, 0x3b, 0x30, 0xa0, 0xa1, 0x43, 0x6e, 0x2, 0x36, 0x47, 0x5a, 0x48, 0x4d, 0xdf, 0xd0, 0x64, 0x2, 0x2d, 0xc1, 0x34, 0xf8, 0xdb, 0x47, 0x5d, 0x2c, 0xf, 0xd2, 0x2, 0x3, 0xda, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x22ef0c03f5273404ef1ab298b554390bu128, 0xe5b4b8326b3ee8daf9f5b736f0cc650fu128),U256::new(0xd69415b4dea8687d9246cb87e46ba42du128, 0x92519e565781c2347b26e3e168d61d8du128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x22, 0xef, 0xc, 0x3, 0xf5, 0x27, 0x34, 0x4, 0xef, 0x1a, 0xb2, 0x98, 0xb5, 0x54, 0x39, 0xb, 0xe5, 0xb4, 0xb8, 0x32, 0x6b, 0x3e, 0xe8, 0xda, 0xf9, 0xf5, 0xb7, 0x36, 0xf0, 0xcc, 0x65, 0xf, 0x2, 0x21, 0x0, 0xd6, 0x94, 0x15, 0xb4, 0xde, 0xa8, 0x68, 0x7d, 0x92, 0x46, 0xcb, 0x87, 0xe4, 0x6b, 0xa4, 0x2d, 0x92, 0x51, 0x9e, 0x56, 0x57, 0x81, 0xc2, 0x34, 0x7b, 0x26, 0xe3, 0xe1, 0x68, 0xd6, 0x1d, 0x8d, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x8ee792270a67c2315a75feef49c93c22u128, 0x47dd5e6894769bd57ce5cadb2c2f75a8u128),U256::new(0x5237bac5a6ef9270ec9e6aac335af9fdu128, 0x7bbca42055cdd91807f26dac4c2a2469u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0x8e, 0xe7, 0x92, 0x27, 0xa, 0x67, 0xc2, 0x31, 0x5a, 0x75, 0xfe, 0xef, 0x49, 0xc9, 0x3c, 0x22, 0x47, 0xdd, 0x5e, 0x68, 0x94, 0x76, 0x9b, 0xd5, 0x7c, 0xe5, 0xca, 0xdb, 0x2c, 0x2f, 0x75, 0xa8, 0x2, 0x20, 0x52, 0x37, 0xba, 0xc5, 0xa6, 0xef, 0x92, 0x70, 0xec, 0x9e, 0x6a, 0xac, 0x33, 0x5a, 0xf9, 0xfd, 0x7b, 0xbc, 0xa4, 0x20, 0x55, 0xcd, 0xd9, 0x18, 0x7, 0xf2, 0x6d, 0xac, 0x4c, 0x2a, 0x24, 0x69, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x2b008c38679bcea3d55089cf819284a5u128, 0x2e294f0385c4f3b0d3f215e018b2332bu128),U256::new(0xe1ec8b716085836838c35936c0b79dadu128, 0x6f3a63498b2e6529fb301f8e220ac364u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x2b, 0x0, 0x8c, 0x38, 0x67, 0x9b, 0xce, 0xa3, 0xd5, 0x50, 0x89, 0xcf, 0x81, 0x92, 0x84, 0xa5, 0x2e, 0x29, 0x4f, 0x3, 0x85, 0xc4, 0xf3, 0xb0, 0xd3, 0xf2, 0x15, 0xe0, 0x18, 0xb2, 0x33, 0x2b, 0x2, 0x21, 0x0, 0xe1, 0xec, 0x8b, 0x71, 0x60, 0x85, 0x83, 0x68, 0x38, 0xc3, 0x59, 0x36, 0xc0, 0xb7, 0x9d, 0xad, 0x6f, 0x3a, 0x63, 0x49, 0x8b, 0x2e, 0x65, 0x29, 0xfb, 0x30, 0x1f, 0x8e, 0x22, 0xa, 0xc3, 0x64, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x51681791385f5cb7f7827e1859ef6b54u128, 0x8b5f51403c1ad862df5c3552c0cb0c5eu128),U256::new(0xab29243df80be834fd5fc4ba30be2d4u128, 0xa25e5a860f713ce740778c6ac662fdf2u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x51, 0x68, 0x17, 0x91, 0x38, 0x5f, 0x5c, 0xb7, 0xf7, 0x82, 0x7e, 0x18, 0x59, 0xef, 0x6b, 0x54, 0x8b, 0x5f, 0x51, 0x40, 0x3c, 0x1a, 0xd8, 0x62, 0xdf, 0x5c, 0x35, 0x52, 0xc0, 0xcb, 0xc, 0x5e, 0x2, 0x20, 0xa, 0xb2, 0x92, 0x43, 0xdf, 0x80, 0xbe, 0x83, 0x4f, 0xd5, 0xfc, 0x4b, 0xa3, 0xb, 0xe2, 0xd4, 0xa2, 0x5e, 0x5a, 0x86, 0xf, 0x71, 0x3c, 0xe7, 0x40, 0x77, 0x8c, 0x6a, 0xc6, 0x62, 0xfd, 0xf2, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x18323b07f4bd2d8200d5b4aa2e940874u128, 0xda6e4e6edc2a923bb27e76c7f024c34bu128),U256::new(0xdeb6cf20e5217a194538b5efaca79f46u128, 0x464a122ef3e8b73fa51563630779e67au128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x18, 0x32, 0x3b, 0x7, 0xf4, 0xbd, 0x2d, 0x82, 0x0, 0xd5, 0xb4, 0xaa, 0x2e, 0x94, 0x8, 0x74, 0xda, 0x6e, 0x4e, 0x6e, 0xdc, 0x2a, 0x92, 0x3b, 0xb2, 0x7e, 0x76, 0xc7, 0xf0, 0x24, 0xc3, 0x4b, 0x2, 0x21, 0x0, 0xde, 0xb6, 0xcf, 0x20, 0xe5, 0x21, 0x7a, 0x19, 0x45, 0x38, 0xb5, 0xef, 0xac, 0xa7, 0x9f, 0x46, 0x46, 0x4a, 0x12, 0x2e, 0xf3, 0xe8, 0xb7, 0x3f, 0xa5, 0x15, 0x63, 0x63, 0x7, 0x79, 0xe6, 0x7a, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xdd2bedc1f656726b24da8d07e85a5301u128, 0xbfeb4762f0d4182dae8dd47362ba3c7bu128),U256::new(0xe5acafdeabfca49c66b03a15dc765330u128, 0x698b35ecce0526a6b196a0c2d3706170u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xdd, 0x2b, 0xed, 0xc1, 0xf6, 0x56, 0x72, 0x6b, 0x24, 0xda, 0x8d, 0x7, 0xe8, 0x5a, 0x53, 0x1, 0xbf, 0xeb, 0x47, 0x62, 0xf0, 0xd4, 0x18, 0x2d, 0xae, 0x8d, 0xd4, 0x73, 0x62, 0xba, 0x3c, 0x7b, 0x2, 0x21, 0x0, 0xe5, 0xac, 0xaf, 0xde, 0xab, 0xfc, 0xa4, 0x9c, 0x66, 0xb0, 0x3a, 0x15, 0xdc, 0x76, 0x53, 0x30, 0x69, 0x8b, 0x35, 0xec, 0xce, 0x5, 0x26, 0xa6, 0xb1, 0x96, 0xa0, 0xc2, 0xd3, 0x70, 0x61, 0x70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x4306f1aed4096274caa73bac05696a60u128, 0xfd2572dfe4aa5a85ff521c50c8f6f559u128),U256::new(0x5cc191309151c0b9d02bc4e3116110a6u128, 0x149de883d6739832a29cfd4d48e7875eu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x43, 0x6, 0xf1, 0xae, 0xd4, 0x9, 0x62, 0x74, 0xca, 0xa7, 0x3b, 0xac, 0x5, 0x69, 0x6a, 0x60, 0xfd, 0x25, 0x72, 0xdf, 0xe4, 0xaa, 0x5a, 0x85, 0xff, 0x52, 0x1c, 0x50, 0xc8, 0xf6, 0xf5, 0x59, 0x2, 0x20, 0x5c, 0xc1, 0x91, 0x30, 0x91, 0x51, 0xc0, 0xb9, 0xd0, 0x2b, 0xc4, 0xe3, 0x11, 0x61, 0x10, 0xa6, 0x14, 0x9d, 0xe8, 0x83, 0xd6, 0x73, 0x98, 0x32, 0xa2, 0x9c, 0xfd, 0x4d, 0x48, 0xe7, 0x87, 0x5e, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x4eda2a46e6648109a97950f22baf6c28u128, 0xec6fba1eb384233db2474b3e6803fa64u128),U256::new(0xba375eaaf1f127e0f291cd7fb5f4e033u128, 0x443b778322ebedea5f6e733231e2f205u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x4e, 0xda, 0x2a, 0x46, 0xe6, 0x64, 0x81, 0x9, 0xa9, 0x79, 0x50, 0xf2, 0x2b, 0xaf, 0x6c, 0x28, 0xec, 0x6f, 0xba, 0x1e, 0xb3, 0x84, 0x23, 0x3d, 0xb2, 0x47, 0x4b, 0x3e, 0x68, 0x3, 0xfa, 0x64, 0x2, 0x21, 0x0, 0xba, 0x37, 0x5e, 0xaa, 0xf1, 0xf1, 0x27, 0xe0, 0xf2, 0x91, 0xcd, 0x7f, 0xb5, 0xf4, 0xe0, 0x33, 0x44, 0x3b, 0x77, 0x83, 0x22, 0xeb, 0xed, 0xea, 0x5f, 0x6e, 0x73, 0x32, 0x31, 0xe2, 0xf2, 0x5, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xf1e6335735e5c48266a9170e48b4288eu128, 0xe49f994ad0cfb03737e3d8c0f764614eu128),U256::new(0xb07e75661794efbee270d7e3cc985ea3u128, 0x1356a2eda9e7a37e8531afee4a62f5a7u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xf1, 0xe6, 0x33, 0x57, 0x35, 0xe5, 0xc4, 0x82, 0x66, 0xa9, 0x17, 0xe, 0x48, 0xb4, 0x28, 0x8e, 0xe4, 0x9f, 0x99, 0x4a, 0xd0, 0xcf, 0xb0, 0x37, 0x37, 0xe3, 0xd8, 0xc0, 0xf7, 0x64, 0x61, 0x4e, 0x2, 0x21, 0x0, 0xb0, 0x7e, 0x75, 0x66, 0x17, 0x94, 0xef, 0xbe, 0xe2, 0x70, 0xd7, 0xe3, 0xcc, 0x98, 0x5e, 0xa3, 0x13, 0x56, 0xa2, 0xed, 0xa9, 0xe7, 0xa3, 0x7e, 0x85, 0x31, 0xaf, 0xee, 0x4a, 0x62, 0xf5, 0xa7].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x25319a20967da5746d4b8ee31280ac03u128, 0xbafe78854f21ef76ea01f3d998cb6c7du128),U256::new(0x4b236c1d0f33bcf5631036c778be4a8du128, 0x8b16b30a58c005d86d294ac17ae58c02u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x25, 0x31, 0x9a, 0x20, 0x96, 0x7d, 0xa5, 0x74, 0x6d, 0x4b, 0x8e, 0xe3, 0x12, 0x80, 0xac, 0x3, 0xba, 0xfe, 0x78, 0x85, 0x4f, 0x21, 0xef, 0x76, 0xea, 0x1, 0xf3, 0xd9, 0x98, 0xcb, 0x6c, 0x7d, 0x2, 0x20, 0x4b, 0x23, 0x6c, 0x1d, 0xf, 0x33, 0xbc, 0xf5, 0x63, 0x10, 0x36, 0xc7, 0x78, 0xbe, 0x4a, 0x8d, 0x8b, 0x16, 0xb3, 0xa, 0x58, 0xc0, 0x5, 0xd8, 0x6d, 0x29, 0x4a, 0xc1, 0x7a, 0xe5, 0x8c, 0x2, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x928f940282922bcce00e6986f816addau128, 0x5d59b723f13e5746ffcfd97e98959b0u128),U256::new(0xe6ffe1496751ad172c79570affb3fad1u128, 0x5db493f77259e72e04139ae3d188914bu128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0x92, 0x8f, 0x94, 0x2, 0x82, 0x92, 0x2b, 0xcc, 0xe0, 0xe, 0x69, 0x86, 0xf8, 0x16, 0xad, 0xda, 0x5, 0xd5, 0x9b, 0x72, 0x3f, 0x13, 0xe5, 0x74, 0x6f, 0xfc, 0xfd, 0x97, 0xe9, 0x89, 0x59, 0xb0, 0x2, 0x21, 0x0, 0xe6, 0xff, 0xe1, 0x49, 0x67, 0x51, 0xad, 0x17, 0x2c, 0x79, 0x57, 0xa, 0xff, 0xb3, 0xfa, 0xd1, 0x5d, 0xb4, 0x93, 0xf7, 0x72, 0x59, 0xe7, 0x2e, 0x4, 0x13, 0x9a, 0xe3, 0xd1, 0x88, 0x91, 0x4b].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x4aa746ccc30dd0ea993bb04c9f7ef1d4u128, 0x90186ff44983e9dae51850080f455653u128),U256::new(0x256b45524b858147b352f9308efb9ce3u128, 0x41402815d3c9799d9c533c14d806e26au128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x4a, 0xa7, 0x46, 0xcc, 0xc3, 0xd, 0xd0, 0xea, 0x99, 0x3b, 0xb0, 0x4c, 0x9f, 0x7e, 0xf1, 0xd4, 0x90, 0x18, 0x6f, 0xf4, 0x49, 0x83, 0xe9, 0xda, 0xe5, 0x18, 0x50, 0x8, 0xf, 0x45, 0x56, 0x53, 0x2, 0x20, 0x25, 0x6b, 0x45, 0x52, 0x4b, 0x85, 0x81, 0x47, 0xb3, 0x52, 0xf9, 0x30, 0x8e, 0xfb, 0x9c, 0xe3, 0x41, 0x40, 0x28, 0x15, 0xd3, 0xc9, 0x79, 0x9d, 0x9c, 0x53, 0x3c, 0x14, 0xd8, 0x6, 0xe2, 0x6a, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x3ac336fdd721f8de3415115da99a4fd8u128, 0x6fa292f7771b73cfe65fa62802a28c8du128),U256::new(0xeea92494ddf1a0b040e6a7d9d0167a94u128, 0xfa78d5e9218f3a5f6c7382e4756c77b1u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x3a, 0xc3, 0x36, 0xfd, 0xd7, 0x21, 0xf8, 0xde, 0x34, 0x15, 0x11, 0x5d, 0xa9, 0x9a, 0x4f, 0xd8, 0x6f, 0xa2, 0x92, 0xf7, 0x77, 0x1b, 0x73, 0xcf, 0xe6, 0x5f, 0xa6, 0x28, 0x2, 0xa2, 0x8c, 0x8d, 0x2, 0x21, 0x0, 0xee, 0xa9, 0x24, 0x94, 0xdd, 0xf1, 0xa0, 0xb0, 0x40, 0xe6, 0xa7, 0xd9, 0xd0, 0x16, 0x7a, 0x94, 0xfa, 0x78, 0xd5, 0xe9, 0x21, 0x8f, 0x3a, 0x5f, 0x6c, 0x73, 0x82, 0xe4, 0x75, 0x6c, 0x77, 0xb1, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x35adfb4add1aaeb6435a7a8e3f66beb5u128, 0x2ed54a79618c999d0519f4b48c6b566u128),U256::new(0x10f50a6bfb2014d444d878d5d30bbdcu128, 0x352a88e9261462050bdc849f16f779bcu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x35, 0xad, 0xfb, 0x4a, 0xdd, 0x1a, 0xae, 0xb6, 0x43, 0x5a, 0x7a, 0x8e, 0x3f, 0x66, 0xbe, 0xb5, 0x2, 0xed, 0x54, 0xa7, 0x96, 0x18, 0xc9, 0x99, 0xd0, 0x51, 0x9f, 0x4b, 0x48, 0xc6, 0xb5, 0x66, 0x2, 0x20, 0x1, 0xf, 0x50, 0xa6, 0xbf, 0xb2, 0x1, 0x4d, 0x44, 0x4d, 0x87, 0x8d, 0x5d, 0x30, 0xbb, 0xdc, 0x35, 0x2a, 0x88, 0xe9, 0x26, 0x14, 0x62, 0x5, 0xb, 0xdc, 0x84, 0x9f, 0x16, 0xf7, 0x79, 0xbc, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xcca5ba64319f5dc7653e8fcaf22d92c6u128, 0x6c4e91efb4558354dffbe6978638aea7u128),U256::new(0xe070132ec5bd1d4bb2f2be29455f7740u128, 0x315c701447294a06b7f14f1cef998931u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xcc, 0xa5, 0xba, 0x64, 0x31, 0x9f, 0x5d, 0xc7, 0x65, 0x3e, 0x8f, 0xca, 0xf2, 0x2d, 0x92, 0xc6, 0x6c, 0x4e, 0x91, 0xef, 0xb4, 0x55, 0x83, 0x54, 0xdf, 0xfb, 0xe6, 0x97, 0x86, 0x38, 0xae, 0xa7, 0x2, 0x21, 0x0, 0xe0, 0x70, 0x13, 0x2e, 0xc5, 0xbd, 0x1d, 0x4b, 0xb2, 0xf2, 0xbe, 0x29, 0x45, 0x5f, 0x77, 0x40, 0x31, 0x5c, 0x70, 0x14, 0x47, 0x29, 0x4a, 0x6, 0xb7, 0xf1, 0x4f, 0x1c, 0xef, 0x99, 0x89, 0x31].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xba03ac2e26b35f77e984ebe997e392c0u128, 0xde45b9748cb6e97c0f86873a76d019aeu128),U256::new(0x5478b6e90836ab506feddc2a3cbf6464u128, 0xb164be7dd0b79143b4789fe39879c1aau128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xba, 0x3, 0xac, 0x2e, 0x26, 0xb3, 0x5f, 0x77, 0xe9, 0x84, 0xeb, 0xe9, 0x97, 0xe3, 0x92, 0xc0, 0xde, 0x45, 0xb9, 0x74, 0x8c, 0xb6, 0xe9, 0x7c, 0xf, 0x86, 0x87, 0x3a, 0x76, 0xd0, 0x19, 0xae, 0x2, 0x20, 0x54, 0x78, 0xb6, 0xe9, 0x8, 0x36, 0xab, 0x50, 0x6f, 0xed, 0xdc, 0x2a, 0x3c, 0xbf, 0x64, 0x64, 0xb1, 0x64, 0xbe, 0x7d, 0xd0, 0xb7, 0x91, 0x43, 0xb4, 0x78, 0x9f, 0xe3, 0x98, 0x79, 0xc1, 0xaa, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x79e365770a79f15ae5c55eec28cb7c1bu128, 0x40f268796b4ed6092f0417f13d4f9f05u128),U256::new(0x2cde083a7d6affbbcbb8bf0cd384bfadu128, 0x66e6a686676e2ebfe885ca3e81bb65e9u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x79, 0xe3, 0x65, 0x77, 0xa, 0x79, 0xf1, 0x5a, 0xe5, 0xc5, 0x5e, 0xec, 0x28, 0xcb, 0x7c, 0x1b, 0x40, 0xf2, 0x68, 0x79, 0x6b, 0x4e, 0xd6, 0x9, 0x2f, 0x4, 0x17, 0xf1, 0x3d, 0x4f, 0x9f, 0x5, 0x2, 0x20, 0x2c, 0xde, 0x8, 0x3a, 0x7d, 0x6a, 0xff, 0xbb, 0xcb, 0xb8, 0xbf, 0xc, 0xd3, 0x84, 0xbf, 0xad, 0x66, 0xe6, 0xa6, 0x86, 0x67, 0x6e, 0x2e, 0xbf, 0xe8, 0x85, 0xca, 0x3e, 0x81, 0xbb, 0x65, 0xe9, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x1417e33a8e387cf132d977bff39ca3f2u128, 0xfe72f0799f1d480b60a1c7862ddb0f9fu128),U256::new(0x16ca91a20fad21e9dfc689f88ec2533cu128, 0x46664ec013b661b054d94f99d8e8ceffu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x14, 0x17, 0xe3, 0x3a, 0x8e, 0x38, 0x7c, 0xf1, 0x32, 0xd9, 0x77, 0xbf, 0xf3, 0x9c, 0xa3, 0xf2, 0xfe, 0x72, 0xf0, 0x79, 0x9f, 0x1d, 0x48, 0xb, 0x60, 0xa1, 0xc7, 0x86, 0x2d, 0xdb, 0xf, 0x9f, 0x2, 0x20, 0x16, 0xca, 0x91, 0xa2, 0xf, 0xad, 0x21, 0xe9, 0xdf, 0xc6, 0x89, 0xf8, 0x8e, 0xc2, 0x53, 0x3c, 0x46, 0x66, 0x4e, 0xc0, 0x13, 0xb6, 0x61, 0xb0, 0x54, 0xd9, 0x4f, 0x99, 0xd8, 0xe8, 0xce, 0xff, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x5e0490215a2fa5cf5f45fe5dbd42129u128, 0xb3a38fca9590827c750ca6684b609c4cu128),U256::new(0xc1adcabb56bb1fe7aca4c240ef8f4e51u128, 0xd4caff6f6744e236eb37baa658feb095u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x5, 0xe0, 0x49, 0x2, 0x15, 0xa2, 0xfa, 0x5c, 0xf5, 0xf4, 0x5f, 0xe5, 0xdb, 0xd4, 0x21, 0x29, 0xb3, 0xa3, 0x8f, 0xca, 0x95, 0x90, 0x82, 0x7c, 0x75, 0xc, 0xa6, 0x68, 0x4b, 0x60, 0x9c, 0x4c, 0x2, 0x21, 0x0, 0xc1, 0xad, 0xca, 0xbb, 0x56, 0xbb, 0x1f, 0xe7, 0xac, 0xa4, 0xc2, 0x40, 0xef, 0x8f, 0x4e, 0x51, 0xd4, 0xca, 0xff, 0x6f, 0x67, 0x44, 0xe2, 0x36, 0xeb, 0x37, 0xba, 0xa6, 0x58, 0xfe, 0xb0, 0x95, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xd77d201086b4b4f25b5216306bef6917u128, 0xee1a0d2720325659c619162ca2c94685u128),U256::new(0xf515db483652adb3a3292ac3774428f0u128, 0xe50bcdff44142e6a83e1239e1661904au128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xd7, 0x7d, 0x20, 0x10, 0x86, 0xb4, 0xb4, 0xf2, 0x5b, 0x52, 0x16, 0x30, 0x6b, 0xef, 0x69, 0x17, 0xee, 0x1a, 0xd, 0x27, 0x20, 0x32, 0x56, 0x59, 0xc6, 0x19, 0x16, 0x2c, 0xa2, 0xc9, 0x46, 0x85, 0x2, 0x21, 0x0, 0xf5, 0x15, 0xdb, 0x48, 0x36, 0x52, 0xad, 0xb3, 0xa3, 0x29, 0x2a, 0xc3, 0x77, 0x44, 0x28, 0xf0, 0xe5, 0xb, 0xcd, 0xff, 0x44, 0x14, 0x2e, 0x6a, 0x83, 0xe1, 0x23, 0x9e, 0x16, 0x61, 0x90, 0x4a].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xd4220ec25127f08fdb15b9d4c8adaf6fu128, 0xf56462be2abf96cb6a8e1f37edbb121eu128),U256::new(0xdfb8c5f669cee2d12d424539018f8dd5u128, 0x8852eed3987c43b4293c4290063b93c9u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xd4, 0x22, 0xe, 0xc2, 0x51, 0x27, 0xf0, 0x8f, 0xdb, 0x15, 0xb9, 0xd4, 0xc8, 0xad, 0xaf, 0x6f, 0xf5, 0x64, 0x62, 0xbe, 0x2a, 0xbf, 0x96, 0xcb, 0x6a, 0x8e, 0x1f, 0x37, 0xed, 0xbb, 0x12, 0x1e, 0x2, 0x21, 0x0, 0xdf, 0xb8, 0xc5, 0xf6, 0x69, 0xce, 0xe2, 0xd1, 0x2d, 0x42, 0x45, 0x39, 0x1, 0x8f, 0x8d, 0xd5, 0x88, 0x52, 0xee, 0xd3, 0x98, 0x7c, 0x43, 0xb4, 0x29, 0x3c, 0x42, 0x90, 0x6, 0x3b, 0x93, 0xc9].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x33f49f829168ff41ccc46f2d92bf2c81u128, 0xa1217d5239452b8ecafb61eb23b20725u128),U256::new(0x4945c49e9a59aa62a3a033335742f82du128, 0xd8f7e5e2825382bf55c8f2f2c27f5e47u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x33, 0xf4, 0x9f, 0x82, 0x91, 0x68, 0xff, 0x41, 0xcc, 0xc4, 0x6f, 0x2d, 0x92, 0xbf, 0x2c, 0x81, 0xa1, 0x21, 0x7d, 0x52, 0x39, 0x45, 0x2b, 0x8e, 0xca, 0xfb, 0x61, 0xeb, 0x23, 0xb2, 0x7, 0x25, 0x2, 0x20, 0x49, 0x45, 0xc4, 0x9e, 0x9a, 0x59, 0xaa, 0x62, 0xa3, 0xa0, 0x33, 0x33, 0x57, 0x42, 0xf8, 0x2d, 0xd8, 0xf7, 0xe5, 0xe2, 0x82, 0x53, 0x82, 0xbf, 0x55, 0xc8, 0xf2, 0xf2, 0xc2, 0x7f, 0x5e, 0x47, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x8c414483394f9acebf10b30924ca95eu128, 0x17fc8e823b86119c786b627599c8f845u128),U256::new(0xfd92ced89aba76b434925b193b0c0dadu128, 0xfecb87ad40f7d4f3217467039b84e3dcu128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x8, 0xc4, 0x14, 0x48, 0x33, 0x94, 0xf9, 0xac, 0xeb, 0xf1, 0xb, 0x30, 0x92, 0x4c, 0xa9, 0x5e, 0x17, 0xfc, 0x8e, 0x82, 0x3b, 0x86, 0x11, 0x9c, 0x78, 0x6b, 0x62, 0x75, 0x99, 0xc8, 0xf8, 0x45, 0x2, 0x21, 0x0, 0xfd, 0x92, 0xce, 0xd8, 0x9a, 0xba, 0x76, 0xb4, 0x34, 0x92, 0x5b, 0x19, 0x3b, 0xc, 0xd, 0xad, 0xfe, 0xcb, 0x87, 0xad, 0x40, 0xf7, 0xd4, 0xf3, 0x21, 0x74, 0x67, 0x3, 0x9b, 0x84, 0xe3, 0xdc, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xcd6b05c9dcbf7aa9d34bb9db95fd7fe7u128, 0x9c4cfcd9e02cfd81dde9a2678e012e54u128),U256::new(0x905478a164fe0d7ee1fe50868c8225cdu128, 0xe02342656ac87e49514acab2961e4cecu128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xcd, 0x6b, 0x5, 0xc9, 0xdc, 0xbf, 0x7a, 0xa9, 0xd3, 0x4b, 0xb9, 0xdb, 0x95, 0xfd, 0x7f, 0xe7, 0x9c, 0x4c, 0xfc, 0xd9, 0xe0, 0x2c, 0xfd, 0x81, 0xdd, 0xe9, 0xa2, 0x67, 0x8e, 0x1, 0x2e, 0x54, 0x2, 0x21, 0x0, 0x90, 0x54, 0x78, 0xa1, 0x64, 0xfe, 0xd, 0x7e, 0xe1, 0xfe, 0x50, 0x86, 0x8c, 0x82, 0x25, 0xcd, 0xe0, 0x23, 0x42, 0x65, 0x6a, 0xc8, 0x7e, 0x49, 0x51, 0x4a, 0xca, 0xb2, 0x96, 0x1e, 0x4c, 0xec].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x3b7de0fba2d9bc392c33c2fb11de76ecu128, 0x85cca124cdd68dfc794332bb7c6dfa0u128),U256::new(0x7d7121bef6e5dc009c056c9d30fee0e5u128, 0x94f341cfcba186e9b3d18e32bf4d4210u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x3b, 0x7d, 0xe0, 0xfb, 0xa2, 0xd9, 0xbc, 0x39, 0x2c, 0x33, 0xc2, 0xfb, 0x11, 0xde, 0x76, 0xec, 0x8, 0x5c, 0xca, 0x12, 0x4c, 0xdd, 0x68, 0xdf, 0xc7, 0x94, 0x33, 0x2b, 0xb7, 0xc6, 0xdf, 0xa0, 0x2, 0x20, 0x7d, 0x71, 0x21, 0xbe, 0xf6, 0xe5, 0xdc, 0x0, 0x9c, 0x5, 0x6c, 0x9d, 0x30, 0xfe, 0xe0, 0xe5, 0x94, 0xf3, 0x41, 0xcf, 0xcb, 0xa1, 0x86, 0xe9, 0xb3, 0xd1, 0x8e, 0x32, 0xbf, 0x4d, 0x42, 0x10, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x9fb22f85d824dfab5057f4c02ebf8816u128, 0xcfb6c2484379fb47d4f3c6c1fc6686e4u128),U256::new(0xd113b4beb3c2dccf697d222ad8db8f3au128, 0x12d838f6bdb27ebb9b7dd00d4469e7edu128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0x9f, 0xb2, 0x2f, 0x85, 0xd8, 0x24, 0xdf, 0xab, 0x50, 0x57, 0xf4, 0xc0, 0x2e, 0xbf, 0x88, 0x16, 0xcf, 0xb6, 0xc2, 0x48, 0x43, 0x79, 0xfb, 0x47, 0xd4, 0xf3, 0xc6, 0xc1, 0xfc, 0x66, 0x86, 0xe4, 0x2, 0x21, 0x0, 0xd1, 0x13, 0xb4, 0xbe, 0xb3, 0xc2, 0xdc, 0xcf, 0x69, 0x7d, 0x22, 0x2a, 0xd8, 0xdb, 0x8f, 0x3a, 0x12, 0xd8, 0x38, 0xf6, 0xbd, 0xb2, 0x7e, 0xbb, 0x9b, 0x7d, 0xd0, 0xd, 0x44, 0x69, 0xe7, 0xed].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xfa3affc90f295e15a4183edaf81e0f70u128, 0xc74443e76e2ae03908deb124332b920au128),U256::new(0x935a6e38700227aa9f584bf1575f19cdu128, 0x2a1aa3e8018c50e3ecfbaaaf853bb357u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xfa, 0x3a, 0xff, 0xc9, 0xf, 0x29, 0x5e, 0x15, 0xa4, 0x18, 0x3e, 0xda, 0xf8, 0x1e, 0xf, 0x70, 0xc7, 0x44, 0x43, 0xe7, 0x6e, 0x2a, 0xe0, 0x39, 0x8, 0xde, 0xb1, 0x24, 0x33, 0x2b, 0x92, 0xa, 0x2, 0x21, 0x0, 0x93, 0x5a, 0x6e, 0x38, 0x70, 0x2, 0x27, 0xaa, 0x9f, 0x58, 0x4b, 0xf1, 0x57, 0x5f, 0x19, 0xcd, 0x2a, 0x1a, 0xa3, 0xe8, 0x1, 0x8c, 0x50, 0xe3, 0xec, 0xfb, 0xaa, 0xaf, 0x85, 0x3b, 0xb3, 0x57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xb16ee18ae6ba664792dd2876d7f50b21u128, 0x705fff79c23c539edcbc47670cca4213u128),U256::new(0x19bf505c3e3787fd939d2fcec4d5331u128, 0xbb777e6d440f33b4341a8b303806aff1u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xb1, 0x6e, 0xe1, 0x8a, 0xe6, 0xba, 0x66, 0x47, 0x92, 0xdd, 0x28, 0x76, 0xd7, 0xf5, 0xb, 0x21, 0x70, 0x5f, 0xff, 0x79, 0xc2, 0x3c, 0x53, 0x9e, 0xdc, 0xbc, 0x47, 0x67, 0xc, 0xca, 0x42, 0x13, 0x2, 0x20, 0x1, 0x9b, 0xf5, 0x5, 0xc3, 0xe3, 0x78, 0x7f, 0xd9, 0x39, 0xd2, 0xfc, 0xec, 0x4d, 0x53, 0x31, 0xbb, 0x77, 0x7e, 0x6d, 0x44, 0xf, 0x33, 0xb4, 0x34, 0x1a, 0x8b, 0x30, 0x38, 0x6, 0xaf, 0xf1, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xe3a80969452be492cf6a2ed2a384fcdau128, 0xc054c531374b015a8b64e10be14f503au128),U256::new(0x304e5273c3d37096eb766729f7c7910eu128, 0x4217e48ad17a2e64ee2340214b58d60u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xe3, 0xa8, 0x9, 0x69, 0x45, 0x2b, 0xe4, 0x92, 0xcf, 0x6a, 0x2e, 0xd2, 0xa3, 0x84, 0xfc, 0xda, 0xc0, 0x54, 0xc5, 0x31, 0x37, 0x4b, 0x1, 0x5a, 0x8b, 0x64, 0xe1, 0xb, 0xe1, 0x4f, 0x50, 0x3a, 0x2, 0x20, 0x30, 0x4e, 0x52, 0x73, 0xc3, 0xd3, 0x70, 0x96, 0xeb, 0x76, 0x67, 0x29, 0xf7, 0xc7, 0x91, 0xe, 0x4, 0x21, 0x7e, 0x48, 0xad, 0x17, 0xa2, 0xe6, 0x4e, 0xe2, 0x34, 0x2, 0x14, 0xb5, 0x8d, 0x60, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xef9938cccfcc37027376c1528c0b0ad6u128, 0xd801b2f08e02d1f4c218834530ebc9b9u128),U256::new(0x61f818bb6bc031b7ef3ebdd697bffc02u128, 0x47617753d1ababbfb6a4ba60941fb65eu128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xef, 0x99, 0x38, 0xcc, 0xcf, 0xcc, 0x37, 0x2, 0x73, 0x76, 0xc1, 0x52, 0x8c, 0xb, 0xa, 0xd6, 0xd8, 0x1, 0xb2, 0xf0, 0x8e, 0x2, 0xd1, 0xf4, 0xc2, 0x18, 0x83, 0x45, 0x30, 0xeb, 0xc9, 0xb9, 0x2, 0x20, 0x61, 0xf8, 0x18, 0xbb, 0x6b, 0xc0, 0x31, 0xb7, 0xef, 0x3e, 0xbd, 0xd6, 0x97, 0xbf, 0xfc, 0x2, 0x47, 0x61, 0x77, 0x53, 0xd1, 0xab, 0xab, 0xbf, 0xb6, 0xa4, 0xba, 0x60, 0x94, 0x1f, 0xb6, 0x5e, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xd4c7f6110f42431beaae916ba750ca97u128, 0x7c6765b1abf975a8ef86bacc04ff1917u128),U256::new(0x4eae929624f446d8d913571ecef77900u128, 0xa44b06b39fde70c1505eb42fadb7b591u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xd4, 0xc7, 0xf6, 0x11, 0xf, 0x42, 0x43, 0x1b, 0xea, 0xae, 0x91, 0x6b, 0xa7, 0x50, 0xca, 0x97, 0x7c, 0x67, 0x65, 0xb1, 0xab, 0xf9, 0x75, 0xa8, 0xef, 0x86, 0xba, 0xcc, 0x4, 0xff, 0x19, 0x17, 0x2, 0x20, 0x4e, 0xae, 0x92, 0x96, 0x24, 0xf4, 0x46, 0xd8, 0xd9, 0x13, 0x57, 0x1e, 0xce, 0xf7, 0x79, 0x0, 0xa4, 0x4b, 0x6, 0xb3, 0x9f, 0xde, 0x70, 0xc1, 0x50, 0x5e, 0xb4, 0x2f, 0xad, 0xb7, 0xb5, 0x91, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x78a738bfba3a65484fe1fec7103d3b6cu128, 0x312fcb39cb425a14da90ae7809f3da95u128),U256::new(0xb80fe096a0fd586ece07cbbf438ad23bu128, 0xa0f313e6bc5f91e1ef1be38c0afc8336u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x78, 0xa7, 0x38, 0xbf, 0xba, 0x3a, 0x65, 0x48, 0x4f, 0xe1, 0xfe, 0xc7, 0x10, 0x3d, 0x3b, 0x6c, 0x31, 0x2f, 0xcb, 0x39, 0xcb, 0x42, 0x5a, 0x14, 0xda, 0x90, 0xae, 0x78, 0x9, 0xf3, 0xda, 0x95, 0x2, 0x21, 0x0, 0xb8, 0xf, 0xe0, 0x96, 0xa0, 0xfd, 0x58, 0x6e, 0xce, 0x7, 0xcb, 0xbf, 0x43, 0x8a, 0xd2, 0x3b, 0xa0, 0xf3, 0x13, 0xe6, 0xbc, 0x5f, 0x91, 0xe1, 0xef, 0x1b, 0xe3, 0x8c, 0xa, 0xfc, 0x83, 0x36, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x50827b0c031f3d188ef4ad2ee14c5e42u128, 0x5c93118bee4b83e3fd58aaa4b0dd1c2eu128),U256::new(0xb46bdb5e41235db59d7dcad3a1bfc698u128, 0xa62e7a0999b4cfd0da8708f3e047405bu128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x50, 0x82, 0x7b, 0xc, 0x3, 0x1f, 0x3d, 0x18, 0x8e, 0xf4, 0xad, 0x2e, 0xe1, 0x4c, 0x5e, 0x42, 0x5c, 0x93, 0x11, 0x8b, 0xee, 0x4b, 0x83, 0xe3, 0xfd, 0x58, 0xaa, 0xa4, 0xb0, 0xdd, 0x1c, 0x2e, 0x2, 0x21, 0x0, 0xb4, 0x6b, 0xdb, 0x5e, 0x41, 0x23, 0x5d, 0xb5, 0x9d, 0x7d, 0xca, 0xd3, 0xa1, 0xbf, 0xc6, 0x98, 0xa6, 0x2e, 0x7a, 0x9, 0x99, 0xb4, 0xcf, 0xd0, 0xda, 0x87, 0x8, 0xf3, 0xe0, 0x47, 0x40, 0x5b, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x101c719531a669eb370628223957dca5u128, 0xe1d36a2d75ab1e002574c40c0c0a5768u128),U256::new(0xb6e4447f1b72f4ba0bca9f588b44db93u128, 0x9508178cd6ed3136d7883b51383cf17au128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x10, 0x1c, 0x71, 0x95, 0x31, 0xa6, 0x69, 0xeb, 0x37, 0x6, 0x28, 0x22, 0x39, 0x57, 0xdc, 0xa5, 0xe1, 0xd3, 0x6a, 0x2d, 0x75, 0xab, 0x1e, 0x0, 0x25, 0x74, 0xc4, 0xc, 0xc, 0xa, 0x57, 0x68, 0x2, 0x21, 0x0, 0xb6, 0xe4, 0x44, 0x7f, 0x1b, 0x72, 0xf4, 0xba, 0xb, 0xca, 0x9f, 0x58, 0x8b, 0x44, 0xdb, 0x93, 0x95, 0x8, 0x17, 0x8c, 0xd6, 0xed, 0x31, 0x36, 0xd7, 0x88, 0x3b, 0x51, 0x38, 0x3c, 0xf1, 0x7a, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x7f7b55708ff780bc13c9d2ac747ae3fcu128, 0xa6c6bff642a5c30f9ef41963991df424u128),U256::new(0xf72d7af4be8558d7133b54d448fabdb6u128, 0xff541eede68203f749298f95742d939du128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x7f, 0x7b, 0x55, 0x70, 0x8f, 0xf7, 0x80, 0xbc, 0x13, 0xc9, 0xd2, 0xac, 0x74, 0x7a, 0xe3, 0xfc, 0xa6, 0xc6, 0xbf, 0xf6, 0x42, 0xa5, 0xc3, 0xf, 0x9e, 0xf4, 0x19, 0x63, 0x99, 0x1d, 0xf4, 0x24, 0x2, 0x21, 0x0, 0xf7, 0x2d, 0x7a, 0xf4, 0xbe, 0x85, 0x58, 0xd7, 0x13, 0x3b, 0x54, 0xd4, 0x48, 0xfa, 0xbd, 0xb6, 0xff, 0x54, 0x1e, 0xed, 0xe6, 0x82, 0x3, 0xf7, 0x49, 0x29, 0x8f, 0x95, 0x74, 0x2d, 0x93, 0x9d, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x34e0c9855e53317d5987b4d00ac2b3dcu128, 0x3ce7d03da29af9de98becc565402b291u128),U256::new(0x62c7f1f1ae3d343692b25d28fc954ec5u128, 0x5e4296e71353ce4d4b321d1594d1b7abu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x34, 0xe0, 0xc9, 0x85, 0x5e, 0x53, 0x31, 0x7d, 0x59, 0x87, 0xb4, 0xd0, 0xa, 0xc2, 0xb3, 0xdc, 0x3c, 0xe7, 0xd0, 0x3d, 0xa2, 0x9a, 0xf9, 0xde, 0x98, 0xbe, 0xcc, 0x56, 0x54, 0x2, 0xb2, 0x91, 0x2, 0x20, 0x62, 0xc7, 0xf1, 0xf1, 0xae, 0x3d, 0x34, 0x36, 0x92, 0xb2, 0x5d, 0x28, 0xfc, 0x95, 0x4e, 0xc5, 0x5e, 0x42, 0x96, 0xe7, 0x13, 0x53, 0xce, 0x4d, 0x4b, 0x32, 0x1d, 0x15, 0x94, 0xd1, 0xb7, 0xab, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x4ac2b0f1bb65e2bb75c005b0131ee6ddu128, 0x8a1070256317eb1eb3f9468a51779f50u128),U256::new(0x6dfa97995e4604e2f9dcf25d1aacb529u128, 0xb47dda801c3d2db14f7d2f6c7ac1869eu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x4a, 0xc2, 0xb0, 0xf1, 0xbb, 0x65, 0xe2, 0xbb, 0x75, 0xc0, 0x5, 0xb0, 0x13, 0x1e, 0xe6, 0xdd, 0x8a, 0x10, 0x70, 0x25, 0x63, 0x17, 0xeb, 0x1e, 0xb3, 0xf9, 0x46, 0x8a, 0x51, 0x77, 0x9f, 0x50, 0x2, 0x20, 0x6d, 0xfa, 0x97, 0x99, 0x5e, 0x46, 0x4, 0xe2, 0xf9, 0xdc, 0xf2, 0x5d, 0x1a, 0xac, 0xb5, 0x29, 0xb4, 0x7d, 0xda, 0x80, 0x1c, 0x3d, 0x2d, 0xb1, 0x4f, 0x7d, 0x2f, 0x6c, 0x7a, 0xc1, 0x86, 0x9e, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x16cf1c16a2b889cc160fc8905c154bbdu128, 0xd53cb2a9734d22e7d8186852a124a3c9u128),U256::new(0x8e6e94de4efdf2742541b0a5b0336b37u128, 0x7fa6a9b2839360d7f6da4205afb58ad7u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x16, 0xcf, 0x1c, 0x16, 0xa2, 0xb8, 0x89, 0xcc, 0x16, 0xf, 0xc8, 0x90, 0x5c, 0x15, 0x4b, 0xbd, 0xd5, 0x3c, 0xb2, 0xa9, 0x73, 0x4d, 0x22, 0xe7, 0xd8, 0x18, 0x68, 0x52, 0xa1, 0x24, 0xa3, 0xc9, 0x2, 0x21, 0x0, 0x8e, 0x6e, 0x94, 0xde, 0x4e, 0xfd, 0xf2, 0x74, 0x25, 0x41, 0xb0, 0xa5, 0xb0, 0x33, 0x6b, 0x37, 0x7f, 0xa6, 0xa9, 0xb2, 0x83, 0x93, 0x60, 0xd7, 0xf6, 0xda, 0x42, 0x5, 0xaf, 0xb5, 0x8a, 0xd7, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xd9130bf2bcf14f3de05367399a1e3f45u128, 0x50ad789bcff03844090ac8289e714fefu128),U256::new(0xad8fa627319c4cad758b87164bac2247u128, 0xf5e451b2d501c2040cd447d63cc3ddu128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xd9, 0x13, 0xb, 0xf2, 0xbc, 0xf1, 0x4f, 0x3d, 0xe0, 0x53, 0x67, 0x39, 0x9a, 0x1e, 0x3f, 0x45, 0x50, 0xad, 0x78, 0x9b, 0xcf, 0xf0, 0x38, 0x44, 0x9, 0xa, 0xc8, 0x28, 0x9e, 0x71, 0x4f, 0xef, 0x2, 0x21, 0x0, 0xad, 0x8f, 0xa6, 0x27, 0x31, 0x9c, 0x4c, 0xad, 0x75, 0x8b, 0x87, 0x16, 0x4b, 0xac, 0x22, 0x47, 0x0, 0xf5, 0xe4, 0x51, 0xb2, 0xd5, 0x1, 0xc2, 0x4, 0xc, 0xd4, 0x47, 0xd6, 0x3c, 0xc3, 0xdd].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x3e60e3fd5c7d48e614711b63f1060bdau128, 0x401e631c1f41d914e248502823122274u128),U256::new(0x3ea1d47c0c19de47c30ece76b8a1eaf1u128, 0x39348ea8af5f1b16e5769b5c2ee908b2u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x3e, 0x60, 0xe3, 0xfd, 0x5c, 0x7d, 0x48, 0xe6, 0x14, 0x71, 0x1b, 0x63, 0xf1, 0x6, 0xb, 0xda, 0x40, 0x1e, 0x63, 0x1c, 0x1f, 0x41, 0xd9, 0x14, 0xe2, 0x48, 0x50, 0x28, 0x23, 0x12, 0x22, 0x74, 0x2, 0x20, 0x3e, 0xa1, 0xd4, 0x7c, 0xc, 0x19, 0xde, 0x47, 0xc3, 0xe, 0xce, 0x76, 0xb8, 0xa1, 0xea, 0xf1, 0x39, 0x34, 0x8e, 0xa8, 0xaf, 0x5f, 0x1b, 0x16, 0xe5, 0x76, 0x9b, 0x5c, 0x2e, 0xe9, 0x8, 0xb2, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x64486de28eac54379912d83a19a73ccu128, 0xc2c92d5a4782731504f44b2fea4f9097u128),U256::new(0x4b40b0c03834b50e7331c1697a44e705u128, 0x77769d912c3053a5163a53ed247f3cebu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x6, 0x44, 0x86, 0xde, 0x28, 0xea, 0xc5, 0x43, 0x79, 0x91, 0x2d, 0x83, 0xa1, 0x9a, 0x73, 0xcc, 0xc2, 0xc9, 0x2d, 0x5a, 0x47, 0x82, 0x73, 0x15, 0x4, 0xf4, 0x4b, 0x2f, 0xea, 0x4f, 0x90, 0x97, 0x2, 0x20, 0x4b, 0x40, 0xb0, 0xc0, 0x38, 0x34, 0xb5, 0xe, 0x73, 0x31, 0xc1, 0x69, 0x7a, 0x44, 0xe7, 0x5, 0x77, 0x76, 0x9d, 0x91, 0x2c, 0x30, 0x53, 0xa5, 0x16, 0x3a, 0x53, 0xed, 0x24, 0x7f, 0x3c, 0xeb, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x6f3b3961c25479ce73cf30493a522451u128, 0x5c8b1423877ec935936fb318f3bbd00eu128),U256::new(0x5eabf8be49768ea11f7f988c7035a571u128, 0x20c71f01f597187eb05afdc74b055e21u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x6f, 0x3b, 0x39, 0x61, 0xc2, 0x54, 0x79, 0xce, 0x73, 0xcf, 0x30, 0x49, 0x3a, 0x52, 0x24, 0x51, 0x5c, 0x8b, 0x14, 0x23, 0x87, 0x7e, 0xc9, 0x35, 0x93, 0x6f, 0xb3, 0x18, 0xf3, 0xbb, 0xd0, 0xe, 0x2, 0x20, 0x5e, 0xab, 0xf8, 0xbe, 0x49, 0x76, 0x8e, 0xa1, 0x1f, 0x7f, 0x98, 0x8c, 0x70, 0x35, 0xa5, 0x71, 0x20, 0xc7, 0x1f, 0x1, 0xf5, 0x97, 0x18, 0x7e, 0xb0, 0x5a, 0xfd, 0xc7, 0x4b, 0x5, 0x5e, 0x21, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xe47a91f791f6f0ff8ccb3eb63965382u128, 0xdce45d4e4556cd74675763e00b213331u128),U256::new(0x833876599cb909d92da5bebb6ad07218u128, 0x6e58a619b90b0289825af35acb390974u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0xe, 0x47, 0xa9, 0x1f, 0x79, 0x1f, 0x6f, 0xf, 0xf8, 0xcc, 0xb3, 0xeb, 0x63, 0x96, 0x53, 0x82, 0xdc, 0xe4, 0x5d, 0x4e, 0x45, 0x56, 0xcd, 0x74, 0x67, 0x57, 0x63, 0xe0, 0xb, 0x21, 0x33, 0x31, 0x2, 0x21, 0x0, 0x83, 0x38, 0x76, 0x59, 0x9c, 0xb9, 0x9, 0xd9, 0x2d, 0xa5, 0xbe, 0xbb, 0x6a, 0xd0, 0x72, 0x18, 0x6e, 0x58, 0xa6, 0x19, 0xb9, 0xb, 0x2, 0x89, 0x82, 0x5a, 0xf3, 0x5a, 0xcb, 0x39, 0x9, 0x74, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x37b6beebbec2d50566756aff30a0b52du128, 0xdc85a70a8dce5c2979e5b58afdd75badu128),U256::new(0xf247e256193ec88b23a0979c0c38ced7u128, 0xfc2a9aed6f0174349933361f4d30b719u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x37, 0xb6, 0xbe, 0xeb, 0xbe, 0xc2, 0xd5, 0x5, 0x66, 0x75, 0x6a, 0xff, 0x30, 0xa0, 0xb5, 0x2d, 0xdc, 0x85, 0xa7, 0xa, 0x8d, 0xce, 0x5c, 0x29, 0x79, 0xe5, 0xb5, 0x8a, 0xfd, 0xd7, 0x5b, 0xad, 0x2, 0x21, 0x0, 0xf2, 0x47, 0xe2, 0x56, 0x19, 0x3e, 0xc8, 0x8b, 0x23, 0xa0, 0x97, 0x9c, 0xc, 0x38, 0xce, 0xd7, 0xfc, 0x2a, 0x9a, 0xed, 0x6f, 0x1, 0x74, 0x34, 0x99, 0x33, 0x36, 0x1f, 0x4d, 0x30, 0xb7, 0x19, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x7bc9be6768bf584b17aad58aab5fc5a2u128, 0xe382a4ca9c3c62cf7731f5ce9e7e2a6eu128),U256::new(0xbbaa8bacc790585f28c5f7bf9e2ada2eu128, 0x4d0596eb5af923d9378e7b32de390694u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x7b, 0xc9, 0xbe, 0x67, 0x68, 0xbf, 0x58, 0x4b, 0x17, 0xaa, 0xd5, 0x8a, 0xab, 0x5f, 0xc5, 0xa2, 0xe3, 0x82, 0xa4, 0xca, 0x9c, 0x3c, 0x62, 0xcf, 0x77, 0x31, 0xf5, 0xce, 0x9e, 0x7e, 0x2a, 0x6e, 0x2, 0x21, 0x0, 0xbb, 0xaa, 0x8b, 0xac, 0xc7, 0x90, 0x58, 0x5f, 0x28, 0xc5, 0xf7, 0xbf, 0x9e, 0x2a, 0xda, 0x2e, 0x4d, 0x5, 0x96, 0xeb, 0x5a, 0xf9, 0x23, 0xd9, 0x37, 0x8e, 0x7b, 0x32, 0xde, 0x39, 0x6, 0x94, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x89bfae7f5cda0c7a9d13b9bb5b586bc8u128, 0x611139b0125b46e07f5028264a0b031au128),U256::new(0x253a22a5a024059a597196d54096285bu128, 0x4931243a1ee2befc45473089ce78199du128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0x89, 0xbf, 0xae, 0x7f, 0x5c, 0xda, 0xc, 0x7a, 0x9d, 0x13, 0xb9, 0xbb, 0x5b, 0x58, 0x6b, 0xc8, 0x61, 0x11, 0x39, 0xb0, 0x12, 0x5b, 0x46, 0xe0, 0x7f, 0x50, 0x28, 0x26, 0x4a, 0xb, 0x3, 0x1a, 0x2, 0x20, 0x25, 0x3a, 0x22, 0xa5, 0xa0, 0x24, 0x5, 0x9a, 0x59, 0x71, 0x96, 0xd5, 0x40, 0x96, 0x28, 0x5b, 0x49, 0x31, 0x24, 0x3a, 0x1e, 0xe2, 0xbe, 0xfc, 0x45, 0x47, 0x30, 0x89, 0xce, 0x78, 0x19, 0x9d, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xc58dc045e0d78b2bebf02f8ccd50e7b9u128, 0x66f28a04fd8950354600133f174ad2b2u128),U256::new(0xe72c6e0dc632000bbe4fac3469b83d9u128, 0xd7c67a9cb926f3630c414d2ecb6c4335u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xc5, 0x8d, 0xc0, 0x45, 0xe0, 0xd7, 0x8b, 0x2b, 0xeb, 0xf0, 0x2f, 0x8c, 0xcd, 0x50, 0xe7, 0xb9, 0x66, 0xf2, 0x8a, 0x4, 0xfd, 0x89, 0x50, 0x35, 0x46, 0x0, 0x13, 0x3f, 0x17, 0x4a, 0xd2, 0xb2, 0x2, 0x20, 0xe, 0x72, 0xc6, 0xe0, 0xdc, 0x63, 0x20, 0x0, 0xbb, 0xe4, 0xfa, 0xc3, 0x46, 0x9b, 0x83, 0xd9, 0xd7, 0xc6, 0x7a, 0x9c, 0xb9, 0x26, 0xf3, 0x63, 0xc, 0x41, 0x4d, 0x2e, 0xcb, 0x6c, 0x43, 0x35, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x718bd0cd6aeb06f45607aed6831343c7u128, 0xcea5a71b3c0ac579007a5ba8dfafa9b2u128),U256::new(0x377db533de2680f20a4147f0b840ff95u128, 0x8fd47e4b3b8cf124af393e46a6c4e383u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x71, 0x8b, 0xd0, 0xcd, 0x6a, 0xeb, 0x6, 0xf4, 0x56, 0x7, 0xae, 0xd6, 0x83, 0x13, 0x43, 0xc7, 0xce, 0xa5, 0xa7, 0x1b, 0x3c, 0xa, 0xc5, 0x79, 0x0, 0x7a, 0x5b, 0xa8, 0xdf, 0xaf, 0xa9, 0xb2, 0x2, 0x20, 0x37, 0x7d, 0xb5, 0x33, 0xde, 0x26, 0x80, 0xf2, 0xa, 0x41, 0x47, 0xf0, 0xb8, 0x40, 0xff, 0x95, 0x8f, 0xd4, 0x7e, 0x4b, 0x3b, 0x8c, 0xf1, 0x24, 0xaf, 0x39, 0x3e, 0x46, 0xa6, 0xc4, 0xe3, 0x83, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x71dbf240597f10ae3f44d18b364a609du128, 0xb58876d991d8bf64f6a51c1080e42d7fu128),U256::new(0xa6cd961b61e546220fa58a6235f3a762u128, 0xb50d744d843972878aaff01e442d2f50u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x71, 0xdb, 0xf2, 0x40, 0x59, 0x7f, 0x10, 0xae, 0x3f, 0x44, 0xd1, 0x8b, 0x36, 0x4a, 0x60, 0x9d, 0xb5, 0x88, 0x76, 0xd9, 0x91, 0xd8, 0xbf, 0x64, 0xf6, 0xa5, 0x1c, 0x10, 0x80, 0xe4, 0x2d, 0x7f, 0x2, 0x21, 0x0, 0xa6, 0xcd, 0x96, 0x1b, 0x61, 0xe5, 0x46, 0x22, 0xf, 0xa5, 0x8a, 0x62, 0x35, 0xf3, 0xa7, 0x62, 0xb5, 0xd, 0x74, 0x4d, 0x84, 0x39, 0x72, 0x87, 0x8a, 0xaf, 0xf0, 0x1e, 0x44, 0x2d, 0x2f, 0x50, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x35a153992a28059e33c655748d00a0bbu128, 0x50ccaf8dd92348fdec82950ede6ad9fdu128),U256::new(0x885799b44f6d961e9c24f2785a11b257u128, 0x603ad00672f16b8565e67b05d8dad5fdu128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x35, 0xa1, 0x53, 0x99, 0x2a, 0x28, 0x5, 0x9e, 0x33, 0xc6, 0x55, 0x74, 0x8d, 0x0, 0xa0, 0xbb, 0x50, 0xcc, 0xaf, 0x8d, 0xd9, 0x23, 0x48, 0xfd, 0xec, 0x82, 0x95, 0xe, 0xde, 0x6a, 0xd9, 0xfd, 0x2, 0x21, 0x0, 0x88, 0x57, 0x99, 0xb4, 0x4f, 0x6d, 0x96, 0x1e, 0x9c, 0x24, 0xf2, 0x78, 0x5a, 0x11, 0xb2, 0x57, 0x60, 0x3a, 0xd0, 0x6, 0x72, 0xf1, 0x6b, 0x85, 0x65, 0xe6, 0x7b, 0x5, 0xd8, 0xda, 0xd5, 0xfd, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x996243fe4c55078f202ef6cdfb8c9f16u128, 0xde28f74245ada152203a86eae8faf3d4u128),U256::new(0x5846cac1e052698fb239732a2e5d24d6u128, 0xf59cdaee07ee5b918055e649886bf75au128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0x99, 0x62, 0x43, 0xfe, 0x4c, 0x55, 0x7, 0x8f, 0x20, 0x2e, 0xf6, 0xcd, 0xfb, 0x8c, 0x9f, 0x16, 0xde, 0x28, 0xf7, 0x42, 0x45, 0xad, 0xa1, 0x52, 0x20, 0x3a, 0x86, 0xea, 0xe8, 0xfa, 0xf3, 0xd4, 0x2, 0x20, 0x58, 0x46, 0xca, 0xc1, 0xe0, 0x52, 0x69, 0x8f, 0xb2, 0x39, 0x73, 0x2a, 0x2e, 0x5d, 0x24, 0xd6, 0xf5, 0x9c, 0xda, 0xee, 0x7, 0xee, 0x5b, 0x91, 0x80, 0x55, 0xe6, 0x49, 0x88, 0x6b, 0xf7, 0x5a, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xc956b651e059c7df11354c3bf18b2d53u128, 0xa09b29b0fcd4929dfb49bae5ab3c64fau128),U256::new(0x23a569b9162aa487c272ca49b739718du128, 0x3b9f599cb20be815fafa0bc23037a4abu128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xc9, 0x56, 0xb6, 0x51, 0xe0, 0x59, 0xc7, 0xdf, 0x11, 0x35, 0x4c, 0x3b, 0xf1, 0x8b, 0x2d, 0x53, 0xa0, 0x9b, 0x29, 0xb0, 0xfc, 0xd4, 0x92, 0x9d, 0xfb, 0x49, 0xba, 0xe5, 0xab, 0x3c, 0x64, 0xfa, 0x2, 0x20, 0x23, 0xa5, 0x69, 0xb9, 0x16, 0x2a, 0xa4, 0x87, 0xc2, 0x72, 0xca, 0x49, 0xb7, 0x39, 0x71, 0x8d, 0x3b, 0x9f, 0x59, 0x9c, 0xb2, 0xb, 0xe8, 0x15, 0xfa, 0xfa, 0xb, 0xc2, 0x30, 0x37, 0xa4, 0xab, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xe1706a972bc460581ceb3c7a6839f148u128, 0xcff48f71b39ae1e4dd9e85634589ddb1u128),U256::new(0x6c8204584fc346ae8839c520247f3294u128, 0x67b29df6b34e1b7403d93537070ad092u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xe1, 0x70, 0x6a, 0x97, 0x2b, 0xc4, 0x60, 0x58, 0x1c, 0xeb, 0x3c, 0x7a, 0x68, 0x39, 0xf1, 0x48, 0xcf, 0xf4, 0x8f, 0x71, 0xb3, 0x9a, 0xe1, 0xe4, 0xdd, 0x9e, 0x85, 0x63, 0x45, 0x89, 0xdd, 0xb1, 0x2, 0x20, 0x6c, 0x82, 0x4, 0x58, 0x4f, 0xc3, 0x46, 0xae, 0x88, 0x39, 0xc5, 0x20, 0x24, 0x7f, 0x32, 0x94, 0x67, 0xb2, 0x9d, 0xf6, 0xb3, 0x4e, 0x1b, 0x74, 0x3, 0xd9, 0x35, 0x37, 0x7, 0xa, 0xd0, 0x92, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xd487ce11cf7ff5221ab1cdf1415632edu128, 0x9d37eb9b2aa82ad9011372a735d607f5u128),U256::new(0x6e1a0c9b3442d4ec3f1d755dc6150ac7u128, 0x858bb4a15c1b20cb17ca86ed9da9b065u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xd4, 0x87, 0xce, 0x11, 0xcf, 0x7f, 0xf5, 0x22, 0x1a, 0xb1, 0xcd, 0xf1, 0x41, 0x56, 0x32, 0xed, 0x9d, 0x37, 0xeb, 0x9b, 0x2a, 0xa8, 0x2a, 0xd9, 0x1, 0x13, 0x72, 0xa7, 0x35, 0xd6, 0x7, 0xf5, 0x2, 0x20, 0x6e, 0x1a, 0xc, 0x9b, 0x34, 0x42, 0xd4, 0xec, 0x3f, 0x1d, 0x75, 0x5d, 0xc6, 0x15, 0xa, 0xc7, 0x85, 0x8b, 0xb4, 0xa1, 0x5c, 0x1b, 0x20, 0xcb, 0x17, 0xca, 0x86, 0xed, 0x9d, 0xa9, 0xb0, 0x65, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x97a3e098b68e0dd59927fb11a8a9bdb5u128, 0xe48dd1f29b88230494eca9125e09bf9au128),U256::new(0xc191c1120590585a4f9c6aa0e64f0d11u128, 0xcde2c3e975400f44a2506cda1c3fa59fu128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0x97, 0xa3, 0xe0, 0x98, 0xb6, 0x8e, 0xd, 0xd5, 0x99, 0x27, 0xfb, 0x11, 0xa8, 0xa9, 0xbd, 0xb5, 0xe4, 0x8d, 0xd1, 0xf2, 0x9b, 0x88, 0x23, 0x4, 0x94, 0xec, 0xa9, 0x12, 0x5e, 0x9, 0xbf, 0x9a, 0x2, 0x21, 0x0, 0xc1, 0x91, 0xc1, 0x12, 0x5, 0x90, 0x58, 0x5a, 0x4f, 0x9c, 0x6a, 0xa0, 0xe6, 0x4f, 0xd, 0x11, 0xcd, 0xe2, 0xc3, 0xe9, 0x75, 0x40, 0xf, 0x44, 0xa2, 0x50, 0x6c, 0xda, 0x1c, 0x3f, 0xa5, 0x9f].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x987eefd9b4262706b24b4c9a6527ad4du128, 0xac5e54a396255fb22eca3715982a2cfeu128),U256::new(0x95efd37a003177faa12db029a8d4c595u128, 0xf17bb1519928e3f37cf5c19d21772c61u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0x98, 0x7e, 0xef, 0xd9, 0xb4, 0x26, 0x27, 0x6, 0xb2, 0x4b, 0x4c, 0x9a, 0x65, 0x27, 0xad, 0x4d, 0xac, 0x5e, 0x54, 0xa3, 0x96, 0x25, 0x5f, 0xb2, 0x2e, 0xca, 0x37, 0x15, 0x98, 0x2a, 0x2c, 0xfe, 0x2, 0x21, 0x0, 0x95, 0xef, 0xd3, 0x7a, 0x0, 0x31, 0x77, 0xfa, 0xa1, 0x2d, 0xb0, 0x29, 0xa8, 0xd4, 0xc5, 0x95, 0xf1, 0x7b, 0xb1, 0x51, 0x99, 0x28, 0xe3, 0xf3, 0x7c, 0xf5, 0xc1, 0x9d, 0x21, 0x77, 0x2c, 0x61].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xdef911fbb09d4dc6fa05b0df68a66891u128, 0x90d83f051a09d724e5d3636e0b6c1bdfu128),U256::new(0x72e0c317490e348d719da12d8c9c5ae6u128, 0x53f936023e6d2bb0fcdedcd800db2979u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xde, 0xf9, 0x11, 0xfb, 0xb0, 0x9d, 0x4d, 0xc6, 0xfa, 0x5, 0xb0, 0xdf, 0x68, 0xa6, 0x68, 0x91, 0x90, 0xd8, 0x3f, 0x5, 0x1a, 0x9, 0xd7, 0x24, 0xe5, 0xd3, 0x63, 0x6e, 0xb, 0x6c, 0x1b, 0xdf, 0x2, 0x20, 0x72, 0xe0, 0xc3, 0x17, 0x49, 0xe, 0x34, 0x8d, 0x71, 0x9d, 0xa1, 0x2d, 0x8c, 0x9c, 0x5a, 0xe6, 0x53, 0xf9, 0x36, 0x2, 0x3e, 0x6d, 0x2b, 0xb0, 0xfc, 0xde, 0xdc, 0xd8, 0x0, 0xdb, 0x29, 0x79, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x540fd7d3d62b9d1c823fb8065d3ba9f1u128, 0x3c001536b401e2863955372e7c519f93u128),U256::new(0x2c84896adafa5a314ecec923bc4333b7u128, 0x698cbd26afeb1ddbbd33f1cae389663cu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x54, 0xf, 0xd7, 0xd3, 0xd6, 0x2b, 0x9d, 0x1c, 0x82, 0x3f, 0xb8, 0x6, 0x5d, 0x3b, 0xa9, 0xf1, 0x3c, 0x0, 0x15, 0x36, 0xb4, 0x1, 0xe2, 0x86, 0x39, 0x55, 0x37, 0x2e, 0x7c, 0x51, 0x9f, 0x93, 0x2, 0x20, 0x2c, 0x84, 0x89, 0x6a, 0xda, 0xfa, 0x5a, 0x31, 0x4e, 0xce, 0xc9, 0x23, 0xbc, 0x43, 0x33, 0xb7, 0x69, 0x8c, 0xbd, 0x26, 0xaf, 0xeb, 0x1d, 0xdb, 0xbd, 0x33, 0xf1, 0xca, 0xe3, 0x89, 0x66, 0x3c, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xcc336210decaa5f68d8c8c859429f47au128, 0x1d20ca4f1be2cb2fd0a0e086874b90bau128),U256::new(0xf5e6dd2cd539b7ebdf297b7e5f951539u128, 0x988365ea80d977bd2be62eead68ce8b9u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xcc, 0x33, 0x62, 0x10, 0xde, 0xca, 0xa5, 0xf6, 0x8d, 0x8c, 0x8c, 0x85, 0x94, 0x29, 0xf4, 0x7a, 0x1d, 0x20, 0xca, 0x4f, 0x1b, 0xe2, 0xcb, 0x2f, 0xd0, 0xa0, 0xe0, 0x86, 0x87, 0x4b, 0x90, 0xba, 0x2, 0x21, 0x0, 0xf5, 0xe6, 0xdd, 0x2c, 0xd5, 0x39, 0xb7, 0xeb, 0xdf, 0x29, 0x7b, 0x7e, 0x5f, 0x95, 0x15, 0x39, 0x98, 0x83, 0x65, 0xea, 0x80, 0xd9, 0x77, 0xbd, 0x2b, 0xe6, 0x2e, 0xea, 0xd6, 0x8c, 0xe8, 0xb9].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x2a2b5a3efdf273ed059655b974e48903u128, 0xfce1644bf963ed2d66f3727cd2a07ba5u128),U256::new(0x577aaf4df9d9750c0e503b48a7fbc21bu128, 0x7c609e405445eea21603b190fe6d4582u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x2a, 0x2b, 0x5a, 0x3e, 0xfd, 0xf2, 0x73, 0xed, 0x5, 0x96, 0x55, 0xb9, 0x74, 0xe4, 0x89, 0x3, 0xfc, 0xe1, 0x64, 0x4b, 0xf9, 0x63, 0xed, 0x2d, 0x66, 0xf3, 0x72, 0x7c, 0xd2, 0xa0, 0x7b, 0xa5, 0x2, 0x20, 0x57, 0x7a, 0xaf, 0x4d, 0xf9, 0xd9, 0x75, 0xc, 0xe, 0x50, 0x3b, 0x48, 0xa7, 0xfb, 0xc2, 0x1b, 0x7c, 0x60, 0x9e, 0x40, 0x54, 0x45, 0xee, 0xa2, 0x16, 0x3, 0xb1, 0x90, 0xfe, 0x6d, 0x45, 0x82, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x875ea31f017da7982dc4b822617531ecu128, 0x614997ec84fee4d9607c27ead68969c1u128),U256::new(0xb18f298e13aa6469c58ac27b1b60c482u128, 0x94527f446bbc82afbe06654a7b1c1877u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0x87, 0x5e, 0xa3, 0x1f, 0x1, 0x7d, 0xa7, 0x98, 0x2d, 0xc4, 0xb8, 0x22, 0x61, 0x75, 0x31, 0xec, 0x61, 0x49, 0x97, 0xec, 0x84, 0xfe, 0xe4, 0xd9, 0x60, 0x7c, 0x27, 0xea, 0xd6, 0x89, 0x69, 0xc1, 0x2, 0x21, 0x0, 0xb1, 0x8f, 0x29, 0x8e, 0x13, 0xaa, 0x64, 0x69, 0xc5, 0x8a, 0xc2, 0x7b, 0x1b, 0x60, 0xc4, 0x82, 0x94, 0x52, 0x7f, 0x44, 0x6b, 0xbc, 0x82, 0xaf, 0xbe, 0x6, 0x65, 0x4a, 0x7b, 0x1c, 0x18, 0x77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x8463988c14d3a6faed772e8b56bba7feu128, 0x3982879fc02418c2aa3f4f69bb85a865u128),U256::new(0x407f327060078528610dcb099c62e187u128, 0x930bb6c72e8eeb8ad251fb3d25e2d000u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0x84, 0x63, 0x98, 0x8c, 0x14, 0xd3, 0xa6, 0xfa, 0xed, 0x77, 0x2e, 0x8b, 0x56, 0xbb, 0xa7, 0xfe, 0x39, 0x82, 0x87, 0x9f, 0xc0, 0x24, 0x18, 0xc2, 0xaa, 0x3f, 0x4f, 0x69, 0xbb, 0x85, 0xa8, 0x65, 0x2, 0x20, 0x40, 0x7f, 0x32, 0x70, 0x60, 0x7, 0x85, 0x28, 0x61, 0xd, 0xcb, 0x9, 0x9c, 0x62, 0xe1, 0x87, 0x93, 0xb, 0xb6, 0xc7, 0x2e, 0x8e, 0xeb, 0x8a, 0xd2, 0x51, 0xfb, 0x3d, 0x25, 0xe2, 0xd0, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x4c87325b234e19a85d644b08d32566fdu128, 0x27ab58a9ba865e61b6ef4dcc1388ee4cu128),U256::new(0x2fbcec99119f8b7aefd6521c29e6f0f0u128, 0x99c5021c11496e12c1f8cd7bf2fc60dcu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x4c, 0x87, 0x32, 0x5b, 0x23, 0x4e, 0x19, 0xa8, 0x5d, 0x64, 0x4b, 0x8, 0xd3, 0x25, 0x66, 0xfd, 0x27, 0xab, 0x58, 0xa9, 0xba, 0x86, 0x5e, 0x61, 0xb6, 0xef, 0x4d, 0xcc, 0x13, 0x88, 0xee, 0x4c, 0x2, 0x20, 0x2f, 0xbc, 0xec, 0x99, 0x11, 0x9f, 0x8b, 0x7a, 0xef, 0xd6, 0x52, 0x1c, 0x29, 0xe6, 0xf0, 0xf0, 0x99, 0xc5, 0x2, 0x1c, 0x11, 0x49, 0x6e, 0x12, 0xc1, 0xf8, 0xcd, 0x7b, 0xf2, 0xfc, 0x60, 0xdc, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xe4d45cefc54174fcb7994d9d29dbc82au128, 0xf2ee3a18da5f1934ce367d6bca895e87u128),U256::new(0x3ada5866167a2e94b080c2ecccb9180u128, 0x6ffc6f90d5b3106dfb571ec82a77b3fbu128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xe4, 0xd4, 0x5c, 0xef, 0xc5, 0x41, 0x74, 0xfc, 0xb7, 0x99, 0x4d, 0x9d, 0x29, 0xdb, 0xc8, 0x2a, 0xf2, 0xee, 0x3a, 0x18, 0xda, 0x5f, 0x19, 0x34, 0xce, 0x36, 0x7d, 0x6b, 0xca, 0x89, 0x5e, 0x87, 0x2, 0x20, 0x3, 0xad, 0xa5, 0x86, 0x61, 0x67, 0xa2, 0xe9, 0x4b, 0x8, 0xc, 0x2e, 0xcc, 0xcb, 0x91, 0x80, 0x6f, 0xfc, 0x6f, 0x90, 0xd5, 0xb3, 0x10, 0x6d, 0xfb, 0x57, 0x1e, 0xc8, 0x2a, 0x77, 0xb3, 0xfb, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x33729edb9f63db6407f5ad95e51b87c1u128, 0x8d29673c461d9bb4d6cf01fa7f57bb53u128),U256::new(0xee5aebb7fe56f1a8d5ea3acf9a6b94f5u128, 0xdcad7fed81044bc77a79772f3ad43f9au128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x33, 0x72, 0x9e, 0xdb, 0x9f, 0x63, 0xdb, 0x64, 0x7, 0xf5, 0xad, 0x95, 0xe5, 0x1b, 0x87, 0xc1, 0x8d, 0x29, 0x67, 0x3c, 0x46, 0x1d, 0x9b, 0xb4, 0xd6, 0xcf, 0x1, 0xfa, 0x7f, 0x57, 0xbb, 0x53, 0x2, 0x21, 0x0, 0xee, 0x5a, 0xeb, 0xb7, 0xfe, 0x56, 0xf1, 0xa8, 0xd5, 0xea, 0x3a, 0xcf, 0x9a, 0x6b, 0x94, 0xf5, 0xdc, 0xad, 0x7f, 0xed, 0x81, 0x4, 0x4b, 0xc7, 0x7a, 0x79, 0x77, 0x2f, 0x3a, 0xd4, 0x3f, 0x9a, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x8e350ab999f0e3c0afa0a8266ce734a9u128, 0x4871ec1b8a2e1f89040eb4c80daa6187u128),U256::new(0x55dc01e4544e8bd672f8ad7cc68ace44u128, 0xce5619bec22f6cf15f28350a7b5b0f61u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0x8e, 0x35, 0xa, 0xb9, 0x99, 0xf0, 0xe3, 0xc0, 0xaf, 0xa0, 0xa8, 0x26, 0x6c, 0xe7, 0x34, 0xa9, 0x48, 0x71, 0xec, 0x1b, 0x8a, 0x2e, 0x1f, 0x89, 0x4, 0xe, 0xb4, 0xc8, 0xd, 0xaa, 0x61, 0x87, 0x2, 0x20, 0x55, 0xdc, 0x1, 0xe4, 0x54, 0x4e, 0x8b, 0xd6, 0x72, 0xf8, 0xad, 0x7c, 0xc6, 0x8a, 0xce, 0x44, 0xce, 0x56, 0x19, 0xbe, 0xc2, 0x2f, 0x6c, 0xf1, 0x5f, 0x28, 0x35, 0xa, 0x7b, 0x5b, 0xf, 0x61, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x7f310d3bafd5a5d1d4ea5ac5dada1292u128, 0x55d3a68081e43c5734a72ca5bc34fdfcu128),U256::new(0x6bcd7845af00f8e2034c92f71b9638b4u128, 0x7d76729cab6ffc481226f2bbc00345dbu128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x7f, 0x31, 0xd, 0x3b, 0xaf, 0xd5, 0xa5, 0xd1, 0xd4, 0xea, 0x5a, 0xc5, 0xda, 0xda, 0x12, 0x92, 0x55, 0xd3, 0xa6, 0x80, 0x81, 0xe4, 0x3c, 0x57, 0x34, 0xa7, 0x2c, 0xa5, 0xbc, 0x34, 0xfd, 0xfc, 0x2, 0x20, 0x6b, 0xcd, 0x78, 0x45, 0xaf, 0x0, 0xf8, 0xe2, 0x3, 0x4c, 0x92, 0xf7, 0x1b, 0x96, 0x38, 0xb4, 0x7d, 0x76, 0x72, 0x9c, 0xab, 0x6f, 0xfc, 0x48, 0x12, 0x26, 0xf2, 0xbb, 0xc0, 0x3, 0x45, 0xdb, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x823ff751508380f7d5264e9f922c18ecu128, 0xcce7aa2ddb0ecf6028432c4332c7fef6u128),U256::new(0x52275883933e863ccdb56958a6492c3eu128, 0xe78d6553db1af71fd1a1abcd903c900fu128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0x82, 0x3f, 0xf7, 0x51, 0x50, 0x83, 0x80, 0xf7, 0xd5, 0x26, 0x4e, 0x9f, 0x92, 0x2c, 0x18, 0xec, 0xcc, 0xe7, 0xaa, 0x2d, 0xdb, 0xe, 0xcf, 0x60, 0x28, 0x43, 0x2c, 0x43, 0x32, 0xc7, 0xfe, 0xf6, 0x2, 0x20, 0x52, 0x27, 0x58, 0x83, 0x93, 0x3e, 0x86, 0x3c, 0xcd, 0xb5, 0x69, 0x58, 0xa6, 0x49, 0x2c, 0x3e, 0xe7, 0x8d, 0x65, 0x53, 0xdb, 0x1a, 0xf7, 0x1f, 0xd1, 0xa1, 0xab, 0xcd, 0x90, 0x3c, 0x90, 0xf, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xb685d29b36012c4409d5cce29a8c858du128, 0x29b3439e6099240aa5fe94b9ae59582du128),U256::new(0x33b2bc7acda007928b6481e7afe4ddb2u128, 0x46e4d3d617f4a6419b4b4947b875e8e1u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xb6, 0x85, 0xd2, 0x9b, 0x36, 0x1, 0x2c, 0x44, 0x9, 0xd5, 0xcc, 0xe2, 0x9a, 0x8c, 0x85, 0x8d, 0x29, 0xb3, 0x43, 0x9e, 0x60, 0x99, 0x24, 0xa, 0xa5, 0xfe, 0x94, 0xb9, 0xae, 0x59, 0x58, 0x2d, 0x2, 0x20, 0x33, 0xb2, 0xbc, 0x7a, 0xcd, 0xa0, 0x7, 0x92, 0x8b, 0x64, 0x81, 0xe7, 0xaf, 0xe4, 0xdd, 0xb2, 0x46, 0xe4, 0xd3, 0xd6, 0x17, 0xf4, 0xa6, 0x41, 0x9b, 0x4b, 0x49, 0x47, 0xb8, 0x75, 0xe8, 0xe1, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xac6b6d609f1a24ab32eb936d69070306u128, 0x6bea116f9c9f964cff339cd920798dc6u128),U256::new(0x74b706b98e0e561bb5619653e7a80367u128, 0xd7b3b9cea3f93ea8208bb17ffe57d6c8u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xac, 0x6b, 0x6d, 0x60, 0x9f, 0x1a, 0x24, 0xab, 0x32, 0xeb, 0x93, 0x6d, 0x69, 0x7, 0x3, 0x6, 0x6b, 0xea, 0x11, 0x6f, 0x9c, 0x9f, 0x96, 0x4c, 0xff, 0x33, 0x9c, 0xd9, 0x20, 0x79, 0x8d, 0xc6, 0x2, 0x20, 0x74, 0xb7, 0x6, 0xb9, 0x8e, 0xe, 0x56, 0x1b, 0xb5, 0x61, 0x96, 0x53, 0xe7, 0xa8, 0x3, 0x67, 0xd7, 0xb3, 0xb9, 0xce, 0xa3, 0xf9, 0x3e, 0xa8, 0x20, 0x8b, 0xb1, 0x7f, 0xfe, 0x57, 0xd6, 0xc8, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x314fab2689e15ac9e8ffbffad4d32138u128, 0xe528c73ff28c759b4aacb576d07ad512u128),U256::new(0x8ae6e73475f608c26d1fb304bebde896u128, 0x2c82574394e13f5990f2726f6bedbd49u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x31, 0x4f, 0xab, 0x26, 0x89, 0xe1, 0x5a, 0xc9, 0xe8, 0xff, 0xbf, 0xfa, 0xd4, 0xd3, 0x21, 0x38, 0xe5, 0x28, 0xc7, 0x3f, 0xf2, 0x8c, 0x75, 0x9b, 0x4a, 0xac, 0xb5, 0x76, 0xd0, 0x7a, 0xd5, 0x12, 0x2, 0x21, 0x0, 0x8a, 0xe6, 0xe7, 0x34, 0x75, 0xf6, 0x8, 0xc2, 0x6d, 0x1f, 0xb3, 0x4, 0xbe, 0xbd, 0xe8, 0x96, 0x2c, 0x82, 0x57, 0x43, 0x94, 0xe1, 0x3f, 0x59, 0x90, 0xf2, 0x72, 0x6f, 0x6b, 0xed, 0xbd, 0x49, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xeec229aa5045a5f838f6dfdd786164eau128, 0xc1f3a7b3cf4066e8d10a27bde365b3eau128),U256::new(0xe5961777499f8a499d5a3f803611918du128, 0x8f1642e9d86f68c38d71671dd52df322u128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xee, 0xc2, 0x29, 0xaa, 0x50, 0x45, 0xa5, 0xf8, 0x38, 0xf6, 0xdf, 0xdd, 0x78, 0x61, 0x64, 0xea, 0xc1, 0xf3, 0xa7, 0xb3, 0xcf, 0x40, 0x66, 0xe8, 0xd1, 0xa, 0x27, 0xbd, 0xe3, 0x65, 0xb3, 0xea, 0x2, 0x21, 0x0, 0xe5, 0x96, 0x17, 0x77, 0x49, 0x9f, 0x8a, 0x49, 0x9d, 0x5a, 0x3f, 0x80, 0x36, 0x11, 0x91, 0x8d, 0x8f, 0x16, 0x42, 0xe9, 0xd8, 0x6f, 0x68, 0xc3, 0x8d, 0x71, 0x67, 0x1d, 0xd5, 0x2d, 0xf3, 0x22].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xbc18fc8c40d55632d44e7fcc7ccb81adu128, 0x6c640bd1e12b5f49e7a7c348c50f00u128),U256::new(0xf2ec3adf4d0dc0a3f70edfb27646ca9eu128, 0x7154ed6eed5197e6890ae6494bb163dau128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xbc, 0x18, 0xfc, 0x8c, 0x40, 0xd5, 0x56, 0x32, 0xd4, 0x4e, 0x7f, 0xcc, 0x7c, 0xcb, 0x81, 0xad, 0x0, 0x6c, 0x64, 0xb, 0xd1, 0xe1, 0x2b, 0x5f, 0x49, 0xe7, 0xa7, 0xc3, 0x48, 0xc5, 0xf, 0x0, 0x2, 0x21, 0x0, 0xf2, 0xec, 0x3a, 0xdf, 0x4d, 0xd, 0xc0, 0xa3, 0xf7, 0xe, 0xdf, 0xb2, 0x76, 0x46, 0xca, 0x9e, 0x71, 0x54, 0xed, 0x6e, 0xed, 0x51, 0x97, 0xe6, 0x89, 0xa, 0xe6, 0x49, 0x4b, 0xb1, 0x63, 0xda].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x5ea56158a92828a78b28505f5af5569bu128, 0x1c0ddc5b97cb4e92fbddc50abb399feu128),U256::new(0xf37ec0b24b2c8885f852239c48420a8du128, 0xe1d9b13571acca70b6466a3e5d223ceu128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x5e, 0xa5, 0x61, 0x58, 0xa9, 0x28, 0x28, 0xa7, 0x8b, 0x28, 0x50, 0x5f, 0x5a, 0xf5, 0x56, 0x9b, 0x1, 0xc0, 0xdd, 0xc5, 0xb9, 0x7c, 0xb4, 0xe9, 0x2f, 0xbd, 0xdc, 0x50, 0xab, 0xb3, 0x99, 0xfe, 0x2, 0x21, 0x0, 0xf3, 0x7e, 0xc0, 0xb2, 0x4b, 0x2c, 0x88, 0x85, 0xf8, 0x52, 0x23, 0x9c, 0x48, 0x42, 0xa, 0x8d, 0xe, 0x1d, 0x9b, 0x13, 0x57, 0x1a, 0xcc, 0xa7, 0xb, 0x64, 0x66, 0xa3, 0xe5, 0xd2, 0x23, 0xce, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x10c73446d0bb01c796e0be239133c6a1u128, 0x98d6aea9abba3eff91285b8c91a955cau128),U256::new(0xb8f79de88183de90b713a35118fc1136u128, 0xdee924b3148aba911e4a4159486427afu128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x10, 0xc7, 0x34, 0x46, 0xd0, 0xbb, 0x1, 0xc7, 0x96, 0xe0, 0xbe, 0x23, 0x91, 0x33, 0xc6, 0xa1, 0x98, 0xd6, 0xae, 0xa9, 0xab, 0xba, 0x3e, 0xff, 0x91, 0x28, 0x5b, 0x8c, 0x91, 0xa9, 0x55, 0xca, 0x2, 0x21, 0x0, 0xb8, 0xf7, 0x9d, 0xe8, 0x81, 0x83, 0xde, 0x90, 0xb7, 0x13, 0xa3, 0x51, 0x18, 0xfc, 0x11, 0x36, 0xde, 0xe9, 0x24, 0xb3, 0x14, 0x8a, 0xba, 0x91, 0x1e, 0x4a, 0x41, 0x59, 0x48, 0x64, 0x27, 0xaf, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x3fb878294853fa8bd3e4e283257a8591u128, 0xaefed8b630b728d006f5cc13db696df9u128),U256::new(0xfce2dc672c3dc6b93e799ace2fc5aacdu128, 0x6b732fac5e9fc575c1ba2b7f86a7a6e6u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x3f, 0xb8, 0x78, 0x29, 0x48, 0x53, 0xfa, 0x8b, 0xd3, 0xe4, 0xe2, 0x83, 0x25, 0x7a, 0x85, 0x91, 0xae, 0xfe, 0xd8, 0xb6, 0x30, 0xb7, 0x28, 0xd0, 0x6, 0xf5, 0xcc, 0x13, 0xdb, 0x69, 0x6d, 0xf9, 0x2, 0x21, 0x0, 0xfc, 0xe2, 0xdc, 0x67, 0x2c, 0x3d, 0xc6, 0xb9, 0x3e, 0x79, 0x9a, 0xce, 0x2f, 0xc5, 0xaa, 0xcd, 0x6b, 0x73, 0x2f, 0xac, 0x5e, 0x9f, 0xc5, 0x75, 0xc1, 0xba, 0x2b, 0x7f, 0x86, 0xa7, 0xa6, 0xe6, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x6893d40d8a6fb64a0bba7a1f0906e07fu128, 0xfeac5759a927e71cc1a63f5ae8810609u128),U256::new(0x1d07a078eb43345f7af80192305f70a8u128, 0x25be4f1809379993ccdc7bdc9bf709b5u128))).0.iter().zip([0x30, 0x44, 0x2, 0x20, 0x68, 0x93, 0xd4, 0xd, 0x8a, 0x6f, 0xb6, 0x4a, 0xb, 0xba, 0x7a, 0x1f, 0x9, 0x6, 0xe0, 0x7f, 0xfe, 0xac, 0x57, 0x59, 0xa9, 0x27, 0xe7, 0x1c, 0xc1, 0xa6, 0x3f, 0x5a, 0xe8, 0x81, 0x6, 0x9, 0x2, 0x20, 0x1d, 0x7, 0xa0, 0x78, 0xeb, 0x43, 0x34, 0x5f, 0x7a, 0xf8, 0x1, 0x92, 0x30, 0x5f, 0x70, 0xa8, 0x25, 0xbe, 0x4f, 0x18, 0x9, 0x37, 0x99, 0x93, 0xcc, 0xdc, 0x7b, 0xdc, 0x9b, 0xf7, 0x9, 0xb5, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x55b1b8992590fc9cc8278deae0036579u128, 0xbb7c3e9b89c45f5f2cc638b98d3ee25au128),U256::new(0x80fcbbd52d0f3dc7798afecf76aa38c4u128, 0xef0f66ba18085da796e35e2688a679f0u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x55, 0xb1, 0xb8, 0x99, 0x25, 0x90, 0xfc, 0x9c, 0xc8, 0x27, 0x8d, 0xea, 0xe0, 0x3, 0x65, 0x79, 0xbb, 0x7c, 0x3e, 0x9b, 0x89, 0xc4, 0x5f, 0x5f, 0x2c, 0xc6, 0x38, 0xb9, 0x8d, 0x3e, 0xe2, 0x5a, 0x2, 0x21, 0x0, 0x80, 0xfc, 0xbb, 0xd5, 0x2d, 0xf, 0x3d, 0xc7, 0x79, 0x8a, 0xfe, 0xcf, 0x76, 0xaa, 0x38, 0xc4, 0xef, 0xf, 0x66, 0xba, 0x18, 0x8, 0x5d, 0xa7, 0x96, 0xe3, 0x5e, 0x26, 0x88, 0xa6, 0x79, 0xf0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xbbf084b6efade5a6d11d4dc8783f4df0u128, 0x7f38e44567f934970f5bb24d5ad5c5cdu128),U256::new(0x35e76b14eafaea923e2afaecadfee59du128, 0xed90fc67b0e9e70f37f3ac29acf6f615u128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0xbb, 0xf0, 0x84, 0xb6, 0xef, 0xad, 0xe5, 0xa6, 0xd1, 0x1d, 0x4d, 0xc8, 0x78, 0x3f, 0x4d, 0xf0, 0x7f, 0x38, 0xe4, 0x45, 0x67, 0xf9, 0x34, 0x97, 0xf, 0x5b, 0xb2, 0x4d, 0x5a, 0xd5, 0xc5, 0xcd, 0x2, 0x20, 0x35, 0xe7, 0x6b, 0x14, 0xea, 0xfa, 0xea, 0x92, 0x3e, 0x2a, 0xfa, 0xec, 0xad, 0xfe, 0xe5, 0x9d, 0xed, 0x90, 0xfc, 0x67, 0xb0, 0xe9, 0xe7, 0xf, 0x37, 0xf3, 0xac, 0x29, 0xac, 0xf6, 0xf6, 0x15, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x9f6defb1f322f0a84e6ae02dccaf46d3u128, 0xbb8509595f9be47a1d22e54f95c60b4du128),U256::new(0x3add3f21cb4598bbb44f4c283d345f56u128, 0xc0e1ed0cd7b098b7754d29b280e2654eu128))).0.iter().zip([0x30, 0x45, 0x2, 0x21, 0x0, 0x9f, 0x6d, 0xef, 0xb1, 0xf3, 0x22, 0xf0, 0xa8, 0x4e, 0x6a, 0xe0, 0x2d, 0xcc, 0xaf, 0x46, 0xd3, 0xbb, 0x85, 0x9, 0x59, 0x5f, 0x9b, 0xe4, 0x7a, 0x1d, 0x22, 0xe5, 0x4f, 0x95, 0xc6, 0xb, 0x4d, 0x2, 0x20, 0x3a, 0xdd, 0x3f, 0x21, 0xcb, 0x45, 0x98, 0xbb, 0xb4, 0x4f, 0x4c, 0x28, 0x3d, 0x34, 0x5f, 0x56, 0xc0, 0xe1, 0xed, 0xc, 0xd7, 0xb0, 0x98, 0xb7, 0x75, 0x4d, 0x29, 0xb2, 0x80, 0xe2, 0x65, 0x4e, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0xf5728708ffa7148ab51fb44d7c295112u128, 0x60b6cefe279e29fdfcac38526810e5aeu128),U256::new(0xe92ac0a791032e42fadc4e1319f89e6cu128, 0xa5a90846e24938b40155ad7588c4a42fu128))).0.iter().zip([0x30, 0x46, 0x2, 0x21, 0x0, 0xf5, 0x72, 0x87, 0x8, 0xff, 0xa7, 0x14, 0x8a, 0xb5, 0x1f, 0xb4, 0x4d, 0x7c, 0x29, 0x51, 0x12, 0x60, 0xb6, 0xce, 0xfe, 0x27, 0x9e, 0x29, 0xfd, 0xfc, 0xac, 0x38, 0x52, 0x68, 0x10, 0xe5, 0xae, 0x2, 0x21, 0x0, 0xe9, 0x2a, 0xc0, 0xa7, 0x91, 0x3, 0x2e, 0x42, 0xfa, 0xdc, 0x4e, 0x13, 0x19, 0xf8, 0x9e, 0x6c, 0xa5, 0xa9, 0x8, 0x46, 0xe2, 0x49, 0x38, 0xb4, 0x1, 0x55, 0xad, 0x75, 0x88, 0xc4, 0xa4, 0x2f].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::encode_der_signature((U256::new(0x4bcedfc9b88096ba571904c147acd01du128, 0xf9c790453b6fb1df33964cde04f7d60au128),U256::new(0xca0eb14364646b227cbe81048cb0c7a9u128, 0x5e87d651950ce8de07bff256d8a7852u128))).0.iter().zip([0x30, 0x45, 0x2, 0x20, 0x4b, 0xce, 0xdf, 0xc9, 0xb8, 0x80, 0x96, 0xba, 0x57, 0x19, 0x4, 0xc1, 0x47, 0xac, 0xd0, 0x1d, 0xf9, 0xc7, 0x90, 0x45, 0x3b, 0x6f, 0xb1, 0xdf, 0x33, 0x96, 0x4c, 0xde, 0x4, 0xf7, 0xd6, 0xa, 0x2, 0x21, 0x0, 0xca, 0xe, 0xb1, 0x43, 0x64, 0x64, 0x6b, 0x22, 0x7c, 0xbe, 0x81, 0x4, 0x8c, 0xb0, 0xc7, 0xa9, 0x5, 0xe8, 0x7d, 0x65, 0x19, 0x50, 0xce, 0x8d, 0xe0, 0x7b, 0xff, 0x25, 0x6d, 0x8a, 0x78, 0x52, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
    }

    #[test]
    fn u256_der_encode() {
        assert!(U256::new(0x98c701ba18cdc1446811230f44e507fu128, 0xff417ed6601c59626776faada58a5aa2u128).der_encode().0.iter().zip([0x2, 0x20, 0x9, 0x8c, 0x70, 0x1b, 0xa1, 0x8c, 0xdc, 0x14, 0x46, 0x81, 0x12, 0x30, 0xf4, 0x4e, 0x50, 0x7f, 0xff, 0x41, 0x7e, 0xd6, 0x60, 0x1c, 0x59, 0x62, 0x67, 0x76, 0xfa, 0xad, 0xa5, 0x8a, 0x5a, 0xa2, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb1679819a4998802fb7b40f5af16347fu128, 0xc4a1b215fb62284f075f5a9956acded2u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xb1, 0x67, 0x98, 0x19, 0xa4, 0x99, 0x88, 0x2, 0xfb, 0x7b, 0x40, 0xf5, 0xaf, 0x16, 0x34, 0x7f, 0xc4, 0xa1, 0xb2, 0x15, 0xfb, 0x62, 0x28, 0x4f, 0x7, 0x5f, 0x5a, 0x99, 0x56, 0xac, 0xde, 0xd2].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfd8a91a3b91cee79863630b31657aa71u128, 0x5a55705d5b72aff7510a440a471e496eu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xfd, 0x8a, 0x91, 0xa3, 0xb9, 0x1c, 0xee, 0x79, 0x86, 0x36, 0x30, 0xb3, 0x16, 0x57, 0xaa, 0x71, 0x5a, 0x55, 0x70, 0x5d, 0x5b, 0x72, 0xaf, 0xf7, 0x51, 0xa, 0x44, 0xa, 0x47, 0x1e, 0x49, 0x6e].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa486f517bb7d71185fb2da6fea555ff6u128, 0xf8a301b079bcf9afdbe4c20340abb8dbu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xa4, 0x86, 0xf5, 0x17, 0xbb, 0x7d, 0x71, 0x18, 0x5f, 0xb2, 0xda, 0x6f, 0xea, 0x55, 0x5f, 0xf6, 0xf8, 0xa3, 0x1, 0xb0, 0x79, 0xbc, 0xf9, 0xaf, 0xdb, 0xe4, 0xc2, 0x3, 0x40, 0xab, 0xb8, 0xdb].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcfbccd7dee51be88bbd1415929ea265eu128, 0x9d255b09e7943cd86ea4513e254b3854u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xcf, 0xbc, 0xcd, 0x7d, 0xee, 0x51, 0xbe, 0x88, 0xbb, 0xd1, 0x41, 0x59, 0x29, 0xea, 0x26, 0x5e, 0x9d, 0x25, 0x5b, 0x9, 0xe7, 0x94, 0x3c, 0xd8, 0x6e, 0xa4, 0x51, 0x3e, 0x25, 0x4b, 0x38, 0x54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2f5bd1d44a42f78bf9e6ce7053d5a5eau128, 0xf4f68c7dd371697bc4c6e7bafa0b8b94u128).der_encode().0.iter().zip([0x2, 0x20, 0x2f, 0x5b, 0xd1, 0xd4, 0x4a, 0x42, 0xf7, 0x8b, 0xf9, 0xe6, 0xce, 0x70, 0x53, 0xd5, 0xa5, 0xea, 0xf4, 0xf6, 0x8c, 0x7d, 0xd3, 0x71, 0x69, 0x7b, 0xc4, 0xc6, 0xe7, 0xba, 0xfa, 0xb, 0x8b, 0x94, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6ebd860ac9d8b538b6d74755eaaac834u128, 0x34f9f556431ff813432905e963a0db95u128).der_encode().0.iter().zip([0x2, 0x20, 0x6e, 0xbd, 0x86, 0xa, 0xc9, 0xd8, 0xb5, 0x38, 0xb6, 0xd7, 0x47, 0x55, 0xea, 0xaa, 0xc8, 0x34, 0x34, 0xf9, 0xf5, 0x56, 0x43, 0x1f, 0xf8, 0x13, 0x43, 0x29, 0x5, 0xe9, 0x63, 0xa0, 0xdb, 0x95, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8f70bcf4dc46438c0e87c17987fcdc60u128, 0x28e74cea305990b8506617079c50274au128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0x8f, 0x70, 0xbc, 0xf4, 0xdc, 0x46, 0x43, 0x8c, 0xe, 0x87, 0xc1, 0x79, 0x87, 0xfc, 0xdc, 0x60, 0x28, 0xe7, 0x4c, 0xea, 0x30, 0x59, 0x90, 0xb8, 0x50, 0x66, 0x17, 0x7, 0x9c, 0x50, 0x27, 0x4a].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x505496babd7d470315f72c05afb6f894u128, 0x8a6e615fe6ea4c0b3280656466dd1b1cu128).der_encode().0.iter().zip([0x2, 0x20, 0x50, 0x54, 0x96, 0xba, 0xbd, 0x7d, 0x47, 0x3, 0x15, 0xf7, 0x2c, 0x5, 0xaf, 0xb6, 0xf8, 0x94, 0x8a, 0x6e, 0x61, 0x5f, 0xe6, 0xea, 0x4c, 0xb, 0x32, 0x80, 0x65, 0x64, 0x66, 0xdd, 0x1b, 0x1c, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4a4b052509380a038613fdbf73cb4173u128, 0x3e9602a3cce50f4356608a300c1cb677u128).der_encode().0.iter().zip([0x2, 0x20, 0x4a, 0x4b, 0x5, 0x25, 0x9, 0x38, 0xa, 0x3, 0x86, 0x13, 0xfd, 0xbf, 0x73, 0xcb, 0x41, 0x73, 0x3e, 0x96, 0x2, 0xa3, 0xcc, 0xe5, 0xf, 0x43, 0x56, 0x60, 0x8a, 0x30, 0xc, 0x1c, 0xb6, 0x77, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1265a7387775248ac266f2ca57e22525u128, 0x9fe457bfa6bb3b659984dde7cdf763a6u128).der_encode().0.iter().zip([0x2, 0x20, 0x12, 0x65, 0xa7, 0x38, 0x77, 0x75, 0x24, 0x8a, 0xc2, 0x66, 0xf2, 0xca, 0x57, 0xe2, 0x25, 0x25, 0x9f, 0xe4, 0x57, 0xbf, 0xa6, 0xbb, 0x3b, 0x65, 0x99, 0x84, 0xdd, 0xe7, 0xcd, 0xf7, 0x63, 0xa6, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe3c1c0b2c7b2a4e39dbab03853b6e64cu128, 0x9d6fa271382ff57afef2a0eb350bd020u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xe3, 0xc1, 0xc0, 0xb2, 0xc7, 0xb2, 0xa4, 0xe3, 0x9d, 0xba, 0xb0, 0x38, 0x53, 0xb6, 0xe6, 0x4c, 0x9d, 0x6f, 0xa2, 0x71, 0x38, 0x2f, 0xf5, 0x7a, 0xfe, 0xf2, 0xa0, 0xeb, 0x35, 0xb, 0xd0, 0x20].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8386a37d04c1a478d66a3eac0a426093u128, 0xd34b122ddea8726a8d6a4f8ec5ec87bbu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0x83, 0x86, 0xa3, 0x7d, 0x4, 0xc1, 0xa4, 0x78, 0xd6, 0x6a, 0x3e, 0xac, 0xa, 0x42, 0x60, 0x93, 0xd3, 0x4b, 0x12, 0x2d, 0xde, 0xa8, 0x72, 0x6a, 0x8d, 0x6a, 0x4f, 0x8e, 0xc5, 0xec, 0x87, 0xbb].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x25f6c97b1de29cc8d34c801c9bbaafd8u128, 0xa14979738ba2c57af08a47c978428b22u128).der_encode().0.iter().zip([0x2, 0x20, 0x25, 0xf6, 0xc9, 0x7b, 0x1d, 0xe2, 0x9c, 0xc8, 0xd3, 0x4c, 0x80, 0x1c, 0x9b, 0xba, 0xaf, 0xd8, 0xa1, 0x49, 0x79, 0x73, 0x8b, 0xa2, 0xc5, 0x7a, 0xf0, 0x8a, 0x47, 0xc9, 0x78, 0x42, 0x8b, 0x22, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbea8974ebadd6e977d65bbdf553f2051u128, 0x9094a008c1eb85dbb7541dc96f835bceu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xbe, 0xa8, 0x97, 0x4e, 0xba, 0xdd, 0x6e, 0x97, 0x7d, 0x65, 0xbb, 0xdf, 0x55, 0x3f, 0x20, 0x51, 0x90, 0x94, 0xa0, 0x8, 0xc1, 0xeb, 0x85, 0xdb, 0xb7, 0x54, 0x1d, 0xc9, 0x6f, 0x83, 0x5b, 0xce].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf20a2a4a9ee708ba8b62b97c5cdba6dfu128, 0x1ae2e93e4e303bfdcae4d957dcd82d04u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xf2, 0xa, 0x2a, 0x4a, 0x9e, 0xe7, 0x8, 0xba, 0x8b, 0x62, 0xb9, 0x7c, 0x5c, 0xdb, 0xa6, 0xdf, 0x1a, 0xe2, 0xe9, 0x3e, 0x4e, 0x30, 0x3b, 0xfd, 0xca, 0xe4, 0xd9, 0x57, 0xdc, 0xd8, 0x2d, 0x4].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe4a2e20866f0155806fddd3d5c759839u128, 0x1f099f101d77ed56cdcb9aca0efcac97u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xe4, 0xa2, 0xe2, 0x8, 0x66, 0xf0, 0x15, 0x58, 0x6, 0xfd, 0xdd, 0x3d, 0x5c, 0x75, 0x98, 0x39, 0x1f, 0x9, 0x9f, 0x10, 0x1d, 0x77, 0xed, 0x56, 0xcd, 0xcb, 0x9a, 0xca, 0xe, 0xfc, 0xac, 0x97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbb5c29cda95f1c68f7b53211457f7586u128, 0x69c72c4f176a69e917dcc3096220329au128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xbb, 0x5c, 0x29, 0xcd, 0xa9, 0x5f, 0x1c, 0x68, 0xf7, 0xb5, 0x32, 0x11, 0x45, 0x7f, 0x75, 0x86, 0x69, 0xc7, 0x2c, 0x4f, 0x17, 0x6a, 0x69, 0xe9, 0x17, 0xdc, 0xc3, 0x9, 0x62, 0x20, 0x32, 0x9a].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xefd576f228dacd1c8f0312ee78e989ceu128, 0x1c42f3ecd80f8a662a999de18fd8b233u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xef, 0xd5, 0x76, 0xf2, 0x28, 0xda, 0xcd, 0x1c, 0x8f, 0x3, 0x12, 0xee, 0x78, 0xe9, 0x89, 0xce, 0x1c, 0x42, 0xf3, 0xec, 0xd8, 0xf, 0x8a, 0x66, 0x2a, 0x99, 0x9d, 0xe1, 0x8f, 0xd8, 0xb2, 0x33].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf63a3aa29817122324a399b58ac5482cu128, 0xb5f1c844b4defb5c6f83b00ab7ea6f87u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xf6, 0x3a, 0x3a, 0xa2, 0x98, 0x17, 0x12, 0x23, 0x24, 0xa3, 0x99, 0xb5, 0x8a, 0xc5, 0x48, 0x2c, 0xb5, 0xf1, 0xc8, 0x44, 0xb4, 0xde, 0xfb, 0x5c, 0x6f, 0x83, 0xb0, 0xa, 0xb7, 0xea, 0x6f, 0x87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1863e3022c3f88add30e5eaffcfc0f9eu128, 0x3f52cf20e9185f916fc83ac033eef751u128).der_encode().0.iter().zip([0x2, 0x20, 0x18, 0x63, 0xe3, 0x2, 0x2c, 0x3f, 0x88, 0xad, 0xd3, 0xe, 0x5e, 0xaf, 0xfc, 0xfc, 0xf, 0x9e, 0x3f, 0x52, 0xcf, 0x20, 0xe9, 0x18, 0x5f, 0x91, 0x6f, 0xc8, 0x3a, 0xc0, 0x33, 0xee, 0xf7, 0x51, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa7466ee23d874d31e833655417680de5u128, 0x5f42466c36708846db2baaea5694c9b3u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xa7, 0x46, 0x6e, 0xe2, 0x3d, 0x87, 0x4d, 0x31, 0xe8, 0x33, 0x65, 0x54, 0x17, 0x68, 0xd, 0xe5, 0x5f, 0x42, 0x46, 0x6c, 0x36, 0x70, 0x88, 0x46, 0xdb, 0x2b, 0xaa, 0xea, 0x56, 0x94, 0xc9, 0xb3].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x779b63a906982b51b78fada3d0f39bfau128, 0x507dbcbe757986d4779c771b70cd5da8u128).der_encode().0.iter().zip([0x2, 0x20, 0x77, 0x9b, 0x63, 0xa9, 0x6, 0x98, 0x2b, 0x51, 0xb7, 0x8f, 0xad, 0xa3, 0xd0, 0xf3, 0x9b, 0xfa, 0x50, 0x7d, 0xbc, 0xbe, 0x75, 0x79, 0x86, 0xd4, 0x77, 0x9c, 0x77, 0x1b, 0x70, 0xcd, 0x5d, 0xa8, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x97d539103c563862ca9d91a74eb23afdu128, 0xb674998cf1ea41b79b27d6191f6b6387u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0x97, 0xd5, 0x39, 0x10, 0x3c, 0x56, 0x38, 0x62, 0xca, 0x9d, 0x91, 0xa7, 0x4e, 0xb2, 0x3a, 0xfd, 0xb6, 0x74, 0x99, 0x8c, 0xf1, 0xea, 0x41, 0xb7, 0x9b, 0x27, 0xd6, 0x19, 0x1f, 0x6b, 0x63, 0x87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x79acfc39e19b37b5509cc3aa0e985du128, 0x4cfb579964077edf27dcf54b4f88a48cu128).der_encode().0.iter().zip([0x2, 0x1f, 0x79, 0xac, 0xfc, 0x39, 0xe1, 0x9b, 0x37, 0xb5, 0x50, 0x9c, 0xc3, 0xaa, 0xe, 0x98, 0x5d, 0x4c, 0xfb, 0x57, 0x99, 0x64, 0x7, 0x7e, 0xdf, 0x27, 0xdc, 0xf5, 0x4b, 0x4f, 0x88, 0xa4, 0x8c, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb7f915b59962a661f1287d2c7d5f067du128, 0x2bdda58a8e969a6c8adc237bd786816bu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xb7, 0xf9, 0x15, 0xb5, 0x99, 0x62, 0xa6, 0x61, 0xf1, 0x28, 0x7d, 0x2c, 0x7d, 0x5f, 0x6, 0x7d, 0x2b, 0xdd, 0xa5, 0x8a, 0x8e, 0x96, 0x9a, 0x6c, 0x8a, 0xdc, 0x23, 0x7b, 0xd7, 0x86, 0x81, 0x6b].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b13b8d8d5035f00a8933547fb58a911u128, 0xad0d0d7d09dddab1aae7ebad3cd0685au128).der_encode().0.iter().zip([0x2, 0x20, 0x5b, 0x13, 0xb8, 0xd8, 0xd5, 0x3, 0x5f, 0x0, 0xa8, 0x93, 0x35, 0x47, 0xfb, 0x58, 0xa9, 0x11, 0xad, 0xd, 0xd, 0x7d, 0x9, 0xdd, 0xda, 0xb1, 0xaa, 0xe7, 0xeb, 0xad, 0x3c, 0xd0, 0x68, 0x5a, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe4f040ad1ee36b212662989b40320868u128, 0x9e3add2a7c1e10f1429cd0888d150945u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xe4, 0xf0, 0x40, 0xad, 0x1e, 0xe3, 0x6b, 0x21, 0x26, 0x62, 0x98, 0x9b, 0x40, 0x32, 0x8, 0x68, 0x9e, 0x3a, 0xdd, 0x2a, 0x7c, 0x1e, 0x10, 0xf1, 0x42, 0x9c, 0xd0, 0x88, 0x8d, 0x15, 0x9, 0x45].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xff28c9c868e1cb015468a16e402a1613u128, 0x520af40c789c379ebebab3819c36d513u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xff, 0x28, 0xc9, 0xc8, 0x68, 0xe1, 0xcb, 0x1, 0x54, 0x68, 0xa1, 0x6e, 0x40, 0x2a, 0x16, 0x13, 0x52, 0xa, 0xf4, 0xc, 0x78, 0x9c, 0x37, 0x9e, 0xbe, 0xba, 0xb3, 0x81, 0x9c, 0x36, 0xd5, 0x13].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe560e354a5a80846e779645d4dd287fdu128, 0x304b881fb36f0d7c6e62951772bf22c2u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xe5, 0x60, 0xe3, 0x54, 0xa5, 0xa8, 0x8, 0x46, 0xe7, 0x79, 0x64, 0x5d, 0x4d, 0xd2, 0x87, 0xfd, 0x30, 0x4b, 0x88, 0x1f, 0xb3, 0x6f, 0xd, 0x7c, 0x6e, 0x62, 0x95, 0x17, 0x72, 0xbf, 0x22, 0xc2].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb28091a99ac3ea51d134cc6e067dd0bcu128, 0x23867442ab19ee02a4e64b900cb0e39bu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xb2, 0x80, 0x91, 0xa9, 0x9a, 0xc3, 0xea, 0x51, 0xd1, 0x34, 0xcc, 0x6e, 0x6, 0x7d, 0xd0, 0xbc, 0x23, 0x86, 0x74, 0x42, 0xab, 0x19, 0xee, 0x2, 0xa4, 0xe6, 0x4b, 0x90, 0xc, 0xb0, 0xe3, 0x9b].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfe379c57925f4fe1ce5fe4b7e8af4f92u128, 0xffa9e0d103e7bb6d90c93799d58b6b07u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xfe, 0x37, 0x9c, 0x57, 0x92, 0x5f, 0x4f, 0xe1, 0xce, 0x5f, 0xe4, 0xb7, 0xe8, 0xaf, 0x4f, 0x92, 0xff, 0xa9, 0xe0, 0xd1, 0x3, 0xe7, 0xbb, 0x6d, 0x90, 0xc9, 0x37, 0x99, 0xd5, 0x8b, 0x6b, 0x7].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbc176be007179411c7fd422e4c72c615u128, 0x80e4349597fb32cfbdeebfd7c7e68af1u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xbc, 0x17, 0x6b, 0xe0, 0x7, 0x17, 0x94, 0x11, 0xc7, 0xfd, 0x42, 0x2e, 0x4c, 0x72, 0xc6, 0x15, 0x80, 0xe4, 0x34, 0x95, 0x97, 0xfb, 0x32, 0xcf, 0xbd, 0xee, 0xbf, 0xd7, 0xc7, 0xe6, 0x8a, 0xf1].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe6e60d8d7d40c884fe83e23daab1231u128, 0x807be0496552d89a3c6b3c4c688a261fu128).der_encode().0.iter().zip([0x2, 0x20, 0xe, 0x6e, 0x60, 0xd8, 0xd7, 0xd4, 0xc, 0x88, 0x4f, 0xe8, 0x3e, 0x23, 0xda, 0xab, 0x12, 0x31, 0x80, 0x7b, 0xe0, 0x49, 0x65, 0x52, 0xd8, 0x9a, 0x3c, 0x6b, 0x3c, 0x4c, 0x68, 0x8a, 0x26, 0x1f, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcd135068d4c1d3129727e118ecdf917cu128, 0x904e0a54b245752866cfd20fbb50c17bu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xcd, 0x13, 0x50, 0x68, 0xd4, 0xc1, 0xd3, 0x12, 0x97, 0x27, 0xe1, 0x18, 0xec, 0xdf, 0x91, 0x7c, 0x90, 0x4e, 0xa, 0x54, 0xb2, 0x45, 0x75, 0x28, 0x66, 0xcf, 0xd2, 0xf, 0xbb, 0x50, 0xc1, 0x7b].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x44ab9f4c360e8e48e777eef5447c7d9du128, 0x3f45793db19618d10c664d06b6ae07du128).der_encode().0.iter().zip([0x2, 0x20, 0x44, 0xab, 0x9f, 0x4c, 0x36, 0xe, 0x8e, 0x48, 0xe7, 0x77, 0xee, 0xf5, 0x44, 0x7c, 0x7d, 0x9d, 0x3, 0xf4, 0x57, 0x93, 0xdb, 0x19, 0x61, 0x8d, 0x10, 0xc6, 0x64, 0xd0, 0x6b, 0x6a, 0xe0, 0x7d, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc0d629640671e0b1c2f203802de01d14u128, 0xed611b02335f82509d1c9ae41f86079bu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xc0, 0xd6, 0x29, 0x64, 0x6, 0x71, 0xe0, 0xb1, 0xc2, 0xf2, 0x3, 0x80, 0x2d, 0xe0, 0x1d, 0x14, 0xed, 0x61, 0x1b, 0x2, 0x33, 0x5f, 0x82, 0x50, 0x9d, 0x1c, 0x9a, 0xe4, 0x1f, 0x86, 0x7, 0x9b].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc9465d1a02501e6fb811e9bbe5f0a10eu128, 0xa2cbf1f5308863f0eba4374b1955653au128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xc9, 0x46, 0x5d, 0x1a, 0x2, 0x50, 0x1e, 0x6f, 0xb8, 0x11, 0xe9, 0xbb, 0xe5, 0xf0, 0xa1, 0xe, 0xa2, 0xcb, 0xf1, 0xf5, 0x30, 0x88, 0x63, 0xf0, 0xeb, 0xa4, 0x37, 0x4b, 0x19, 0x55, 0x65, 0x3a].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeb544749b1fd63ad080bb0109e41c949u128, 0x10fe7536fe6377c6a1f2d70b92593262u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xeb, 0x54, 0x47, 0x49, 0xb1, 0xfd, 0x63, 0xad, 0x8, 0xb, 0xb0, 0x10, 0x9e, 0x41, 0xc9, 0x49, 0x10, 0xfe, 0x75, 0x36, 0xfe, 0x63, 0x77, 0xc6, 0xa1, 0xf2, 0xd7, 0xb, 0x92, 0x59, 0x32, 0x62].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc27562066351907e92ca29b1b58f7d8cu128, 0x6c0c2dc23332d3c2ac4a22da5b18bd9u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xc2, 0x75, 0x62, 0x6, 0x63, 0x51, 0x90, 0x7e, 0x92, 0xca, 0x29, 0xb1, 0xb5, 0x8f, 0x7d, 0x8c, 0x6, 0xc0, 0xc2, 0xdc, 0x23, 0x33, 0x2d, 0x3c, 0x2a, 0xc4, 0xa2, 0x2d, 0xa5, 0xb1, 0x8b, 0xd9].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbc29bff29d2b3557eea1df116d46ca27u128, 0x9b681479414bbc7678e067e202a2da78u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xbc, 0x29, 0xbf, 0xf2, 0x9d, 0x2b, 0x35, 0x57, 0xee, 0xa1, 0xdf, 0x11, 0x6d, 0x46, 0xca, 0x27, 0x9b, 0x68, 0x14, 0x79, 0x41, 0x4b, 0xbc, 0x76, 0x78, 0xe0, 0x67, 0xe2, 0x2, 0xa2, 0xda, 0x78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4c1e641b89c6d0497b87471a241ed953u128, 0x2424011bdf47eb1b002739e538d7af69u128).der_encode().0.iter().zip([0x2, 0x20, 0x4c, 0x1e, 0x64, 0x1b, 0x89, 0xc6, 0xd0, 0x49, 0x7b, 0x87, 0x47, 0x1a, 0x24, 0x1e, 0xd9, 0x53, 0x24, 0x24, 0x1, 0x1b, 0xdf, 0x47, 0xeb, 0x1b, 0x0, 0x27, 0x39, 0xe5, 0x38, 0xd7, 0xaf, 0x69, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbb389cd4f00a091e927ee9aafdb97ad7u128, 0xc42a926c4a550b34029d2be7f78af5bdu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xbb, 0x38, 0x9c, 0xd4, 0xf0, 0xa, 0x9, 0x1e, 0x92, 0x7e, 0xe9, 0xaa, 0xfd, 0xb9, 0x7a, 0xd7, 0xc4, 0x2a, 0x92, 0x6c, 0x4a, 0x55, 0xb, 0x34, 0x2, 0x9d, 0x2b, 0xe7, 0xf7, 0x8a, 0xf5, 0xbd].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x60de4c9e9102a1684ccecee052ed5547u128, 0x8b2af3d757180824b8fd24d7d0196335u128).der_encode().0.iter().zip([0x2, 0x20, 0x60, 0xde, 0x4c, 0x9e, 0x91, 0x2, 0xa1, 0x68, 0x4c, 0xce, 0xce, 0xe0, 0x52, 0xed, 0x55, 0x47, 0x8b, 0x2a, 0xf3, 0xd7, 0x57, 0x18, 0x8, 0x24, 0xb8, 0xfd, 0x24, 0xd7, 0xd0, 0x19, 0x63, 0x35, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x553210bea4cef6066699296c4a5a101u128, 0xfd0cf73551fbade032807e7aef8031c6u128).der_encode().0.iter().zip([0x2, 0x20, 0x5, 0x53, 0x21, 0xb, 0xea, 0x4c, 0xef, 0x60, 0x66, 0x69, 0x92, 0x96, 0xc4, 0xa5, 0xa1, 0x1, 0xfd, 0xc, 0xf7, 0x35, 0x51, 0xfb, 0xad, 0xe0, 0x32, 0x80, 0x7e, 0x7a, 0xef, 0x80, 0x31, 0xc6, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5762aa9f0271388f9d1da7bc7075c268u128, 0x73c5c6f68c68dcab95b0c587dbdcacd0u128).der_encode().0.iter().zip([0x2, 0x20, 0x57, 0x62, 0xaa, 0x9f, 0x2, 0x71, 0x38, 0x8f, 0x9d, 0x1d, 0xa7, 0xbc, 0x70, 0x75, 0xc2, 0x68, 0x73, 0xc5, 0xc6, 0xf6, 0x8c, 0x68, 0xdc, 0xab, 0x95, 0xb0, 0xc5, 0x87, 0xdb, 0xdc, 0xac, 0xd0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa65833753da5ecec7654521f49a4a73au128, 0x87dae164f771968152f4a2bd0f4d0705u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xa6, 0x58, 0x33, 0x75, 0x3d, 0xa5, 0xec, 0xec, 0x76, 0x54, 0x52, 0x1f, 0x49, 0xa4, 0xa7, 0x3a, 0x87, 0xda, 0xe1, 0x64, 0xf7, 0x71, 0x96, 0x81, 0x52, 0xf4, 0xa2, 0xbd, 0xf, 0x4d, 0x7, 0x5].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe9c7d44abec6dfe9996340e751df0098u128, 0x7ea585b5b32430715ec0a4c71a54ec94u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xe9, 0xc7, 0xd4, 0x4a, 0xbe, 0xc6, 0xdf, 0xe9, 0x99, 0x63, 0x40, 0xe7, 0x51, 0xdf, 0x0, 0x98, 0x7e, 0xa5, 0x85, 0xb5, 0xb3, 0x24, 0x30, 0x71, 0x5e, 0xc0, 0xa4, 0xc7, 0x1a, 0x54, 0xec, 0x94].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2752c9ab440bb36b22b586d763987612u128, 0xc52625096b7385a40a9e8d852534fec0u128).der_encode().0.iter().zip([0x2, 0x20, 0x27, 0x52, 0xc9, 0xab, 0x44, 0xb, 0xb3, 0x6b, 0x22, 0xb5, 0x86, 0xd7, 0x63, 0x98, 0x76, 0x12, 0xc5, 0x26, 0x25, 0x9, 0x6b, 0x73, 0x85, 0xa4, 0xa, 0x9e, 0x8d, 0x85, 0x25, 0x34, 0xfe, 0xc0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf19036c5c8f4d81f7eac62b525c487fcu128, 0x96ccef0a092c3e8f52aac4440a6f2e35u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xf1, 0x90, 0x36, 0xc5, 0xc8, 0xf4, 0xd8, 0x1f, 0x7e, 0xac, 0x62, 0xb5, 0x25, 0xc4, 0x87, 0xfc, 0x96, 0xcc, 0xef, 0xa, 0x9, 0x2c, 0x3e, 0x8f, 0x52, 0xaa, 0xc4, 0x44, 0xa, 0x6f, 0x2e, 0x35].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c6067ea210ed996a46f662e5997d7e1u128, 0x144685b5bea6c97d7ea7318b5941a9aeu128).der_encode().0.iter().zip([0x2, 0x20, 0x3c, 0x60, 0x67, 0xea, 0x21, 0xe, 0xd9, 0x96, 0xa4, 0x6f, 0x66, 0x2e, 0x59, 0x97, 0xd7, 0xe1, 0x14, 0x46, 0x85, 0xb5, 0xbe, 0xa6, 0xc9, 0x7d, 0x7e, 0xa7, 0x31, 0x8b, 0x59, 0x41, 0xa9, 0xae, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5f528564b1268e6c361c3781cfad8f2u128, 0x66068918de691afe3b71792bd0cd4f23u128).der_encode().0.iter().zip([0x2, 0x20, 0x5, 0xf5, 0x28, 0x56, 0x4b, 0x12, 0x68, 0xe6, 0xc3, 0x61, 0xc3, 0x78, 0x1c, 0xfa, 0xd8, 0xf2, 0x66, 0x6, 0x89, 0x18, 0xde, 0x69, 0x1a, 0xfe, 0x3b, 0x71, 0x79, 0x2b, 0xd0, 0xcd, 0x4f, 0x23, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfdd8cd48f480b3cee4e8303cc0b28691u128, 0xc9d3f45a1afbcdb2cbce526ba76eafceu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xfd, 0xd8, 0xcd, 0x48, 0xf4, 0x80, 0xb3, 0xce, 0xe4, 0xe8, 0x30, 0x3c, 0xc0, 0xb2, 0x86, 0x91, 0xc9, 0xd3, 0xf4, 0x5a, 0x1a, 0xfb, 0xcd, 0xb2, 0xcb, 0xce, 0x52, 0x6b, 0xa7, 0x6e, 0xaf, 0xce].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5ec36f7098c7926640d7a0a81cf72576u128, 0xc591399ddd3f4d645d5d62c76c5f1131u128).der_encode().0.iter().zip([0x2, 0x20, 0x5e, 0xc3, 0x6f, 0x70, 0x98, 0xc7, 0x92, 0x66, 0x40, 0xd7, 0xa0, 0xa8, 0x1c, 0xf7, 0x25, 0x76, 0xc5, 0x91, 0x39, 0x9d, 0xdd, 0x3f, 0x4d, 0x64, 0x5d, 0x5d, 0x62, 0xc7, 0x6c, 0x5f, 0x11, 0x31, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x42c912c96178432d91c48c5991723bu128, 0x7ae4d7afb1ed4d7f9aa2e9fc3fa66774u128).der_encode().0.iter().zip([0x2, 0x1f, 0x42, 0xc9, 0x12, 0xc9, 0x61, 0x78, 0x43, 0x2d, 0x91, 0xc4, 0x8c, 0x59, 0x91, 0x72, 0x3b, 0x7a, 0xe4, 0xd7, 0xaf, 0xb1, 0xed, 0x4d, 0x7f, 0x9a, 0xa2, 0xe9, 0xfc, 0x3f, 0xa6, 0x67, 0x74, 0x0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x641f774b111d7d1507eecd6d354d6bbeu128, 0xe528bcdba7ab335897f7517cc9d9c7f1u128).der_encode().0.iter().zip([0x2, 0x20, 0x64, 0x1f, 0x77, 0x4b, 0x11, 0x1d, 0x7d, 0x15, 0x7, 0xee, 0xcd, 0x6d, 0x35, 0x4d, 0x6b, 0xbe, 0xe5, 0x28, 0xbc, 0xdb, 0xa7, 0xab, 0x33, 0x58, 0x97, 0xf7, 0x51, 0x7c, 0xc9, 0xd9, 0xc7, 0xf1, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbc50431aa78081850948cac37da3b71u128, 0x371eff91129394dddf7b3ffba59963c6u128).der_encode().0.iter().zip([0x2, 0x20, 0xb, 0xc5, 0x4, 0x31, 0xaa, 0x78, 0x8, 0x18, 0x50, 0x94, 0x8c, 0xac, 0x37, 0xda, 0x3b, 0x71, 0x37, 0x1e, 0xff, 0x91, 0x12, 0x93, 0x94, 0xdd, 0xdf, 0x7b, 0x3f, 0xfb, 0xa5, 0x99, 0x63, 0xc6, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x79299de44e05399bdad56a52c962d3abu128, 0xc70243bbc886165106d4a0ee91b28613u128).der_encode().0.iter().zip([0x2, 0x20, 0x79, 0x29, 0x9d, 0xe4, 0x4e, 0x5, 0x39, 0x9b, 0xda, 0xd5, 0x6a, 0x52, 0xc9, 0x62, 0xd3, 0xab, 0xc7, 0x2, 0x43, 0xbb, 0xc8, 0x86, 0x16, 0x51, 0x6, 0xd4, 0xa0, 0xee, 0x91, 0xb2, 0x86, 0x13, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4b734123daec62e0fb085c865ff00966u128, 0xad6f768d74300e08108708805e26ced4u128).der_encode().0.iter().zip([0x2, 0x20, 0x4b, 0x73, 0x41, 0x23, 0xda, 0xec, 0x62, 0xe0, 0xfb, 0x8, 0x5c, 0x86, 0x5f, 0xf0, 0x9, 0x66, 0xad, 0x6f, 0x76, 0x8d, 0x74, 0x30, 0xe, 0x8, 0x10, 0x87, 0x8, 0x80, 0x5e, 0x26, 0xce, 0xd4, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x651e7c53a782aadaf25fe2fca89f992du128, 0xa7c685de568dd1c41fb87f8168466a46u128).der_encode().0.iter().zip([0x2, 0x20, 0x65, 0x1e, 0x7c, 0x53, 0xa7, 0x82, 0xaa, 0xda, 0xf2, 0x5f, 0xe2, 0xfc, 0xa8, 0x9f, 0x99, 0x2d, 0xa7, 0xc6, 0x85, 0xde, 0x56, 0x8d, 0xd1, 0xc4, 0x1f, 0xb8, 0x7f, 0x81, 0x68, 0x46, 0x6a, 0x46, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x99a6cbf53989b0da803a505ca22ec828u128, 0xecb7a7d6615b7cf07522728599673484u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0x99, 0xa6, 0xcb, 0xf5, 0x39, 0x89, 0xb0, 0xda, 0x80, 0x3a, 0x50, 0x5c, 0xa2, 0x2e, 0xc8, 0x28, 0xec, 0xb7, 0xa7, 0xd6, 0x61, 0x5b, 0x7c, 0xf0, 0x75, 0x22, 0x72, 0x85, 0x99, 0x67, 0x34, 0x84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x504ee8d87d1285fc0ce6996b7f973928u128, 0x8d1ef201520997b4933aa113570d2717u128).der_encode().0.iter().zip([0x2, 0x20, 0x50, 0x4e, 0xe8, 0xd8, 0x7d, 0x12, 0x85, 0xfc, 0xc, 0xe6, 0x99, 0x6b, 0x7f, 0x97, 0x39, 0x28, 0x8d, 0x1e, 0xf2, 0x1, 0x52, 0x9, 0x97, 0xb4, 0x93, 0x3a, 0xa1, 0x13, 0x57, 0xd, 0x27, 0x17, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x311c7f44f00f0f98bd4f0e641b80dd16u128, 0x6046cb9b4e5fa3ddd72bf461b775f22eu128).der_encode().0.iter().zip([0x2, 0x20, 0x31, 0x1c, 0x7f, 0x44, 0xf0, 0xf, 0xf, 0x98, 0xbd, 0x4f, 0xe, 0x64, 0x1b, 0x80, 0xdd, 0x16, 0x60, 0x46, 0xcb, 0x9b, 0x4e, 0x5f, 0xa3, 0xdd, 0xd7, 0x2b, 0xf4, 0x61, 0xb7, 0x75, 0xf2, 0x2e, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa494006986d3b11fbe731c84f2b92febu128, 0xff1010a01e8696463d1fc06b9724f5b4u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xa4, 0x94, 0x0, 0x69, 0x86, 0xd3, 0xb1, 0x1f, 0xbe, 0x73, 0x1c, 0x84, 0xf2, 0xb9, 0x2f, 0xeb, 0xff, 0x10, 0x10, 0xa0, 0x1e, 0x86, 0x96, 0x46, 0x3d, 0x1f, 0xc0, 0x6b, 0x97, 0x24, 0xf5, 0xb4].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa8de5261fd44669e336234718325f80eu128, 0xe8eb7744f45e15deafcb9bc1c7fa37c1u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xa8, 0xde, 0x52, 0x61, 0xfd, 0x44, 0x66, 0x9e, 0x33, 0x62, 0x34, 0x71, 0x83, 0x25, 0xf8, 0xe, 0xe8, 0xeb, 0x77, 0x44, 0xf4, 0x5e, 0x15, 0xde, 0xaf, 0xcb, 0x9b, 0xc1, 0xc7, 0xfa, 0x37, 0xc1].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7ad535212c63a26776283c5a2f1443b5u128, 0xf3663ad4ca1623ed3a34da55278db8d0u128).der_encode().0.iter().zip([0x2, 0x20, 0x7a, 0xd5, 0x35, 0x21, 0x2c, 0x63, 0xa2, 0x67, 0x76, 0x28, 0x3c, 0x5a, 0x2f, 0x14, 0x43, 0xb5, 0xf3, 0x66, 0x3a, 0xd4, 0xca, 0x16, 0x23, 0xed, 0x3a, 0x34, 0xda, 0x55, 0x27, 0x8d, 0xb8, 0xd0, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7d1c753561c84a5bc905c64684f7f8e4u128, 0xeeed1f34f7ca8dab1cb0c4bdbea6cb7cu128).der_encode().0.iter().zip([0x2, 0x20, 0x7d, 0x1c, 0x75, 0x35, 0x61, 0xc8, 0x4a, 0x5b, 0xc9, 0x5, 0xc6, 0x46, 0x84, 0xf7, 0xf8, 0xe4, 0xee, 0xed, 0x1f, 0x34, 0xf7, 0xca, 0x8d, 0xab, 0x1c, 0xb0, 0xc4, 0xbd, 0xbe, 0xa6, 0xcb, 0x7c, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeb2fd79430db8fac08e990b9557533b3u128, 0xa357cd2500d99f583a6e657e4b177e2bu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xeb, 0x2f, 0xd7, 0x94, 0x30, 0xdb, 0x8f, 0xac, 0x8, 0xe9, 0x90, 0xb9, 0x55, 0x75, 0x33, 0xb3, 0xa3, 0x57, 0xcd, 0x25, 0x0, 0xd9, 0x9f, 0x58, 0x3a, 0x6e, 0x65, 0x7e, 0x4b, 0x17, 0x7e, 0x2b].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x48b187d552f766296b00afd901508e0bu128, 0x6189b5c09bad7f44f115402a0a8e5c74u128).der_encode().0.iter().zip([0x2, 0x20, 0x48, 0xb1, 0x87, 0xd5, 0x52, 0xf7, 0x66, 0x29, 0x6b, 0x0, 0xaf, 0xd9, 0x1, 0x50, 0x8e, 0xb, 0x61, 0x89, 0xb5, 0xc0, 0x9b, 0xad, 0x7f, 0x44, 0xf1, 0x15, 0x40, 0x2a, 0xa, 0x8e, 0x5c, 0x74, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5164865ac8091e17d0000513cdeff533u128, 0x33e91539e9401c99b2a96fc9a511f52fu128).der_encode().0.iter().zip([0x2, 0x20, 0x51, 0x64, 0x86, 0x5a, 0xc8, 0x9, 0x1e, 0x17, 0xd0, 0x0, 0x5, 0x13, 0xcd, 0xef, 0xf5, 0x33, 0x33, 0xe9, 0x15, 0x39, 0xe9, 0x40, 0x1c, 0x99, 0xb2, 0xa9, 0x6f, 0xc9, 0xa5, 0x11, 0xf5, 0x2f, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b5200b13b4a3ce09ea03ff460053a61u128, 0x4973ef704fbd02695a790f448ac81f5cu128).der_encode().0.iter().zip([0x2, 0x20, 0x5b, 0x52, 0x0, 0xb1, 0x3b, 0x4a, 0x3c, 0xe0, 0x9e, 0xa0, 0x3f, 0xf4, 0x60, 0x5, 0x3a, 0x61, 0x49, 0x73, 0xef, 0x70, 0x4f, 0xbd, 0x2, 0x69, 0x5a, 0x79, 0xf, 0x44, 0x8a, 0xc8, 0x1f, 0x5c, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5ca51ceb641a8052577831dcb5d22f5cu128, 0xd417541586c6c5bdf281cb26668aeab9u128).der_encode().0.iter().zip([0x2, 0x20, 0x5c, 0xa5, 0x1c, 0xeb, 0x64, 0x1a, 0x80, 0x52, 0x57, 0x78, 0x31, 0xdc, 0xb5, 0xd2, 0x2f, 0x5c, 0xd4, 0x17, 0x54, 0x15, 0x86, 0xc6, 0xc5, 0xbd, 0xf2, 0x81, 0xcb, 0x26, 0x66, 0x8a, 0xea, 0xb9, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7a5fc4f6d57fc7fd0963599542d052f9u128, 0x72a59451116300d63ff4ffa9f485a05du128).der_encode().0.iter().zip([0x2, 0x20, 0x7a, 0x5f, 0xc4, 0xf6, 0xd5, 0x7f, 0xc7, 0xfd, 0x9, 0x63, 0x59, 0x95, 0x42, 0xd0, 0x52, 0xf9, 0x72, 0xa5, 0x94, 0x51, 0x11, 0x63, 0x0, 0xd6, 0x3f, 0xf4, 0xff, 0xa9, 0xf4, 0x85, 0xa0, 0x5d, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8a19d825c258b92e0a57c13814630a9u128, 0x4891e4b8755e6b27299109b5e59b5a42u128).der_encode().0.iter().zip([0x2, 0x20, 0x8, 0xa1, 0x9d, 0x82, 0x5c, 0x25, 0x8b, 0x92, 0xe0, 0xa5, 0x7c, 0x13, 0x81, 0x46, 0x30, 0xa9, 0x48, 0x91, 0xe4, 0xb8, 0x75, 0x5e, 0x6b, 0x27, 0x29, 0x91, 0x9, 0xb5, 0xe5, 0x9b, 0x5a, 0x42, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c030c637b679e6948ad74ef676f0842u128, 0x3c93fd916a3284a3ba40e4ffda292f76u128).der_encode().0.iter().zip([0x2, 0x20, 0x3c, 0x3, 0xc, 0x63, 0x7b, 0x67, 0x9e, 0x69, 0x48, 0xad, 0x74, 0xef, 0x67, 0x6f, 0x8, 0x42, 0x3c, 0x93, 0xfd, 0x91, 0x6a, 0x32, 0x84, 0xa3, 0xba, 0x40, 0xe4, 0xff, 0xda, 0x29, 0x2f, 0x76, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3af19e6f655be7fe183b2f34965f720eu128, 0xcadc769469ee30f0dc1a47a9be118f5fu128).der_encode().0.iter().zip([0x2, 0x20, 0x3a, 0xf1, 0x9e, 0x6f, 0x65, 0x5b, 0xe7, 0xfe, 0x18, 0x3b, 0x2f, 0x34, 0x96, 0x5f, 0x72, 0xe, 0xca, 0xdc, 0x76, 0x94, 0x69, 0xee, 0x30, 0xf0, 0xdc, 0x1a, 0x47, 0xa9, 0xbe, 0x11, 0x8f, 0x5f, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5c8b3997643045dadf28e8d9cb105eecu128, 0xe69fe1509d694c06c14898882f074d62u128).der_encode().0.iter().zip([0x2, 0x20, 0x5c, 0x8b, 0x39, 0x97, 0x64, 0x30, 0x45, 0xda, 0xdf, 0x28, 0xe8, 0xd9, 0xcb, 0x10, 0x5e, 0xec, 0xe6, 0x9f, 0xe1, 0x50, 0x9d, 0x69, 0x4c, 0x6, 0xc1, 0x48, 0x98, 0x88, 0x2f, 0x7, 0x4d, 0x62, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2d361969e58e5141309dc8856a95b5c8u128, 0x56fcbad2b240ee4a985baf87d7ea97cau128).der_encode().0.iter().zip([0x2, 0x20, 0x2d, 0x36, 0x19, 0x69, 0xe5, 0x8e, 0x51, 0x41, 0x30, 0x9d, 0xc8, 0x85, 0x6a, 0x95, 0xb5, 0xc8, 0x56, 0xfc, 0xba, 0xd2, 0xb2, 0x40, 0xee, 0x4a, 0x98, 0x5b, 0xaf, 0x87, 0xd7, 0xea, 0x97, 0xca, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc9efea034094b5bd41926402154c1bf0u128, 0xc2f5e0f514fe3bd4fb6c58429234a162u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xc9, 0xef, 0xea, 0x3, 0x40, 0x94, 0xb5, 0xbd, 0x41, 0x92, 0x64, 0x2, 0x15, 0x4c, 0x1b, 0xf0, 0xc2, 0xf5, 0xe0, 0xf5, 0x14, 0xfe, 0x3b, 0xd4, 0xfb, 0x6c, 0x58, 0x42, 0x92, 0x34, 0xa1, 0x62].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc6501f059782aa10600cacf5329939cdu128, 0x70b00461419a0103a2cd22a40e13b096u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xc6, 0x50, 0x1f, 0x5, 0x97, 0x82, 0xaa, 0x10, 0x60, 0xc, 0xac, 0xf5, 0x32, 0x99, 0x39, 0xcd, 0x70, 0xb0, 0x4, 0x61, 0x41, 0x9a, 0x1, 0x3, 0xa2, 0xcd, 0x22, 0xa4, 0xe, 0x13, 0xb0, 0x96].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc9fe99b35e0343c7d00092936a183f01u128, 0x3449f0bc78f7b472a4c6b20f7274d719u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xc9, 0xfe, 0x99, 0xb3, 0x5e, 0x3, 0x43, 0xc7, 0xd0, 0x0, 0x92, 0x93, 0x6a, 0x18, 0x3f, 0x1, 0x34, 0x49, 0xf0, 0xbc, 0x78, 0xf7, 0xb4, 0x72, 0xa4, 0xc6, 0xb2, 0xf, 0x72, 0x74, 0xd7, 0x19].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcc041d00ffb281c73cfa8b362dc18da8u128, 0x3e3dcfd8b93727bf95c17d37df56782eu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xcc, 0x4, 0x1d, 0x0, 0xff, 0xb2, 0x81, 0xc7, 0x3c, 0xfa, 0x8b, 0x36, 0x2d, 0xc1, 0x8d, 0xa8, 0x3e, 0x3d, 0xcf, 0xd8, 0xb9, 0x37, 0x27, 0xbf, 0x95, 0xc1, 0x7d, 0x37, 0xdf, 0x56, 0x78, 0x2e].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4a71e9c817749702cb77011e39713f9eu128, 0xf6d84a393cdc0c9ef58733a18b656786u128).der_encode().0.iter().zip([0x2, 0x20, 0x4a, 0x71, 0xe9, 0xc8, 0x17, 0x74, 0x97, 0x2, 0xcb, 0x77, 0x1, 0x1e, 0x39, 0x71, 0x3f, 0x9e, 0xf6, 0xd8, 0x4a, 0x39, 0x3c, 0xdc, 0xc, 0x9e, 0xf5, 0x87, 0x33, 0xa1, 0x8b, 0x65, 0x67, 0x86, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc3279f93f77f55cf696616a661ac34aeu128, 0x9c466fd97706092a51a2b960e7bd48cbu128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xc3, 0x27, 0x9f, 0x93, 0xf7, 0x7f, 0x55, 0xcf, 0x69, 0x66, 0x16, 0xa6, 0x61, 0xac, 0x34, 0xae, 0x9c, 0x46, 0x6f, 0xd9, 0x77, 0x6, 0x9, 0x2a, 0x51, 0xa2, 0xb9, 0x60, 0xe7, 0xbd, 0x48, 0xcb].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5c20e16908d4a2b8f3896bf56c2d4b17u128, 0xa19eeb413c51856cf01d843ffab5c523u128).der_encode().0.iter().zip([0x2, 0x20, 0x5c, 0x20, 0xe1, 0x69, 0x8, 0xd4, 0xa2, 0xb8, 0xf3, 0x89, 0x6b, 0xf5, 0x6c, 0x2d, 0x4b, 0x17, 0xa1, 0x9e, 0xeb, 0x41, 0x3c, 0x51, 0x85, 0x6c, 0xf0, 0x1d, 0x84, 0x3f, 0xfa, 0xb5, 0xc5, 0x23, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x84f39c13b49858c9c08ffe14f5849c1fu128, 0x69138334bedd4b974e9803beb0fd25f0u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0x84, 0xf3, 0x9c, 0x13, 0xb4, 0x98, 0x58, 0xc9, 0xc0, 0x8f, 0xfe, 0x14, 0xf5, 0x84, 0x9c, 0x1f, 0x69, 0x13, 0x83, 0x34, 0xbe, 0xdd, 0x4b, 0x97, 0x4e, 0x98, 0x3, 0xbe, 0xb0, 0xfd, 0x25, 0xf0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfcd22716fd93ff6cef9989ccebfafee3u128, 0x89ce3b9bc7bfe2a37b53971fe6b620a8u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xfc, 0xd2, 0x27, 0x16, 0xfd, 0x93, 0xff, 0x6c, 0xef, 0x99, 0x89, 0xcc, 0xeb, 0xfa, 0xfe, 0xe3, 0x89, 0xce, 0x3b, 0x9b, 0xc7, 0xbf, 0xe2, 0xa3, 0x7b, 0x53, 0x97, 0x1f, 0xe6, 0xb6, 0x20, 0xa8].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa807f0ef1891b9599c0ad6038a579827u128, 0xa419b7d18a6ce32e6fd8cd100eb59374u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xa8, 0x7, 0xf0, 0xef, 0x18, 0x91, 0xb9, 0x59, 0x9c, 0xa, 0xd6, 0x3, 0x8a, 0x57, 0x98, 0x27, 0xa4, 0x19, 0xb7, 0xd1, 0x8a, 0x6c, 0xe3, 0x2e, 0x6f, 0xd8, 0xcd, 0x10, 0xe, 0xb5, 0x93, 0x74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3dc68caab012fc2694297d8e1ff53dd9u128, 0x8dace9d1932abd34ed3f21d054d6d71du128).der_encode().0.iter().zip([0x2, 0x20, 0x3d, 0xc6, 0x8c, 0xaa, 0xb0, 0x12, 0xfc, 0x26, 0x94, 0x29, 0x7d, 0x8e, 0x1f, 0xf5, 0x3d, 0xd9, 0x8d, 0xac, 0xe9, 0xd1, 0x93, 0x2a, 0xbd, 0x34, 0xed, 0x3f, 0x21, 0xd0, 0x54, 0xd6, 0xd7, 0x1d, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9c796ab37b8c2304e8be471777028636u128, 0x77465e15596ea49bd5380a0e3c2b907au128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0x9c, 0x79, 0x6a, 0xb3, 0x7b, 0x8c, 0x23, 0x4, 0xe8, 0xbe, 0x47, 0x17, 0x77, 0x2, 0x86, 0x36, 0x77, 0x46, 0x5e, 0x15, 0x59, 0x6e, 0xa4, 0x9b, 0xd5, 0x38, 0xa, 0xe, 0x3c, 0x2b, 0x90, 0x7a].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xafd223526d87396c4788f6454bd99b46u128, 0xba9ce0958499861b82f93daf21634429u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xaf, 0xd2, 0x23, 0x52, 0x6d, 0x87, 0x39, 0x6c, 0x47, 0x88, 0xf6, 0x45, 0x4b, 0xd9, 0x9b, 0x46, 0xba, 0x9c, 0xe0, 0x95, 0x84, 0x99, 0x86, 0x1b, 0x82, 0xf9, 0x3d, 0xaf, 0x21, 0x63, 0x44, 0x29].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x56a1af7a528d8f0d0976672b6e6f4a59u128, 0x87812dcf43b0a33fe58dc8f89d67b612u128).der_encode().0.iter().zip([0x2, 0x20, 0x56, 0xa1, 0xaf, 0x7a, 0x52, 0x8d, 0x8f, 0xd, 0x9, 0x76, 0x67, 0x2b, 0x6e, 0x6f, 0x4a, 0x59, 0x87, 0x81, 0x2d, 0xcf, 0x43, 0xb0, 0xa3, 0x3f, 0xe5, 0x8d, 0xc8, 0xf8, 0x9d, 0x67, 0xb6, 0x12, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb80ff75de0a4102596bf703fdc2874fau128, 0x7a8d8da5478824d7231cbfe474bea8du128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xb8, 0xf, 0xf7, 0x5d, 0xe0, 0xa4, 0x10, 0x25, 0x96, 0xbf, 0x70, 0x3f, 0xdc, 0x28, 0x74, 0xfa, 0x7, 0xa8, 0xd8, 0xda, 0x54, 0x78, 0x82, 0x4d, 0x72, 0x31, 0xcb, 0xfe, 0x47, 0x4b, 0xea, 0x8d].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x554042b4a94cc273872012a860893d61u128, 0x54f7f1f366fba2e21b4a7765dbc4d766u128).der_encode().0.iter().zip([0x2, 0x20, 0x55, 0x40, 0x42, 0xb4, 0xa9, 0x4c, 0xc2, 0x73, 0x87, 0x20, 0x12, 0xa8, 0x60, 0x89, 0x3d, 0x61, 0x54, 0xf7, 0xf1, 0xf3, 0x66, 0xfb, 0xa2, 0xe2, 0x1b, 0x4a, 0x77, 0x65, 0xdb, 0xc4, 0xd7, 0x66, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x803e3d16d799e1b0f5166727f11be45fu128, 0xe2b752eaae07f8fc15a5ac9a04cc4d76u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0x80, 0x3e, 0x3d, 0x16, 0xd7, 0x99, 0xe1, 0xb0, 0xf5, 0x16, 0x67, 0x27, 0xf1, 0x1b, 0xe4, 0x5f, 0xe2, 0xb7, 0x52, 0xea, 0xae, 0x7, 0xf8, 0xfc, 0x15, 0xa5, 0xac, 0x9a, 0x4, 0xcc, 0x4d, 0x76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc40fdb0674226abc8ca30a99bc83be3bu128, 0x87833e6b6dad32cf5f2c8a721caeadd3u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0xc4, 0xf, 0xdb, 0x6, 0x74, 0x22, 0x6a, 0xbc, 0x8c, 0xa3, 0xa, 0x99, 0xbc, 0x83, 0xbe, 0x3b, 0x87, 0x83, 0x3e, 0x6b, 0x6d, 0xad, 0x32, 0xcf, 0x5f, 0x2c, 0x8a, 0x72, 0x1c, 0xae, 0xad, 0xd3].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9128b66b48b7ad8510afa3d85b5dbbafu128, 0x5ee7ff947283b6819e6f43734b43ef79u128).der_encode().0.iter().zip([0x2, 0x21, 0x0, 0x91, 0x28, 0xb6, 0x6b, 0x48, 0xb7, 0xad, 0x85, 0x10, 0xaf, 0xa3, 0xd8, 0x5b, 0x5d, 0xbb, 0xaf, 0x5e, 0xe7, 0xff, 0x94, 0x72, 0x83, 0xb6, 0x81, 0x9e, 0x6f, 0x43, 0x73, 0x4b, 0x43, 0xef, 0x79].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x114d02072d7558086c8aae78f575b330u128, 0xbf4443b401e2fe54427031fd6e1303e8u128).der_encode().0.iter().zip([0x2, 0x20, 0x11, 0x4d, 0x2, 0x7, 0x2d, 0x75, 0x58, 0x8, 0x6c, 0x8a, 0xae, 0x78, 0xf5, 0x75, 0xb3, 0x30, 0xbf, 0x44, 0x43, 0xb4, 0x1, 0xe2, 0xfe, 0x54, 0x42, 0x70, 0x31, 0xfd, 0x6e, 0x13, 0x3, 0xe8, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x21a794cb9421bb6012e5692758f2f699u128, 0x509f9f59248ebeb9cf86c00e73f818cu128).der_encode().0.iter().zip([0x2, 0x20, 0x21, 0xa7, 0x94, 0xcb, 0x94, 0x21, 0xbb, 0x60, 0x12, 0xe5, 0x69, 0x27, 0x58, 0xf2, 0xf6, 0x99, 0x5, 0x9, 0xf9, 0xf5, 0x92, 0x48, 0xeb, 0xeb, 0x9c, 0xf8, 0x6c, 0x0, 0xe7, 0x3f, 0x81, 0x8c, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x75f32bb627036d5439141c04099c945u128, 0xc1f63ff0c75e626c0b260696ce083887u128).der_encode().0.iter().zip([0x2, 0x20, 0x7, 0x5f, 0x32, 0xbb, 0x62, 0x70, 0x36, 0xd5, 0x43, 0x91, 0x41, 0xc0, 0x40, 0x99, 0xc9, 0x45, 0xc1, 0xf6, 0x3f, 0xf0, 0xc7, 0x5e, 0x62, 0x6c, 0xb, 0x26, 0x6, 0x96, 0xce, 0x8, 0x38, 0x87, 0x0].iter()).all(|(a,b)| a == b), "Arrays are not equal");
    }

    #[test] 
    fn calculate_p2pkh_address() {
        assert!(U256::new(0xbd55a6b5a06efc03124fcc760c17dcc3u128, 0xc039d41ac28a34c9204444a86b6888b5u128).calculate_p2pkh_address(false).iter().zip([49, 70, 67, 57, 55, 66, 70, 78, 117, 75, 89, 89, 118, 101, 68, 81, 112, 84, 107, 54, 115, 120, 52, 53, 54, 113, 107, 113, 65, 104, 117, 104, 66, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x734d8ea88528b26603c1959f05ec8799u128, 0x8aa71c93bce0dd379a72b30302d4aebfu128).calculate_p2pkh_address(false).iter().zip([49, 68, 77, 82, 70, 71, 114, 52, 76, 102, 98, 119, 109, 70, 80, 103, 70, 113, 84, 75, 119, 53, 83, 75, 70, 109, 105, 68, 103, 106, 88, 112, 114, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x49edee5317143b2e9edffe46a6226fa5u128, 0xb13f136951cd7b90342fc1567abcc78cu128).calculate_p2pkh_address(false).iter().zip([49, 66, 107, 110, 67, 68, 76, 53, 98, 50, 117, 50, 50, 84, 53, 84, 76, 53, 99, 120, 101, 49, 87, 90, 50, 84, 77, 115, 68, 69, 122, 117, 67, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x72bd6955a430de9b1d01ea6101f3de09u128, 0x2051ab0b67cc4d95d9d3f69977686b58u128).calculate_p2pkh_address(false).iter().zip([49, 56, 52, 105, 74, 121, 106, 77, 78, 78, 76, 106, 80, 90, 49, 111, 49, 75, 90, 121, 71, 50, 70, 110, 118, 81, 112, 118, 49, 53, 117, 50, 109, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8da523a08f2d8104f9f5689c04d75085u128, 0xe7ae1921afbeabe4e1be3081833801u128).calculate_p2pkh_address(false).iter().zip([49, 76, 111, 119, 97, 54, 85, 57, 103, 117, 51, 110, 75, 65, 117, 102, 115, 121, 120, 70, 84, 121, 50, 88, 100, 78, 65, 97, 52, 56, 102, 50, 65, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa05e3ad24c759d699defc8042ba5c11bu128, 0x94393de4972e85bba546589d5e688c0cu128).calculate_p2pkh_address(false).iter().zip([49, 56, 86, 56, 113, 109, 70, 70, 121, 55, 66, 85, 120, 71, 117, 84, 66, 97, 106, 56, 87, 88, 88, 54, 84, 97, 75, 65, 68, 89, 76, 51, 53, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc46aa586c4098816c5826879f1c83a11u128, 0x49f36ab05c70d73171d0ca7e7366b382u128).calculate_p2pkh_address(false).iter().zip([49, 56, 68, 54, 49, 56, 111, 86, 82, 98, 82, 120, 89, 107, 53, 97, 117, 110, 57, 52, 103, 102, 57, 54, 54, 71, 103, 67, 104, 99, 50, 52, 111, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xceec04a4c29349305d87a7121816b734u128, 0x62eb3b018f66b364cc88f6826a2e1f72u128).calculate_p2pkh_address(false).iter().zip([49, 51, 84, 66, 76, 71, 122, 49, 119, 81, 84, 69, 90, 107, 106, 104, 101, 82, 120, 51, 81, 67, 69, 55, 83, 54, 50, 110, 49, 68, 84, 50, 80, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x64ff2ef0388aea2efd7de0a51bbe16ffu128, 0x1a2a9a56454b4aa6008897c20146988bu128).calculate_p2pkh_address(false).iter().zip([49, 50, 71, 86, 78, 115, 100, 90, 84, 83, 65, 102, 76, 98, 77, 105, 89, 121, 120, 72, 76, 100, 114, 71, 115, 89, 56, 74, 67, 55, 67, 82, 116, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe56e06d370895bf7f394e4d1e8db618fu128, 0x5ac6da34e50d26e16684da824fb80174u128).calculate_p2pkh_address(false).iter().zip([49, 67, 102, 120, 105, 122, 80, 68, 107, 113, 102, 78, 111, 112, 69, 120, 56, 114, 101, 90, 122, 68, 86, 70, 57, 77, 97, 107, 121, 98, 53, 117, 113, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf20f68e34ff03f4616ba34ae8f0e49au128, 0xd1671c8700b2891943437443e10c32b3u128).calculate_p2pkh_address(false).iter().zip([49, 80, 121, 89, 105, 111, 88, 71, 53, 74, 102, 57, 51, 119, 103, 66, 87, 74, 118, 120, 85, 68, 78, 54, 78, 49, 74, 54, 69, 113, 107, 85, 84, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x817441e0470321a9c4863a693b1947c9u128, 0x600fcd721cd52a1ed9fb92bb1e317310u128).calculate_p2pkh_address(false).iter().zip([49, 69, 65, 68, 67, 104, 86, 101, 102, 122, 84, 52, 114, 67, 80, 84, 82, 106, 75, 117, 100, 86, 109, 53, 99, 53, 77, 88, 99, 75, 70, 98, 74, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe9ab79402f5addeb8a398e348eb08a92u128, 0x9ef889cc638d30f8e5a8a920c613669bu128).calculate_p2pkh_address(false).iter().zip([49, 50, 106, 67, 89, 67, 90, 98, 78, 118, 103, 65, 112, 101, 57, 112, 54, 106, 117, 118, 78, 120, 116, 72, 87, 118, 122, 102, 77, 52, 88, 66, 53, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe48639447ccc1ac77040e8ace6c18724u128, 0xe14775f98f613254980db2f891dcb56du128).calculate_p2pkh_address(false).iter().zip([49, 67, 69, 100, 71, 111, 57, 116, 71, 50, 69, 54, 66, 53, 114, 89, 113, 71, 78, 78, 88, 105, 102, 114, 112, 70, 110, 75, 121, 102, 57, 112, 89, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb4c7c825225f2732b7d79c6de375c031u128, 0x86578859ee7538573edae5bdfeeab3efu128).calculate_p2pkh_address(false).iter().zip([49, 76, 87, 71, 86, 99, 98, 116, 67, 71, 102, 113, 75, 70, 111, 74, 65, 97, 90, 85, 66, 86, 113, 67, 69, 51, 85, 53, 81, 82, 77, 84, 117, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb3c00dc6ab760a2e4850f6fe79acf3f7u128, 0x4a5ba609e54ace322acfaf356ad5ecbau128).calculate_p2pkh_address(false).iter().zip([0, 49, 109, 57, 106, 65, 114, 85, 119, 116, 56, 66, 57, 86, 103, 103, 113, 120, 90, 50, 51, 53, 81, 68, 119, 68, 69, 80, 85, 82, 122, 81, 103, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x821d354d3652551fe19b1db6fc235663u128, 0x5628f52af3112b7d1c057bff26237cb2u128).calculate_p2pkh_address(false).iter().zip([0, 49, 97, 115, 80, 122, 69, 74, 98, 90, 103, 121, 50, 52, 85, 97, 98, 54, 86, 119, 72, 49, 76, 56, 106, 74, 116, 106, 99, 53, 70, 90, 81, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8539ff0591e43fcdcd10a13ca699c73du128, 0xca97fa7fc57b042bbf966eee4be1bbd7u128).calculate_p2pkh_address(false).iter().zip([49, 50, 66, 84, 76, 81, 109, 114, 87, 84, 56, 84, 106, 55, 111, 122, 72, 99, 122, 78, 105, 74, 115, 76, 106, 57, 81, 118, 83, 78, 104, 119, 54, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbea22b828fa6ff7113b6ba7bffa245feu128, 0x4fbbba45535f5e344e79fc284bbf41eu128).calculate_p2pkh_address(false).iter().zip([49, 74, 112, 112, 84, 56, 67, 86, 102, 50, 71, 101, 55, 56, 86, 56, 110, 104, 103, 54, 51, 122, 109, 76, 119, 49, 107, 77, 69, 82, 80, 69, 72, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd7e3168eaf03c8e5b282b34284d44602u128, 0xd812151409e99d506fa6125316556434u128).calculate_p2pkh_address(false).iter().zip([49, 76, 72, 113, 49, 97, 66, 110, 106, 71, 118, 89, 75, 100, 110, 104, 106, 82, 109, 51, 67, 56, 69, 75, 118, 83, 121, 81, 120, 75, 72, 112, 121, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc5e87f06e15cd8b0f663b0d760417c21u128, 0x23e952f29e52d45a8e83c689b93db6e7u128).calculate_p2pkh_address(false).iter().zip([49, 75, 121, 69, 113, 113, 72, 109, 121, 66, 100, 50, 83, 121, 112, 66, 66, 118, 89, 87, 86, 57, 100, 100, 56, 70, 57, 72, 113, 99, 99, 70, 56, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x63c0f49ae4c97a3ac9e8b956605fe5f4u128, 0x77cc772d21bb1ce96af783e21c51b436u128).calculate_p2pkh_address(false).iter().zip([49, 53, 77, 121, 97, 72, 68, 86, 90, 98, 109, 100, 119, 89, 87, 109, 99, 120, 101, 68, 121, 52, 114, 49, 99, 82, 98, 87, 110, 67, 66, 68, 57, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c03f74b860087542eda092661954055u128, 0x238f8a9bac5d6e326bc459d3e3a36537u128).calculate_p2pkh_address(false).iter().zip([49, 51, 70, 77, 115, 90, 68, 88, 90, 83, 89, 68, 102, 55, 78, 109, 88, 90, 50, 106, 97, 98, 51, 98, 86, 115, 82, 53, 80, 66, 74, 100, 90, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7e42789ddb7da89739746805de56a065u128, 0x9888d3b32b672d7b601e46a314654d5au128).calculate_p2pkh_address(false).iter().zip([49, 67, 70, 66, 118, 89, 98, 71, 54, 122, 75, 114, 56, 119, 52, 87, 71, 109, 72, 53, 100, 102, 85, 69, 68, 50, 82, 110, 102, 98, 102, 71, 90, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaf9956865e7439f55a4e8ae5bdd1d912u128, 0xaa61d2f0e52254889a100fad5029fd7u128).calculate_p2pkh_address(false).iter().zip([49, 51, 86, 121, 55, 75, 49, 103, 101, 83, 56, 50, 112, 78, 101, 53, 65, 51, 100, 105, 66, 56, 109, 103, 85, 86, 101, 72, 80, 86, 66, 49, 87, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfe636d35f0f5bd9ad6cb5b7bad138a08u128, 0xb71ff70eaa143466b06b8b17ec7fcfaeu128).calculate_p2pkh_address(false).iter().zip([49, 75, 110, 71, 84, 112, 102, 121, 54, 109, 98, 105, 53, 68, 56, 50, 117, 88, 75, 112, 115, 56, 89, 56, 106, 89, 105, 97, 78, 99, 56, 52, 87, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa72a8a109c75dff31ad66ada3ede053u128, 0x14261f78f026202d7ca800beba7f5294u128).calculate_p2pkh_address(false).iter().zip([49, 57, 111, 118, 52, 120, 78, 97, 121, 88, 105, 72, 54, 114, 118, 104, 68, 88, 50, 86, 84, 77, 111, 70, 78, 88, 101, 83, 101, 83, 122, 70, 115, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf08dbebf8ae03e4a7199c8806f9eee3bu128, 0x76692b375f41a5482478480f3a709d9cu128).calculate_p2pkh_address(false).iter().zip([49, 54, 107, 66, 118, 77, 53, 98, 67, 116, 97, 122, 119, 77, 109, 83, 51, 69, 90, 107, 117, 120, 104, 122, 104, 76, 75, 78, 109, 69, 56, 65, 115, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x60dd7b362d4ecb1f19630e71a6d3794au128, 0xf9229f7dcc032eed353272bdf47b772au128).calculate_p2pkh_address(false).iter().zip([49, 72, 51, 51, 75, 105, 51, 80, 118, 114, 109, 75, 84, 51, 57, 75, 82, 68, 74, 118, 100, 102, 80, 122, 104, 72, 88, 100, 51, 103, 77, 67, 121, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x11773ff0e9eda364f23b38f80abb16b5u128, 0xa8306581edf6885ada91b284ced3e990u128).calculate_p2pkh_address(false).iter().zip([49, 50, 56, 115, 111, 83, 89, 69, 112, 74, 90, 87, 53, 87, 77, 107, 51, 55, 75, 81, 89, 84, 100, 87, 101, 85, 119, 82, 118, 100, 68, 66, 117, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6098b53362b5de94460a731d20539aeu128, 0xd1e8ddb3f726e5aac7f8ff7283a346bcu128).calculate_p2pkh_address(false).iter().zip([49, 80, 53, 107, 122, 110, 70, 99, 85, 80, 87, 56, 77, 55, 53, 110, 89, 69, 101, 107, 115, 113, 56, 100, 98, 119, 50, 87, 116, 56, 86, 70, 81, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbff686054bc8d7e4ac5537f70968a356u128, 0x9ea41d82c8d44c95ca9b1b40bc2a4cb2u128).calculate_p2pkh_address(false).iter().zip([49, 80, 103, 50, 81, 122, 84, 51, 71, 51, 74, 97, 49, 68, 120, 89, 51, 81, 107, 104, 111, 49, 112, 90, 66, 78, 81, 85, 77, 53, 86, 68, 67, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4a08d112516f0d037578b9aa6c1e7ef9u128, 0xd29badd8dda3b1b8536ae245d1b64e81u128).calculate_p2pkh_address(false).iter().zip([49, 51, 115, 119, 70, 51, 100, 109, 118, 114, 110, 109, 87, 76, 82, 54, 88, 54, 90, 104, 114, 111, 66, 52, 70, 119, 75, 84, 54, 70, 109, 100, 54, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5e3ab8e6c2f0d5d383a8d63c3568e3deu128, 0x6ae67573906cd6dbd3adea0155eb6010u128).calculate_p2pkh_address(false).iter().zip([49, 52, 66, 98, 71, 53, 69, 54, 49, 50, 68, 50, 56, 115, 98, 86, 111, 120, 118, 121, 72, 52, 65, 82, 87, 117, 88, 78, 69, 122, 86, 78, 80, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc1d8e66fe955adbf9513c770e92e774au128, 0xf697117823424d6d8510156ccca946adu128).calculate_p2pkh_address(false).iter().zip([49, 66, 78, 57, 69, 113, 117, 49, 109, 115, 54, 112, 115, 117, 83, 115, 66, 103, 87, 49, 77, 57, 97, 85, 101, 54, 49, 52, 66, 84, 49, 57, 86, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2481c7867b72b015044dc578daf716f4u128, 0xa421e60ea1df531f845b7248239757a8u128).calculate_p2pkh_address(false).iter().zip([49, 75, 80, 112, 90, 80, 55, 103, 81, 54, 75, 55, 98, 100, 97, 89, 90, 75, 86, 102, 106, 89, 76, 118, 57, 66, 68, 105, 102, 49, 57, 98, 97, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcd64fe3d8d72683070c8c7853498da90u128, 0x414257cdd71216fa09726926a7f37286u128).calculate_p2pkh_address(false).iter().zip([49, 74, 114, 100, 89, 69, 110, 82, 110, 49, 122, 55, 52, 69, 71, 83, 101, 111, 76, 75, 113, 77, 75, 104, 116, 112, 75, 113, 110, 112, 98, 112, 119, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd32f54b20129354a4375443e7439d6cu128, 0x79576511dc8b2ee1b00e2e26cabe5958u128).calculate_p2pkh_address(false).iter().zip([49, 56, 49, 56, 115, 113, 57, 110, 106, 53, 75, 51, 49, 102, 100, 80, 107, 98, 66, 82, 122, 50, 114, 115, 117, 88, 53, 122, 105, 71, 106, 80, 69, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcc24917cd439ce4de32cc372d1a79038u128, 0xfb275a8a40767a37d92ac18461d2cd3bu128).calculate_p2pkh_address(false).iter().zip([49, 71, 101, 114, 101, 89, 68, 72, 88, 83, 78, 66, 87, 76, 119, 113, 105, 102, 115, 118, 109, 50, 105, 53, 81, 110, 54, 102, 116, 52, 57, 77, 98, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9b3a68c14bb9825b26fe4a403a26b437u128, 0xf7187d49deeb1686c465d1cf772c6432u128).calculate_p2pkh_address(false).iter().zip([49, 77, 74, 66, 105, 52, 83, 105, 77, 67, 68, 109, 52, 78, 74, 84, 52, 66, 55, 85, 88, 103, 69, 110, 105, 56, 114, 104, 54, 110, 51, 115, 112, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd461a46701eb1312d2a9b3332a1c1c73u128, 0x85ac8c56f18477da98a13c85525f7918u128).calculate_p2pkh_address(false).iter().zip([49, 69, 112, 84, 121, 104, 50, 101, 71, 102, 115, 76, 104, 88, 109, 78, 77, 76, 75, 88, 65, 54, 50, 55, 85, 50, 56, 103, 88, 119, 83, 50, 122, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf937161e0fbfb49c712dea715bc9828eu128, 0xd7376cd054923387ea5c316c339b33d3u128).calculate_p2pkh_address(false).iter().zip([49, 50, 113, 90, 109, 82, 107, 75, 120, 82, 112, 122, 66, 102, 119, 69, 100, 106, 56, 49, 118, 70, 121, 113, 88, 101, 103, 77, 83, 122, 80, 104, 119, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb0e5c147fc4a09342a13b3912249d23au128, 0xebe26ebe76edb2e9b4f4aa22355e1865u128).calculate_p2pkh_address(false).iter().zip([49, 68, 101, 119, 74, 84, 53, 102, 78, 50, 120, 97, 51, 86, 106, 119, 105, 74, 69, 99, 103, 109, 70, 50, 111, 53, 90, 49, 100, 121, 87, 69, 70, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x27546a32d765155ba11abd29749e231fu128, 0xee57c6aadc471769a6219347d237035fu128).calculate_p2pkh_address(false).iter().zip([49, 68, 98, 102, 103, 99, 82, 101, 102, 119, 119, 71, 75, 80, 89, 75, 99, 86, 117, 115, 97, 81, 102, 119, 111, 106, 52, 70, 65, 109, 102, 54, 71, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x79575fdb5e66ddce60998d151883dcdbu128, 0x42c34bfb4221ee15aa29472697bac79cu128).calculate_p2pkh_address(false).iter().zip([49, 69, 57, 70, 117, 78, 105, 107, 54, 99, 86, 80, 122, 102, 104, 85, 104, 116, 84, 77, 121, 86, 120, 120, 76, 85, 86, 84, 51, 115, 50, 116, 88, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfe6e922f03b5be6e822cabe614bacf45u128, 0x78132e6bbb7aab6b6f53f387374d60b5u128).calculate_p2pkh_address(false).iter().zip([49, 72, 99, 112, 107, 68, 51, 121, 65, 98, 110, 122, 65, 75, 89, 113, 56, 50, 87, 67, 113, 99, 119, 83, 56, 85, 80, 105, 51, 106, 75, 68, 77, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe1538544c3aa134c5d4307f7f3bd6a7eu128, 0x91293bcad18eb5dbe96e7c7fc608e366u128).calculate_p2pkh_address(false).iter().zip([49, 76, 121, 51, 50, 78, 65, 111, 121, 53, 98, 72, 66, 90, 88, 80, 102, 120, 102, 100, 56, 77, 120, 121, 77, 118, 120, 109, 119, 90, 69, 103, 105, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x519cbe3713ab01f9d4e5b148f20a7f6au128, 0x2dc218d757244ee5252914821ebff829u128).calculate_p2pkh_address(false).iter().zip([49, 72, 107, 65, 115, 102, 53, 55, 101, 54, 71, 104, 98, 51, 113, 69, 105, 90, 67, 76, 100, 102, 112, 83, 67, 80, 82, 104, 103, 119, 109, 100, 90, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfabed0cfe033a772af8bf729881ec73bu128, 0xf0cd33191f5cdbcaa9109b7b0a0fc013u128).calculate_p2pkh_address(false).iter().zip([49, 67, 104, 111, 100, 97, 113, 87, 54, 81, 84, 86, 109, 75, 115, 106, 68, 90, 66, 51, 66, 105, 107, 76, 89, 89, 75, 84, 50, 51, 119, 82, 65, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9d5d5146f68269535cc4b77b5c33816cu128, 0x9e602c2dc618900457dea0b19d59db8bu128).calculate_p2pkh_address(false).iter().zip([49, 71, 112, 55, 111, 89, 54, 119, 114, 88, 122, 78, 101, 76, 74, 105, 67, 52, 67, 122, 67, 69, 57, 52, 102, 50, 69, 49, 82, 102, 67, 52, 87, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa42e546264710500c06a906e1c33cd80u128, 0xeae74530edc44b37b53342411452c87eu128).calculate_p2pkh_address(false).iter().zip([49, 76, 101, 52, 80, 71, 98, 81, 101, 103, 81, 112, 76, 98, 84, 121, 87, 72, 55, 86, 50, 72, 85, 57, 88, 52, 52, 113, 111, 88, 55, 81, 116, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4f904d102f0288a9acdf7c49755e22cdu128, 0xd331926b32ce2f2686a20cebef5f394bu128).calculate_p2pkh_address(false).iter().zip([49, 54, 104, 66, 57, 77, 78, 75, 98, 100, 89, 54, 49, 121, 106, 99, 97, 104, 84, 83, 87, 90, 77, 119, 121, 117, 115, 65, 83, 105, 66, 119, 74, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xda52a2dd9b2db4129d72f1edd03c7b71u128, 0x2e9037f3d1829e0ee91e79f0676825c7u128).calculate_p2pkh_address(false).iter().zip([49, 70, 55, 89, 119, 90, 69, 72, 53, 101, 103, 110, 68, 67, 54, 75, 84, 114, 121, 102, 65, 114, 98, 122, 99, 107, 106, 105, 113, 84, 121, 98, 111, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe10ba548840c093d0ee6f8f0c8bef210u128, 0xb7b2f5906b9111b9b4b58d3793ef2e3fu128).calculate_p2pkh_address(false).iter().zip([49, 68, 54, 99, 109, 70, 112, 67, 77, 106, 105, 69, 90, 65, 104, 117, 111, 106, 54, 118, 83, 113, 83, 110, 103, 90, 98, 113, 113, 90, 66, 86, 113, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3e7c18129d05f924a1555d31bf488e8u128, 0x8714cd5f559337d40628e6bed290311cu128).calculate_p2pkh_address(false).iter().zip([49, 75, 68, 81, 57, 111, 81, 56, 83, 66, 68, 113, 54, 106, 103, 67, 106, 109, 115, 56, 101, 56, 83, 53, 87, 100, 49, 75, 53, 88, 52, 104, 97, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xefce07772c068b8dca8f95605edb372eu128, 0xb3c4a92a18e6528db51790ecfd34eaefu128).calculate_p2pkh_address(false).iter().zip([49, 67, 99, 105, 85, 52, 70, 113, 90, 78, 50, 85, 90, 119, 54, 111, 67, 107, 110, 50, 120, 80, 67, 112, 86, 105, 104, 113, 74, 84, 99, 90, 118, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x445af1df1241c748d80207eaf4d6b98du128, 0x5157a0d85a844b25e9554c9232b1e871u128).calculate_p2pkh_address(false).iter().zip([0, 49, 68, 54, 82, 112, 72, 116, 67, 116, 114, 76, 55, 71, 55, 56, 111, 69, 53, 109, 57, 66, 77, 55, 102, 97, 80, 53, 110, 120, 49, 102, 69, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xec7ff1324ffa653d8a380f466bd10379u128, 0xa7e150e1af598a5f80e950b02d29018fu128).calculate_p2pkh_address(false).iter().zip([49, 66, 115, 51, 84, 120, 120, 66, 120, 105, 52, 87, 103, 105, 84, 57, 89, 113, 105, 81, 122, 57, 72, 110, 50, 122, 90, 86, 101, 111, 97, 56, 113, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa43ce826890fabdc29b241735e7ad551u128, 0x58967b6ff8f2c50a68ae86df4d947fdu128).calculate_p2pkh_address(false).iter().zip([49, 54, 50, 97, 117, 116, 99, 70, 69, 56, 70, 80, 55, 78, 80, 80, 72, 119, 49, 83, 120, 87, 120, 104, 69, 71, 80, 84, 52, 99, 83, 104, 100, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdc766bc9eafb09133ea67bc02331a0fbu128, 0xbd61df9d15499af25c2767d1d7996bc1u128).calculate_p2pkh_address(false).iter().zip([49, 65, 111, 98, 109, 100, 88, 72, 99, 52, 109, 87, 117, 55, 111, 99, 100, 74, 106, 70, 50, 70, 86, 81, 66, 104, 113, 82, 114, 76, 118, 53, 109, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x328b91be4535071663e0411c187d79deu128, 0xb7e9cb4fdf4e4b5697060beddeac4c55u128).calculate_p2pkh_address(false).iter().zip([49, 52, 52, 67, 70, 113, 90, 118, 120, 85, 56, 53, 118, 86, 119, 97, 98, 77, 105, 53, 88, 86, 109, 88, 112, 115, 111, 72, 56, 83, 114, 97, 104, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x82b6bc6a12897040d9da160d6208f1c3u128, 0xdf2b267ee078072f2d894b576a4457b0u128).calculate_p2pkh_address(false).iter().zip([49, 80, 110, 103, 115, 105, 100, 52, 56, 82, 65, 117, 77, 81, 50, 120, 76, 86, 100, 89, 97, 70, 66, 88, 77, 103, 101, 57, 72, 54, 50, 81, 54, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcc15cdfdf6be206bda2cc06f1f4260e5u128, 0x45ac1c015794471cc0108a1bac10a262u128).calculate_p2pkh_address(false).iter().zip([49, 67, 97, 66, 105, 76, 121, 66, 56, 85, 71, 109, 51, 115, 106, 114, 110, 87, 105, 84, 69, 80, 69, 118, 113, 105, 88, 72, 66, 51, 117, 53, 109, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x580767b62dd4eb78fd5455598c6dbafdu128, 0xfbd13ac12f51fd3eca7e3916dd4b3a90u128).calculate_p2pkh_address(false).iter().zip([49, 55, 80, 109, 55, 119, 53, 82, 52, 106, 71, 86, 53, 83, 97, 57, 50, 120, 107, 83, 98, 77, 115, 107, 72, 52, 98, 121, 81, 105, 67, 56, 56, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1ca9a256ccf24f369c14040eb284fcc7u128, 0x1cccfdadbd8f186728e511242cb4a15u128).calculate_p2pkh_address(false).iter().zip([0, 49, 117, 115, 72, 99, 74, 106, 84, 82, 70, 112, 102, 67, 112, 115, 88, 49, 106, 117, 54, 71, 86, 101, 99, 82, 66, 104, 69, 55, 114, 103, 111, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x81b68f70ee2405edf5aff6a45bc723e2u128, 0x949ea33e12c604c0e697de0a5859bf72u128).calculate_p2pkh_address(false).iter().zip([49, 69, 53, 102, 110, 120, 115, 121, 66, 81, 75, 72, 112, 68, 97, 101, 49, 106, 84, 103, 112, 74, 115, 100, 103, 51, 81, 66, 97, 120, 81, 111, 98, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd675d20ae45515ae97c499dd1e7f4f45u128, 0x6f6442b62861218c72fdddfc78fdf297u128).calculate_p2pkh_address(false).iter().zip([49, 74, 98, 97, 113, 102, 67, 113, 117, 109, 121, 98, 117, 104, 77, 56, 53, 118, 102, 90, 72, 76, 107, 81, 110, 98, 52, 80, 65, 102, 56, 89, 82, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe61f0e7b653734429b02472e2652fccbu128, 0xd293964ba7c3c23ff11bc17d8b447553u128).calculate_p2pkh_address(false).iter().zip([49, 75, 109, 80, 81, 70, 119, 75, 69, 53, 89, 122, 119, 85, 82, 74, 70, 54, 51, 118, 99, 105, 68, 85, 117, 103, 72, 82, 51, 90, 85, 54, 56, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf7891f3ab6bd7a5d86a64c60a5f72486u128, 0xbb6b670a092b22af0c1f5d2bd30d6880u128).calculate_p2pkh_address(false).iter().zip([49, 69, 56, 100, 116, 109, 53, 115, 109, 88, 106, 113, 106, 52, 97, 104, 55, 65, 66, 115, 70, 110, 101, 90, 111, 54, 54, 88, 71, 120, 104, 106, 81, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8e77b5730c70bdfe4af1213d691ba3abu128, 0xf94808eada1697b48619fe778a361a60u128).calculate_p2pkh_address(false).iter().zip([49, 74, 101, 113, 55, 80, 121, 89, 70, 57, 74, 103, 118, 99, 72, 107, 112, 88, 107, 50, 97, 76, 102, 107, 102, 74, 97, 121, 107, 53, 85, 77, 117, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xffa1834b5dfb28ac1ac30ab345a24788u128, 0x883d58fd574c398c06660974277a6af8u128).calculate_p2pkh_address(false).iter().zip([49, 54, 100, 55, 115, 68, 82, 82, 113, 88, 122, 53, 115, 57, 88, 87, 84, 70, 52, 57, 85, 67, 101, 50, 120, 120, 122, 51, 66, 117, 69, 51, 52, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x296dcc0867235a2320f800dabee58fcdu128, 0x3978a5a74a2e9db0f916e6ee34a170d2u128).calculate_p2pkh_address(false).iter().zip([49, 56, 66, 70, 72, 97, 81, 72, 122, 116, 77, 116, 50, 114, 55, 65, 54, 118, 56, 67, 66, 114, 103, 110, 74, 103, 106, 120, 71, 101, 105, 102, 75, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd89f09c9642cd310e339da7b8d0d7e5bu128, 0xbabef6a183f9f7dcdd23e871fdaf4b4cu128).calculate_p2pkh_address(false).iter().zip([49, 76, 87, 98, 84, 78, 77, 89, 103, 109, 53, 116, 109, 97, 97, 107, 84, 90, 98, 57, 89, 118, 56, 118, 90, 86, 81, 83, 49, 84, 110, 115, 112, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x825baa18f5c8bf8f5932a0adb3e17e4du128, 0x9bb507cedbbac752b2da57ddc9d6eb8fu128).calculate_p2pkh_address(false).iter().zip([49, 78, 119, 89, 105, 82, 118, 86, 97, 57, 72, 101, 117, 67, 88, 121, 55, 85, 112, 105, 84, 112, 87, 103, 102, 53, 101, 105, 75, 115, 77, 66, 54, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbdb20ea2eef84d8be3141b7e8ddd788u128, 0xb2dd548c3e541cb910d5892679f6c9cdu128).calculate_p2pkh_address(false).iter().zip([49, 77, 76, 50, 71, 89, 82, 69, 87, 114, 84, 76, 101, 97, 85, 85, 49, 109, 120, 57, 97, 105, 111, 78, 122, 122, 107, 100, 113, 65, 74, 56, 72, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xefb4039fdc19e7e64f3c3ab8b7eb8c81u128, 0x3972ac22f44136fe598a73698e4d98b0u128).calculate_p2pkh_address(false).iter().zip([49, 54, 110, 55, 49, 78, 121, 81, 65, 85, 69, 77, 107, 121, 83, 87, 81, 55, 55, 115, 77, 99, 107, 106, 82, 106, 119, 89, 71, 85, 120, 50, 119, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x19e4b0b6cc40b5d7b14d22515f80253eu128, 0xeb86738287710975e4755e8f9a519275u128).calculate_p2pkh_address(false).iter().zip([49, 78, 77, 83, 75, 119, 75, 102, 120, 109, 67, 78, 106, 104, 110, 118, 85, 85, 68, 80, 112, 107, 80, 90, 57, 103, 118, 114, 101, 66, 97, 76, 77, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x36f6eb2a3ceb2439b8bf07e47498cabdu128, 0xa0230c5e74a816ea3dae28cb9c874b4eu128).calculate_p2pkh_address(false).iter().zip([49, 69, 69, 106, 83, 111, 120, 84, 86, 86, 89, 57, 120, 106, 68, 84, 77, 53, 121, 115, 106, 113, 75, 67, 76, 105, 101, 82, 65, 104, 111, 77, 75, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x44338c0560c00e0045d8da75648f8b1cu128, 0xbc927c2de174b946a480926f9dd8ad20u128).calculate_p2pkh_address(false).iter().zip([49, 54, 122, 57, 66, 110, 83, 68, 113, 116, 101, 81, 82, 118, 109, 74, 111, 86, 77, 51, 68, 115, 75, 120, 115, 67, 115, 81, 56, 97, 57, 121, 82, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xba6a155132eb5fe0d37317df7e3b81bau128, 0x60f96153d42c0eb6b168688152016eb2u128).calculate_p2pkh_address(false).iter().zip([49, 70, 111, 65, 70, 76, 85, 99, 85, 90, 66, 90, 105, 121, 104, 69, 52, 75, 86, 83, 122, 106, 106, 70, 90, 116, 84, 78, 67, 86, 80, 69, 89, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf3e06847c55cfb1475fd65ed9eefd4b4u128, 0x9d6fc459035b5d78b39e40bf6b679ec9u128).calculate_p2pkh_address(false).iter().zip([49, 68, 74, 65, 71, 82, 89, 122, 71, 76, 113, 107, 102, 113, 89, 67, 105, 82, 114, 54, 97, 122, 105, 51, 120, 89, 54, 52, 112, 83, 77, 55, 113, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x41e564365417de4d55dc202101173e8fu128, 0xe226357e350f2d459d0553621495ffebu128).calculate_p2pkh_address(false).iter().zip([49, 57, 120, 109, 119, 100, 87, 112, 76, 120, 98, 90, 115, 112, 110, 68, 110, 116, 107, 101, 118, 69, 87, 89, 72, 122, 97, 66, 52, 70, 65, 112, 76, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xad08585599e65ac70444e30619758710u128, 0x6357d9b5bbda6cec7fdc09e03729a04eu128).calculate_p2pkh_address(false).iter().zip([49, 57, 50, 87, 115, 75, 85, 83, 72, 83, 76, 86, 76, 116, 66, 101, 104, 67, 90, 110, 103, 98, 116, 86, 107, 100, 51, 81, 85, 53, 114, 65, 102, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2e09dd3e10d54c8566f39732e690db3bu128, 0xa84cf11381716d21e311a66a1f1437u128).calculate_p2pkh_address(false).iter().zip([49, 72, 122, 97, 114, 76, 83, 78, 117, 106, 103, 56, 116, 103, 68, 116, 114, 69, 118, 71, 117, 72, 86, 53, 76, 89, 78, 77, 88, 110, 120, 119, 106, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3f65d5ddb0f7f7fe2d381a093b1230cfu128, 0x920dfbaf23036c6b8117e99fcb882bedu128).calculate_p2pkh_address(false).iter().zip([49, 81, 71, 88, 119, 117, 104, 109, 103, 102, 101, 118, 80, 55, 77, 105, 56, 54, 74, 56, 53, 104, 89, 52, 69, 113, 75, 101, 81, 109, 53, 115, 56, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x583ba2273ec208e623b770aed74174eau128, 0x3009e756e05cd08a29e859f5e4d1d747u128).calculate_p2pkh_address(false).iter().zip([49, 67, 111, 117, 85, 87, 101, 104, 50, 122, 86, 68, 57, 68, 74, 66, 49, 65, 76, 65, 99, 110, 113, 76, 80, 65, 55, 106, 121, 101, 109, 101, 88, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x14453f5a298873d878737ea99be5a102u128, 0xfa824863bff59ebeae6f58ebcef3f8cdu128).calculate_p2pkh_address(false).iter().zip([49, 66, 50, 114, 119, 71, 77, 82, 52, 69, 85, 89, 98, 105, 120, 70, 101, 84, 55, 101, 106, 106, 114, 115, 85, 54, 104, 120, 66, 83, 84, 106, 105, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x989932d1cf35d74053868448945e6dau128, 0x1742ba6b99cc805809f36cb2570f82c4u128).calculate_p2pkh_address(false).iter().zip([49, 76, 119, 87, 118, 74, 51, 120, 70, 49, 113, 74, 90, 68, 88, 105, 107, 100, 105, 49, 97, 88, 121, 90, 111, 80, 66, 66, 66, 103, 57, 115, 101, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        /**/assert!(U256::new(0x20df3df14608dc148adbc9961815b1a1u128, 0x4100f8244da53b1b8b1d38b07b6c0972u128).calculate_p2pkh_address(false).iter().zip([0, 49, 49, 66, 66, 116, 83, 81, 119, 121, 118, 118, 118, 99, 77, 101, 111, 87, 106, 68, 110, 110, 53, 100, 68, 75, 51, 115, 122, 56, 101, 106, 57, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8e53d1d3dd3b8e2d38f6443118dfc6efu128, 0x1838806c5b7efc00a923fe3770b524du128).calculate_p2pkh_address(false).iter().zip([49, 67, 98, 77, 83, 50, 98, 98, 114, 53, 52, 56, 98, 68, 97, 122, 65, 109, 84, 115, 90, 72, 116, 67, 84, 54, 85, 80, 111, 74, 81, 83, 114, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9f5799a480a1c457459c05c09b526616u128, 0x79b05b5c9aa4f1d7ea11feaba6665147u128).calculate_p2pkh_address(false).iter().zip([49, 52, 74, 100, 54, 116, 75, 53, 105, 49, 50, 49, 69, 99, 106, 102, 68, 115, 69, 117, 71, 119, 100, 121, 68, 118, 83, 101, 106, 54, 69, 97, 118, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x14383acb7894f62b7e029690e95b6681u128, 0xd9a314a97583f805923fd08d0a6e22c2u128).calculate_p2pkh_address(false).iter().zip([49, 57, 76, 53, 77, 68, 77, 52, 52, 86, 104, 67, 75, 78, 81, 114, 102, 103, 51, 68, 114, 109, 105, 84, 76, 57, 99, 103, 72, 83, 69, 84, 70, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x498f18c20e85aecba65c307501f9f103u128, 0xd8ed7ca300280112f6962ccd524cfe13u128).calculate_p2pkh_address(false).iter().zip([49, 69, 80, 84, 70, 57, 71, 115, 101, 106, 81, 70, 78, 49, 118, 84, 85, 111, 113, 121, 119, 65, 120, 68, 122, 78, 70, 65, 72, 56, 67, 85, 71, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf302ffce0fa40da2f80ee78255f7b827u128, 0x988b8c888d68d8f6270926fa2aab8e2u128).calculate_p2pkh_address(false).iter().zip([49, 70, 109, 89, 72, 105, 113, 54, 76, 101, 111, 74, 69, 69, 100, 66, 120, 90, 101, 49, 69, 57, 87, 83, 90, 114, 84, 102, 81, 114, 81, 87, 121, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbf6b0f1eac855d6225b20e7d8813d0e6u128, 0xb42e0dd6d83d140ba088d1dabcc26700u128).calculate_p2pkh_address(false).iter().zip([49, 74, 120, 122, 68, 119, 102, 67, 87, 75, 99, 119, 111, 77, 78, 56, 71, 65, 52, 51, 103, 55, 101, 82, 80, 120, 119, 76, 68, 82, 71, 89, 67, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x54b346eb086d7f11b39972ba98b78e2au128, 0x6ec16af6f8f809447275d7dc065828b6u128).calculate_p2pkh_address(false).iter().zip([49, 77, 97, 50, 81, 82, 56, 115, 57, 85, 103, 49, 50, 66, 52, 107, 82, 115, 54, 122, 55, 105, 69, 110, 115, 66, 54, 113, 101, 49, 113, 120, 75, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xab7a0afc67f25ab98b764874591332a3u128, 0xcb948364902b3f723f732e4db4b7977eu128).calculate_p2pkh_address(false).iter().zip([49, 77, 53, 98, 77, 78, 121, 65, 110, 51, 120, 122, 121, 52, 72, 50, 105, 74, 112, 55, 103, 115, 53, 70, 56, 119, 113, 70, 98, 76, 49, 101, 114, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x269f541ed8e319f289a1cec2628af022u128, 0xe5115ff2310c7b134023c0efc08b35b6u128).calculate_p2pkh_address(false).iter().zip([49, 72, 78, 87, 57, 106, 111, 101, 122, 99, 81, 115, 53, 88, 105, 84, 57, 100, 81, 69, 111, 57, 65, 102, 113, 66, 55, 107, 121, 88, 83, 120, 120, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc97520e5e0d678f9082492acff3b550du128, 0x9b56dbab5b992d0cf4988ba30c8f7f3fu128).calculate_p2pkh_address(false).iter().zip([49, 66, 78, 119, 56, 112, 119, 88, 65, 115, 78, 66, 70, 105, 100, 75, 65, 52, 77, 111, 100, 50, 121, 82, 71, 52, 49, 50, 49, 70, 103, 54, 105, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x595498474ee2d6f4e1c5838769c1ce4du128, 0x365cd65c2fb762e8d9cf82222cd06b11u128).calculate_p2pkh_address(false).iter().zip([49, 76, 53, 98, 121, 111, 88, 67, 86, 119, 86, 97, 53, 120, 72, 68, 117, 67, 118, 49, 119, 113, 99, 107, 90, 104, 97, 56, 119, 84, 71, 54, 99, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x35e211c8325d187ce87b5e1fcafac8cfu128, 0x65e4180f320617ee10048c3808d5b689u128).calculate_p2pkh_address(false).iter().zip([49, 78, 115, 107, 100, 84, 75, 69, 80, 98, 103, 68, 106, 111, 103, 81, 117, 50, 52, 55, 119, 80, 112, 121, 112, 100, 116, 57, 100, 68, 66, 104, 119, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c38d879891551a0af26055196e3acb6u128, 0x969ec587acf1fd5da6f07d11595e182u128).calculate_p2pkh_address(false).iter().zip([49, 54, 72, 101, 98, 103, 50, 103, 72, 69, 51, 116, 101, 81, 115, 119, 52, 74, 71, 98, 118, 99, 86, 112, 118, 121, 99, 81, 67, 81, 113, 76, 51, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3de9c1946c9c50e5026c1c83651dc7efu128, 0x9df0c736f5fbd9b3f55499c6bd01f921u128).calculate_p2pkh_address(false).iter().zip([0, 49, 105, 89, 115, 116, 104, 102, 83, 110, 111, 65, 110, 118, 85, 87, 78, 72, 55, 122, 72, 80, 102, 114, 118, 101, 111, 74, 107, 80, 114, 82, 120, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdd89dd956d65cc78d1e563cde45dfb38u128, 0xb96d14dea35922a79d186add1dbddb92u128).calculate_p2pkh_address(false).iter().zip([49, 55, 103, 54, 78, 113, 120, 89, 114, 105, 102, 55, 56, 101, 66, 65, 78, 120, 84, 87, 72, 89, 110, 57, 109, 76, 54, 89, 83, 85, 50, 56, 98, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4e0ffd94cc97d7518aee111c7ac0fdc1u128, 0xa43a84f22f3902c49a16243e06574228u128).calculate_p2pkh_address(false).iter().zip([49, 74, 70, 65, 53, 55, 116, 67, 106, 106, 122, 113, 55, 85, 54, 78, 55, 107, 72, 75, 53, 75, 104, 116, 68, 109, 99, 115, 117, 67, 56, 111, 89, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd3a7ccff2ef29eac039dc7ef5b41c77u128, 0x3752bb1c536ee54b2ef47036c77d7b15u128).calculate_p2pkh_address(false).iter().zip([49, 65, 109, 107, 55, 90, 102, 56, 69, 78, 116, 50, 67, 111, 50, 104, 97, 111, 103, 84, 109, 102, 120, 106, 100, 81, 119, 86, 121, 100, 56, 51, 68, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x825d56baa3fcaa3643f53589843ce35du128, 0x51540bfcd84d38175cd63ec93b0f91f9u128).calculate_p2pkh_address(false).iter().zip([49, 53, 68, 87, 85, 86, 83, 69, 49, 105, 54, 51, 113, 69, 50, 97, 77, 86, 54, 54, 122, 97, 113, 77, 115, 83, 99, 49, 72, 66, 51, 104, 54, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x697f224101e1ad83ed3a7cf5c6b0eaccu128, 0x2e170a33ce8f1d656fca3d916ab81bbdu128).calculate_p2pkh_address(false).iter().zip([49, 53, 71, 74, 80, 100, 51, 67, 81, 107, 87, 101, 68, 122, 76, 83, 51, 115, 71, 74, 53, 67, 86, 106, 75, 51, 120, 115, 55, 68, 116, 106, 101, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd5c94ee8b9fac91dfc1127124c960c29u128, 0xa13e4308e48c264c119203cf9c1b970au128).calculate_p2pkh_address(false).iter().zip([49, 67, 81, 117, 67, 106, 97, 122, 101, 104, 84, 70, 116, 90, 82, 74, 97, 51, 90, 115, 118, 106, 121, 114, 110, 87, 67, 118, 53, 78, 112, 118, 74, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6c6721a522dcf8f54e09c1c6b9ca39e9u128, 0x559f2b6671e87d10838b28b8e143adb1u128).calculate_p2pkh_address(false).iter().zip([49, 71, 66, 55, 107, 101, 112, 56, 84, 116, 122, 109, 115, 56, 54, 121, 71, 77, 119, 50, 65, 101, 99, 68, 75, 101, 57, 75, 74, 110, 98, 71, 120, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeacf8c8258c007d16ce3818e437d69b2u128, 0x595c21e53ed03f8ddacddfdadd2ba9dau128).calculate_p2pkh_address(false).iter().zip([49, 53, 49, 113, 69, 105, 118, 99, 101, 116, 86, 83, 65, 88, 103, 87, 66, 70, 87, 103, 89, 87, 112, 84, 121, 109, 82, 85, 54, 87, 81, 80, 72, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xacb532b175888b4495905b9e18e58445u128, 0x913fa9f4d706d4fa80d815e826d83c54u128).calculate_p2pkh_address(false).iter().zip([49, 78, 83, 98, 90, 116, 86, 87, 65, 112, 99, 117, 103, 80, 116, 113, 120, 114, 68, 111, 122, 81, 67, 82, 52, 85, 113, 53, 57, 90, 110, 76, 103, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x115ae4bb35cd9d13fbf9e920932b110au128, 0xc9956daafc72bfc7ce5ec1f0ad7bb7c4u128).calculate_p2pkh_address(false).iter().zip([49, 75, 90, 89, 84, 114, 121, 88, 74, 85, 90, 111, 98, 98, 120, 77, 105, 98, 67, 56, 109, 57, 81, 69, 70, 86, 50, 105, 97, 104, 115, 54, 107, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xea6e8a9c250a2cc51d6fa8e2a7aea091u128, 0x9d3a6959e69990e807823f97fa5706b4u128).calculate_p2pkh_address(false).iter().zip([49, 69, 104, 103, 85, 68, 82, 105, 52, 122, 118, 56, 111, 112, 57, 54, 51, 75, 117, 117, 86, 120, 111, 49, 54, 99, 85, 116, 56, 68, 122, 55, 65, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa2da123fb20365f193d7e900235c5bbcu128, 0xe6d1bf871b01b82f8866568c3d0218au128).calculate_p2pkh_address(false).iter().zip([49, 70, 112, 57, 112, 55, 109, 80, 70, 52, 104, 97, 118, 78, 105, 110, 75, 115, 80, 68, 122, 77, 99, 67, 70, 104, 116, 97, 114, 100, 71, 52, 68, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1645da7d75a52d58def45d7752ac400bu128, 0x693372150a75d47404b071fe9b72bb72u128).calculate_p2pkh_address(false).iter().zip([49, 57, 56, 103, 90, 118, 71, 76, 86, 115, 105, 53, 74, 116, 116, 83, 66, 120, 54, 121, 116, 87, 83, 102, 86, 87, 90, 57, 110, 56, 89, 102, 82, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x382a0c5b5cb8467956d3b0a7ed0ac5e0u128, 0xee941f2d1b45c036f71a5a1b36f3bb98u128).calculate_p2pkh_address(false).iter().zip([49, 57, 69, 54, 55, 78, 52, 56, 97, 56, 97, 111, 70, 78, 115, 57, 82, 87, 107, 65, 110, 80, 104, 120, 68, 90, 53, 78, 57, 66, 80, 57, 112, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa0b355d5edd9916f46e26ac198f9252u128, 0xb5c712211c2a134b2c6fce5a3ba42022u128).calculate_p2pkh_address(false).iter().zip([49, 72, 98, 80, 119, 53, 105, 75, 72, 99, 97, 49, 107, 76, 100, 78, 68, 111, 54, 121, 55, 53, 90, 117, 68, 66, 81, 86, 76, 77, 109, 116, 99, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaf0099d8a8fdda70df4ee450b6496e31u128, 0x94c2bedde3baf1773a100bb35a1a0dd5u128).calculate_p2pkh_address(false).iter().zip([49, 50, 51, 53, 86, 115, 122, 66, 114, 106, 55, 111, 80, 99, 120, 119, 72, 68, 113, 90, 114, 113, 78, 76, 117, 68, 89, 50, 88, 69, 89, 111, 114, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x38a7c1ae27e68bd12d3f9c1a36d50e2au128, 0x44383320414367efb400d2ee9bdc6b6du128).calculate_p2pkh_address(false).iter().zip([49, 76, 81, 88, 70, 102, 71, 50, 78, 104, 103, 120, 81, 68, 72, 116, 67, 65, 114, 85, 76, 100, 82, 80, 107, 50, 99, 106, 109, 115, 70, 78, 69, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6381d3bda1e8c9dd1a5bc0540e28ab28u128, 0x6bfde062d58fe44c778476c65205bbdeu128).calculate_p2pkh_address(false).iter().zip([49, 69, 107, 52, 50, 78, 75, 109, 116, 102, 98, 52, 85, 111, 67, 119, 66, 120, 104, 57, 50, 103, 81, 102, 67, 115, 110, 103, 115, 83, 57, 80, 65, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcdec3d493cc23236e1404fe239b642bu128, 0x6bfc4ce2abd466420eb5f7b219900668u128).calculate_p2pkh_address(false).iter().zip([49, 71, 120, 105, 97, 50, 86, 107, 76, 119, 113, 49, 109, 83, 109, 51, 57, 57, 99, 99, 75, 119, 84, 50, 83, 83, 75, 50, 105, 78, 78, 98, 97, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x73e60128bc6cce81c37e9779ca27b861u128, 0xc0c25cf40636caaf583c370305390719u128).calculate_p2pkh_address(false).iter().zip([49, 57, 105, 49, 110, 105, 69, 53, 53, 105, 72, 85, 114, 111, 100, 120, 80, 53, 74, 122, 89, 49, 68, 104, 51, 81, 55, 100, 50, 117, 121, 66, 71, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb252ff5c1feafaa1dff3acd5a58e121u128, 0xd4ef41ee3c245b732d22a7d8ef622969u128).calculate_p2pkh_address(false).iter().zip([49, 74, 88, 106, 105, 50, 101, 86, 71, 118, 78, 116, 81, 97, 49, 54, 117, 89, 116, 109, 69, 55, 66, 113, 81, 71, 86, 98, 112, 97, 67, 112, 49, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3e87b505c69b1aaff7988b84aba45fa2u128, 0xce5d26cce91d864028a98eb5bc288e0du128).calculate_p2pkh_address(false).iter().zip([49, 80, 52, 68, 52, 100, 56, 88, 55, 50, 98, 117, 78, 111, 115, 81, 117, 101, 97, 121, 101, 69, 122, 68, 52, 49, 119, 121, 80, 55, 68, 65, 111, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdc96cfa4776eef0c22924cf4f36d1244u128, 0x2eb1828523e5bd8183ecd26161d08c39u128).calculate_p2pkh_address(false).iter().zip([49, 76, 111, 100, 71, 67, 103, 113, 88, 99, 86, 110, 97, 120, 109, 106, 90, 89, 82, 67, 90, 83, 82, 55, 101, 88, 69, 75, 77, 81, 104, 119, 110, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe780b80d8c24640e7ff863629110b92du128, 0xf63d7e0defb3a940eef58a708cc32f8cu128).calculate_p2pkh_address(false).iter().zip([49, 76, 115, 70, 109, 97, 99, 121, 56, 86, 117, 97, 81, 89, 117, 55, 109, 89, 65, 85, 76, 86, 119, 80, 122, 83, 50, 49, 76, 118, 109, 109, 67, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4912f84cf3fe787c9a02793c5d5a36ebu128, 0xe69b08fa36272fac7159401e8bd74e0u128).calculate_p2pkh_address(false).iter().zip([49, 56, 66, 90, 97, 97, 65, 121, 65, 116, 67, 119, 77, 67, 112, 113, 112, 114, 76, 52, 52, 114, 107, 113, 86, 102, 49, 49, 53, 85, 86, 87, 80, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3de051474079579c1431956ddc03274au128, 0x464f6169d395457301c639d747df7cc7u128).calculate_p2pkh_address(false).iter().zip([49, 75, 84, 57, 110, 117, 71, 86, 52, 100, 99, 90, 119, 88, 54, 53, 51, 120, 122, 78, 75, 97, 65, 69, 88, 100, 113, 114, 98, 99, 76, 119, 105, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x85d7467ce186c419fc69d2c19e4235acu128, 0xba5364778233e6af78088b2a4af010dcu128).calculate_p2pkh_address(false).iter().zip([49, 75, 68, 55, 76, 122, 55, 118, 98, 103, 120, 98, 121, 120, 97, 87, 51, 49, 82, 81, 106, 81, 54, 77, 118, 77, 67, 50, 107, 115, 107, 77, 85, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x58cea9b02b6990f42269317b57e6033bu128, 0x14df7c20ea2fc61719a8ec71b8546c96u128).calculate_p2pkh_address(false).iter().zip([49, 78, 115, 101, 71, 80, 106, 116, 118, 81, 55, 77, 52, 107, 83, 51, 85, 106, 116, 116, 66, 65, 85, 85, 86, 104, 118, 75, 68, 111, 90, 87, 97, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2be7915179d642ed087f286035e95e1u128, 0xd598710d46107b1d3343b7fc525adc03u128).calculate_p2pkh_address(false).iter().zip([49, 57, 86, 49, 97, 57, 106, 109, 56, 52, 120, 117, 70, 74, 51, 109, 110, 89, 114, 54, 75, 77, 83, 81, 105, 90, 50, 114, 69, 101, 68, 76, 52, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b85228833e2c8f143b84a970449f582u128, 0x6305ec7fd54d8d696587a65128c4631fu128).calculate_p2pkh_address(false).iter().zip([49, 75, 68, 107, 78, 49, 97, 83, 49, 50, 100, 77, 83, 65, 49, 110, 99, 99, 105, 103, 75, 55, 66, 105, 104, 119, 53, 54, 118, 75, 107, 72, 71, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2ff1cdc8f6996165ab6b6f45f87bc6b4u128, 0xa1acd6ed833e0dbc5741f6fe137874a4u128).calculate_p2pkh_address(false).iter().zip([49, 52, 49, 119, 54, 65, 65, 122, 67, 97, 117, 97, 99, 103, 102, 71, 100, 104, 97, 83, 119, 120, 122, 105, 76, 115, 55, 80, 117, 119, 67, 78, 54, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf314bffc1a7eac5b2a6991723bb8922eu128, 0x5f0f01a558764af3d8e55f05d7584c7u128).calculate_p2pkh_address(false).iter().zip([0, 49, 54, 82, 98, 103, 53, 65, 122, 77, 121, 105, 90, 81, 72, 121, 53, 90, 50, 103, 103, 70, 75, 76, 98, 52, 76, 81, 54, 119, 68, 107, 89, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeca64dece31c206ec71de1e918ec46bcu128, 0x7d73d3c9c7344a65a5c7ee751ae9bb0bu128).calculate_p2pkh_address(false).iter().zip([49, 65, 98, 111, 53, 99, 68, 51, 55, 71, 82, 114, 66, 106, 90, 68, 66, 121, 120, 56, 109, 71, 106, 55, 119, 51, 122, 105, 122, 87, 100, 102, 120, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf019a5d93997b8bf6b5351fd73845b05u128, 0xd268217891094f7f0bc26a1215ae73f7u128).calculate_p2pkh_address(false).iter().zip([49, 74, 65, 68, 57, 88, 57, 112, 66, 72, 55, 119, 88, 78, 67, 113, 76, 68, 97, 107, 75, 71, 53, 111, 117, 70, 83, 105, 67, 120, 117, 118, 66, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf3f36b185d94e74715ab61dfb6c7f2d6u128, 0xb9ac4251a3ff6f0eaed3be4ea8316b3fu128).calculate_p2pkh_address(false).iter().zip([49, 55, 54, 100, 104, 53, 120, 103, 78, 88, 87, 87, 113, 121, 90, 53, 120, 53, 49, 82, 87, 121, 68, 113, 90, 121, 72, 77, 105, 102, 121, 52, 112, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeac2d8449c294e7f2e81513d288963f0u128, 0x652768795311052b51c8db32f496243eu128).calculate_p2pkh_address(false).iter().zip([49, 53, 51, 76, 74, 119, 110, 56, 68, 70, 102, 118, 65, 112, 98, 99, 122, 102, 68, 51, 99, 109, 66, 103, 66, 49, 81, 86, 110, 74, 107, 86, 89, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1b114cc234300a5d26bdbf2c3fe116dbu128, 0xe0fe093dcb70b47e6f7dacaf56bdd70au128).calculate_p2pkh_address(false).iter().zip([49, 68, 113, 111, 72, 109, 72, 118, 83, 50, 116, 54, 65, 122, 68, 71, 69, 66, 97, 120, 78, 117, 84, 50, 116, 49, 52, 110, 78, 56, 90, 80, 74, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6ce30dd068918697bf9ed0de9ede42ebu128, 0xca5ff0d7d9bea48f947e860539ef084eu128).calculate_p2pkh_address(false).iter().zip([49, 72, 76, 120, 51, 72, 106, 71, 118, 121, 120, 81, 89, 116, 117, 98, 115, 67, 49, 107, 51, 76, 117, 89, 121, 72, 119, 69, 98, 52, 53, 76, 69, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x153028a5dacc8dbf785ae61ef43b377fu128, 0xe8ad6230bcaf609c372d5e5ef96cac01u128).calculate_p2pkh_address(false).iter().zip([0, 49, 83, 100, 116, 68, 51, 89, 67, 80, 83, 117, 51, 72, 122, 76, 80, 121, 65, 89, 56, 74, 80, 88, 121, 86, 101, 80, 54, 83, 54, 71, 68, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfa5be04f67148e185d132e2f2043f755u128, 0xc7e351351b9299779845e96778010e68u128).calculate_p2pkh_address(false).iter().zip([49, 78, 103, 52, 77, 51, 74, 120, 67, 121, 71, 111, 116, 57, 97, 85, 51, 86, 74, 86, 84, 57, 80, 81, 110, 65, 90, 57, 119, 114, 99, 90, 101, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd4f5cee82577a0243f3156eef2b2a76u128, 0xf4d603416b68d21e6f44cb4ca4d4571u128).calculate_p2pkh_address(false).iter().zip([49, 68, 76, 81, 88, 74, 70, 101, 88, 53, 120, 88, 98, 52, 76, 55, 72, 106, 51, 81, 105, 85, 98, 97, 67, 90, 65, 90, 76, 121, 77, 97, 69, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdfc08213c06477d3a009747865db29bdu128, 0x9ebdd42fb62b7258343d18bd4ceae991u128).calculate_p2pkh_address(false).iter().zip([0, 49, 107, 112, 106, 88, 53, 80, 122, 109, 76, 49, 107, 77, 122, 97, 98, 85, 74, 122, 98, 110, 77, 51, 119, 69, 83, 110, 89, 113, 71, 102, 86, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x284b00c208ea0eddc76ad2dc7890475bu128, 0x4d6832fec2a2fa4ebf82da9056b822e0u128).calculate_p2pkh_address(false).iter().zip([49, 50, 118, 100, 88, 78, 97, 54, 118, 104, 68, 76, 50, 53, 53, 52, 77, 67, 109, 116, 104, 67, 119, 76, 81, 68, 118, 65, 104, 115, 69, 67, 109, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdc66a4c5c4a5dae16f1fd06e666eaf41u128, 0x2507c82f908f165d0ee1042b9f6d4f33u128).calculate_p2pkh_address(false).iter().zip([49, 65, 101, 112, 120, 77, 65, 71, 55, 98, 72, 101, 88, 119, 86, 118, 69, 103, 54, 87, 71, 103, 106, 116, 78, 87, 49, 75, 120, 51, 85, 67, 113, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x332ea20e4fd2c32d38becb2885c7d256u128, 0x634505b41a9083e012d51d6b0fc3b682u128).calculate_p2pkh_address(false).iter().zip([49, 66, 106, 74, 100, 50, 55, 81, 72, 110, 70, 103, 116, 98, 77, 87, 102, 86, 77, 78, 85, 74, 105, 103, 86, 120, 109, 113, 72, 121, 71, 106, 119, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb216465af3f8c5bb661bf68911a81cc5u128, 0xc2e359de7cdf514963886c6ca1afa208u128).calculate_p2pkh_address(false).iter().zip([0, 49, 82, 106, 116, 69, 116, 110, 115, 115, 113, 113, 120, 107, 112, 82, 111, 90, 77, 81, 115, 110, 55, 78, 88, 55, 69, 113, 52, 98, 68, 97, 110, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7c123553b226ad7db3bd996d2d6d177fu128, 0xa950322b5933d4ad6701d33a1d95707bu128).calculate_p2pkh_address(false).iter().zip([49, 54, 57, 105, 83, 80, 69, 101, 72, 67, 57, 106, 55, 57, 101, 74, 120, 115, 119, 67, 53, 71, 103, 78, 86, 55, 99, 118, 112, 78, 100, 102, 85, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xef9d743b5b769c6e654693be67bdc4f9u128, 0x4e3e2a1d7aed66964edf623f7623812fu128).calculate_p2pkh_address(false).iter().zip([49, 70, 118, 98, 65, 50, 78, 81, 109, 82, 53, 49, 85, 107, 90, 104, 111, 116, 50, 83, 71, 121, 101, 97, 87, 116, 78, 51, 90, 76, 100, 116, 72, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1127f426ed8e7e38335ad1db5533faecu128, 0x1e30646e6bfb2a3786a300a5424e2709u128).calculate_p2pkh_address(false).iter().zip([49, 54, 122, 87, 78, 57, 54, 57, 105, 114, 86, 55, 90, 89, 120, 97, 72, 105, 71, 89, 104, 114, 119, 88, 78, 101, 83, 83, 72, 83, 66, 106, 89, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xec6f2e48acaa7f36bc0ff93c2bff15bdu128, 0xf31126dc219260cc504a1e1859745cefu128).calculate_p2pkh_address(false).iter().zip([49, 68, 65, 102, 53, 100, 98, 49, 102, 116, 101, 53, 121, 98, 65, 49, 97, 102, 77, 84, 70, 122, 67, 83, 75, 113, 81, 82, 99, 65, 81, 52, 57, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x44da28d061b244b5bd7e9f1e822dbb6au128, 0xdd93b46c9441103ec5f39205a0a27ecu128).calculate_p2pkh_address(false).iter().zip([49, 54, 109, 103, 109, 120, 51, 107, 80, 56, 67, 49, 81, 74, 103, 55, 116, 120, 84, 74, 120, 77, 87, 78, 115, 80, 52, 107, 117, 115, 99, 90, 50, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc9011ba4611cde83b4d1b9560192e4au128, 0xce9f62097978115fafc507cefcca8eau128).calculate_p2pkh_address(false).iter().zip([49, 81, 53, 78, 52, 80, 115, 72, 120, 100, 82, 55, 53, 90, 77, 100, 87, 74, 117, 87, 111, 105, 98, 72, 65, 110, 75, 69, 57, 84, 51, 54, 53, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8ed952a0b0583cc1f85a443c96379125u128, 0x75ad7ca971541a13cd4201b7a608fb87u128).calculate_p2pkh_address(false).iter().zip([49, 67, 121, 49, 119, 76, 117, 88, 83, 50, 97, 49, 70, 52, 82, 76, 69, 72, 65, 56, 52, 89, 115, 112, 117, 69, 83, 122, 120, 71, 98, 85, 118, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd4ca41a842ecce858f6e801cfedfd619u128, 0x8bf27e5a1e447114b5384d802e317857u128).calculate_p2pkh_address(false).iter().zip([49, 55, 97, 49, 98, 80, 52, 103, 88, 121, 97, 89, 97, 74, 67, 116, 101, 82, 75, 118, 98, 69, 98, 76, 106, 49, 77, 52, 87, 112, 78, 51, 115, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc6c230cdc78c36254e05fdc62d616f31u128, 0xcedd268451085ac22ddfc9226b66695cu128).calculate_p2pkh_address(false).iter().zip([0, 49, 110, 113, 51, 122, 115, 65, 70, 116, 102, 50, 55, 116, 98, 106, 112, 84, 66, 99, 120, 82, 100, 55, 97, 107, 118, 78, 121, 83, 57, 112, 115, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdee7ed9c04cd8af2387c722bc3a79772u128, 0x1fcadd369a0725c02c57e573caaf2815u128).calculate_p2pkh_address(false).iter().zip([49, 68, 55, 50, 57, 90, 117, 52, 88, 57, 50, 71, 83, 69, 106, 56, 120, 98, 89, 89, 66, 115, 54, 85, 80, 72, 85, 81, 90, 50, 121, 103, 117, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa3d10a00f723f2446f3611b9d4771453u128, 0x45237638afa51a183e2f04264f346db4u128).calculate_p2pkh_address(false).iter().zip([49, 68, 107, 121, 102, 53, 81, 90, 117, 72, 56, 80, 78, 75, 119, 56, 119, 104, 68, 71, 72, 112, 114, 55, 51, 70, 112, 112, 54, 119, 55, 84, 113, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe3f86736315b71eab8c6509da8c0c1cbu128, 0x9c4fffdba63a3dcdb13bbd433c3ce763u128).calculate_p2pkh_address(false).iter().zip([49, 51, 90, 107, 49, 117, 116, 114, 74, 117, 75, 97, 122, 111, 111, 120, 67, 84, 97, 86, 71, 65, 69, 70, 57, 55, 118, 115, 110, 118, 107, 102, 89, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbdecba96cd3adedf25ed79199e74f73du128, 0x2f650f2c6938c9c3d5130acb81215617u128).calculate_p2pkh_address(false).iter().zip([49, 57, 103, 109, 72, 71, 101, 115, 75, 83, 67, 68, 116, 109, 112, 99, 67, 101, 117, 122, 74, 118, 113, 107, 71, 83, 120, 113, 102, 114, 53, 110, 120, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x36218ff858710b78b72ee12439dcf8ceu128, 0xce2e9fd46b5baf3d2ce8ed6c042ed4f9u128).calculate_p2pkh_address(false).iter().zip([49, 53, 122, 122, 118, 98, 83, 120, 71, 82, 102, 72, 51, 87, 114, 104, 67, 112, 77, 55, 99, 72, 74, 104, 74, 116, 68, 120, 104, 66, 119, 115, 74, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaca4271fa449c29a5c07efcba6d66250u128, 0x6a8a9e47e0b0cef6f747e61b317b2af8u128).calculate_p2pkh_address(false).iter().zip([49, 55, 103, 118, 81, 52, 120, 76, 49, 69, 77, 89, 85, 65, 81, 76, 102, 117, 102, 76, 118, 68, 115, 111, 78, 121, 118, 51, 86, 72, 122, 75, 87, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc36d0835318f612de9a3010891d924c7u128, 0xce870f49131f59a30b96b22d4b21f217u128).calculate_p2pkh_address(false).iter().zip([49, 75, 122, 82, 55, 81, 110, 99, 56, 57, 72, 85, 52, 51, 74, 101, 85, 116, 70, 114, 113, 105, 89, 77, 113, 113, 98, 115, 111, 103, 81, 65, 72, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x17ce4c49ea8e3ab72714f31028823e96u128, 0xc254466a15768f9fe909f74d01d618f2u128).calculate_p2pkh_address(false).iter().zip([49, 68, 106, 97, 120, 89, 72, 78, 75, 67, 109, 119, 105, 83, 71, 78, 121, 55, 56, 101, 104, 49, 116, 80, 82, 50, 51, 76, 85, 51, 111, 53, 112, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcf686946d4b1af7fd55a27f27d176d95u128, 0x7f1a6146badfc12885978cb7587ac250u128).calculate_p2pkh_address(false).iter().zip([49, 67, 103, 82, 88, 81, 83, 84, 75, 81, 69, 51, 97, 54, 90, 101, 98, 75, 106, 111, 116, 100, 65, 77, 115, 90, 67, 112, 51, 100, 119, 85, 90, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3aac56f2136f1ac461f3354769d8ed1u128, 0x8256365c5b77fcd385f67b574c1b26f8u128).calculate_p2pkh_address(false).iter().zip([49, 53, 119, 68, 99, 89, 49, 52, 100, 98, 99, 70, 119, 111, 105, 85, 116, 55, 101, 116, 86, 66, 116, 109, 51, 76, 109, 122, 86, 100, 98, 72, 114, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcb7573edaddddf06761c95d1e5d999ffu128, 0x6ca60dfdd3dd1069c71700ab7a43b68du128).calculate_p2pkh_address(false).iter().zip([49, 68, 66, 109, 97, 70, 116, 83, 121, 72, 104, 118, 87, 111, 98, 66, 88, 74, 111, 77, 107, 98, 75, 109, 101, 112, 78, 117, 54, 86, 68, 74, 104, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbd88a51a6905d9b1a709c6bb951da313u128, 0x56363c7c9492b2ec1e66c5912f790e66u128).calculate_p2pkh_address(false).iter().zip([49, 66, 100, 111, 56, 68, 98, 69, 57, 56, 113, 102, 83, 98, 77, 116, 83, 107, 53, 71, 84, 99, 84, 103, 78, 51, 53, 49, 49, 118, 81, 106, 49, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x38b6a94c8d191bd2c52df5a49b8e48adu128, 0xddd0a2e292ff5d53fbdcc1772b99a25au128).calculate_p2pkh_address(false).iter().zip([49, 51, 103, 50, 72, 111, 114, 65, 113, 100, 112, 52, 82, 57, 77, 85, 77, 68, 67, 50, 88, 98, 117, 121, 121, 49, 101, 68, 103, 65, 103, 114, 106, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x30d435918335632d1836b964c0febcffu128, 0x9750d01ba4cd823ff03645c4e565598bu128).calculate_p2pkh_address(false).iter().zip([49, 51, 112, 100, 67, 85, 50, 53, 81, 97, 119, 89, 121, 68, 116, 77, 113, 107, 78, 65, 105, 68, 51, 80, 120, 76, 106, 112, 65, 85, 98, 117, 87, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9ff54ba603b1520ecdb63217feef9888u128, 0x36b4e3be03fd5a6c2148c2c773b11982u128).calculate_p2pkh_address(false).iter().zip([49, 57, 77, 122, 119, 87, 119, 76, 51, 118, 107, 65, 84, 119, 98, 86, 109, 90, 83, 56, 85, 51, 54, 109, 106, 111, 82, 86, 70, 72, 102, 75, 116, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa235981b49c8cbf56fce2f1086c6bba6u128, 0x1218c60b746e9492b7c3f84e8f863f32u128).calculate_p2pkh_address(false).iter().zip([49, 52, 67, 68, 84, 68, 102, 103, 68, 118, 122, 69, 70, 99, 86, 78, 65, 66, 70, 55, 83, 90, 109, 74, 67, 97, 57, 117, 90, 52, 114, 102, 109, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc018759d6ed390d0bf7606114e03fbfu128, 0x650dfa18b6893ff256e61dab48e0f0ffu128).calculate_p2pkh_address(false).iter().zip([49, 57, 97, 113, 81, 74, 85, 50, 81, 89, 52, 65, 86, 84, 105, 49, 101, 90, 106, 103, 80, 67, 49, 81, 97, 80, 66, 90, 89, 52, 52, 90, 119, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa280b5c06b2b307aec848c49984fe118u128, 0x750cfc71581cce492b378ead07d73befu128).calculate_p2pkh_address(false).iter().zip([49, 74, 82, 49, 82, 56, 87, 88, 74, 116, 68, 49, 98, 119, 113, 80, 72, 67, 110, 107, 49, 83, 67, 71, 115, 102, 107, 76, 70, 114, 119, 113, 89, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8dc1228de465f52314155a1db29b193au128, 0x2757f35e5d729aa6d46400b55afb89bbu128).calculate_p2pkh_address(false).iter().zip([49, 80, 80, 55, 117, 72, 82, 74, 49, 101, 115, 82, 117, 84, 114, 69, 74, 117, 53, 97, 74, 82, 68, 102, 67, 101, 98, 106, 98, 89, 81, 66, 50, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x671af2bc179c5e11ed6c1f550f2bbc02u128, 0x2e50bbd4146252e21ca82bad5d481635u128).calculate_p2pkh_address(false).iter().zip([49, 66, 52, 66, 50, 107, 85, 51, 77, 57, 57, 71, 71, 66, 115, 65, 75, 52, 110, 89, 57, 56, 76, 89, 122, 85, 100, 99, 74, 81, 111, 57, 98, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2e263d2ce9e6f4fa93341b1c706affd2u128, 0xac6f238d493ab06b02fef53cbe89f27cu128).calculate_p2pkh_address(false).iter().zip([49, 57, 54, 98, 116, 99, 77, 89, 50, 98, 88, 101, 52, 74, 121, 50, 75, 66, 57, 117, 54, 50, 107, 49, 104, 109, 77, 116, 57, 57, 98, 87, 55, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6904f3d886d681658e40f3eb0a8e10e2u128, 0xfdd48de86053a04925478f98862eb608u128).calculate_p2pkh_address(false).iter().zip([49, 80, 105, 115, 52, 49, 68, 115, 57, 109, 118, 56, 117, 77, 104, 120, 66, 98, 76, 104, 78, 107, 80, 112, 51, 70, 97, 101, 69, 111, 75, 122, 82, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x92a91d9f0b39136839b633a40672019au128, 0xa8f0a7daa4386c8dfe754ca97c2b41c7u128).calculate_p2pkh_address(false).iter().zip([49, 57, 71, 103, 97, 68, 117, 51, 107, 98, 83, 105, 51, 122, 50, 116, 50, 90, 51, 83, 118, 82, 54, 65, 67, 68, 111, 77, 104, 52, 118, 50, 57, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcf2c91fd5ad513775ad6b637b780e90du128, 0xe84dc3aa3cfa866f9c871f0ca86a4b61u128).calculate_p2pkh_address(false).iter().zip([49, 76, 56, 56, 113, 80, 56, 110, 100, 110, 119, 109, 54, 67, 72, 76, 98, 83, 70, 111, 56, 65, 49, 104, 106, 55, 55, 69, 85, 56, 49, 119, 109, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x66526f7473013b11646152d2eafdd126u128, 0x36809341e4502b0c2ef34629a09995fau128).calculate_p2pkh_address(false).iter().zip([49, 52, 85, 72, 80, 70, 89, 85, 77, 66, 99, 99, 111, 67, 119, 88, 82, 76, 87, 118, 102, 105, 50, 120, 70, 122, 115, 102, 107, 101, 101, 89, 83, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd4c9d7cee41df20cb7bfd541c4f73cabu128, 0xf296baad90a95dd01022c4ac93454c92u128).calculate_p2pkh_address(false).iter().zip([49, 75, 117, 49, 111, 88, 111, 83, 118, 68, 69, 118, 114, 107, 67, 87, 115, 100, 118, 113, 74, 97, 112, 115, 70, 72, 82, 69, 100, 117, 54, 98, 111, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x95407dfe00ddcec73b2dfc239b505ce9u128, 0x355b0b2403513656ce7da54a0d19c5dbu128).calculate_p2pkh_address(false).iter().zip([49, 50, 82, 76, 120, 52, 83, 120, 71, 89, 97, 122, 101, 111, 122, 111, 55, 119, 105, 57, 119, 119, 115, 74, 71, 81, 57, 81, 117, 102, 67, 85, 105, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6ac5a7dea1ada4d7b5b6e9d03cb6a265u128, 0x4f93809888a36ea077506509285b8220u128).calculate_p2pkh_address(false).iter().zip([49, 53, 72, 105, 113, 110, 82, 74, 111, 117, 90, 74, 67, 103, 85, 99, 109, 51, 80, 74, 84, 77, 113, 114, 119, 111, 116, 115, 54, 102, 57, 51, 89, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6111f826b1d7fab5e61a31b66d8fa9c7u128, 0xf1f0bd0da4966c3b9a9957177524b81bu128).calculate_p2pkh_address(false).iter().zip([0, 49, 120, 72, 102, 81, 102, 84, 72, 89, 117, 112, 68, 117, 56, 104, 76, 54, 111, 50, 86, 83, 111, 119, 121, 53, 66, 113, 83, 87, 110, 70, 112, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xad7ce159c23832e9852cad524512e2cbu128, 0x8ea2c795f8ba5b4be3fe0e428fe81a2au128).calculate_p2pkh_address(false).iter().zip([49, 68, 71, 81, 76, 76, 87, 71, 104, 101, 117, 57, 113, 67, 115, 52, 77, 113, 82, 52, 88, 65, 70, 71, 49, 88, 89, 76, 101, 56, 81, 85, 118, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9dd4aeff749432b558ed87817a02ba1fu128, 0x8016d8d622035d2d7757e6051de554b0u128).calculate_p2pkh_address(false).iter().zip([49, 57, 78, 83, 104, 68, 111, 105, 107, 114, 54, 112, 113, 69, 115, 77, 100, 97, 119, 55, 86, 121, 90, 113, 89, 71, 112, 55, 110, 101, 118, 115, 51, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7080f3048808cf39159d947919b53a1fu128, 0xabe955d2263e0913dcab83829bd73736u128).calculate_p2pkh_address(false).iter().zip([49, 78, 66, 68, 51, 109, 86, 107, 70, 89, 104, 98, 105, 76, 117, 81, 66, 107, 98, 107, 122, 100, 53, 104, 104, 105, 66, 85, 89, 90, 53, 75, 97, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe6faae1e29851a4194029592ee5943afu128, 0x479cfbbc08cabcb186504de1852b11dbu128).calculate_p2pkh_address(false).iter().zip([49, 77, 51, 72, 97, 106, 55, 69, 99, 98, 49, 51, 85, 115, 106, 85, 106, 76, 98, 76, 51, 76, 90, 107, 54, 53, 101, 119, 119, 78, 103, 53, 113, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6ecca288644dcb74cd4b6ecd27674cbu128, 0xb3ddc725e97bbae5f3c971f8f738d3dau128).calculate_p2pkh_address(false).iter().zip([49, 76, 82, 120, 83, 78, 67, 90, 102, 113, 85, 65, 115, 50, 110, 84, 87, 57, 111, 111, 107, 87, 122, 98, 87, 81, 101, 65, 104, 84, 109, 50, 110, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x22cf2249740043c3798887a7ae215cau128, 0xb0c79d9bcb575f5b1d7743eb9bc683dfu128).calculate_p2pkh_address(false).iter().zip([49, 67, 100, 113, 54, 85, 87, 82, 68, 107, 88, 116, 65, 86, 71, 50, 69, 76, 81, 67, 72, 101, 121, 74, 115, 72, 67, 115, 101, 120, 90, 85, 50, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd5cd069eceea06fa9e2fcc58a98e37c0u128, 0x953fead12172b0de96326ebf1500e780u128).calculate_p2pkh_address(false).iter().zip([49, 78, 74, 87, 56, 81, 99, 121, 102, 117, 66, 55, 97, 117, 106, 54, 102, 75, 78, 90, 74, 72, 80, 99, 107, 55, 50, 49, 90, 106, 70, 110, 105, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8f3883f251048ae0d45952ab54020e9bu128, 0x253d8ad0c2239e3f82e20f56392c9230u128).calculate_p2pkh_address(false).iter().zip([49, 66, 76, 112, 103, 86, 119, 122, 67, 70, 97, 117, 99, 77, 78, 57, 100, 68, 66, 112, 78, 101, 110, 107, 106, 52, 99, 51, 51, 104, 104, 56, 115, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7046f60ef4bee5c9301b2918df2e2dfau128, 0xbbff2810e505a87528ab7f50a8cdaa77u128).calculate_p2pkh_address(false).iter().zip([49, 77, 101, 112, 53, 89, 86, 66, 72, 102, 114, 49, 102, 89, 98, 78, 116, 89, 67, 104, 57, 106, 74, 66, 117, 111, 88, 107, 121, 55, 100, 114, 103, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x63ce2f7eb20a675a03c2ed8963ffd5d9u128, 0x6f888fa76140c9638eea2f9e05dd99b6u128).calculate_p2pkh_address(false).iter().zip([49, 77, 78, 84, 52, 116, 100, 82, 54, 87, 105, 101, 78, 109, 77, 53, 98, 100, 80, 86, 112, 112, 85, 50, 106, 87, 75, 80, 68, 110, 83, 115, 107, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b6832e110295eb12f5600405ddbbeddu128, 0xace93fc4202851adcc16e4224c5f9d36u128).calculate_p2pkh_address(false).iter().zip([49, 53, 74, 57, 120, 75, 86, 117, 114, 110, 52, 81, 102, 85, 100, 105, 81, 77, 103, 69, 74, 101, 101, 121, 80, 87, 83, 102, 114, 90, 55, 120, 110, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x16476ad9d23f31f780c5b5872839266fu128, 0xb1d7f818976157ae8bb4b503e2808b8au128).calculate_p2pkh_address(false).iter().zip([49, 53, 70, 97, 75, 109, 52, 54, 83, 116, 65, 97, 53, 107, 103, 104, 75, 113, 75, 109, 70, 111, 117, 98, 80, 52, 75, 101, 97, 87, 57, 100, 122, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x30a8e348b27874a9c41fede3ec6231acu128, 0xc8c119ecf4d9afc088c112ce48df74au128).calculate_p2pkh_address(false).iter().zip([49, 69, 87, 50, 76, 120, 106, 57, 102, 107, 69, 100, 76, 66, 55, 80, 80, 76, 110, 117, 109, 117, 51, 55, 105, 50, 113, 87, 67, 97, 100, 107, 85, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x316d7b39e3e98c41658757bf2926fa8fu128, 0x4d38eb547b81f56f0c43b8a89a29c865u128).calculate_p2pkh_address(false).iter().zip([49, 67, 107, 80, 104, 72, 109, 102, 83, 72, 113, 114, 50, 109, 49, 71, 70, 110, 78, 103, 120, 113, 97, 100, 89, 101, 83, 103, 80, 109, 110, 83, 100, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x88345c104412dd5ebe16bca62f5df979u128, 0xe060c79998a8301283f744a2c0b9431cu128).calculate_p2pkh_address(false).iter().zip([49, 67, 114, 116, 115, 52, 107, 101, 68, 99, 69, 52, 113, 118, 102, 97, 120, 103, 90, 113, 81, 53, 53, 56, 80, 99, 80, 88, 99, 52, 90, 84, 55, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3f394e2fa6d53ebcbb56c9416f4a5071u128, 0x91ed5990ff4f7128353d2b0b2adff9dbu128).calculate_p2pkh_address(false).iter().zip([49, 52, 57, 71, 65, 109, 88, 72, 109, 113, 87, 53, 105, 49, 71, 112, 109, 122, 110, 78, 99, 113, 80, 102, 66, 99, 71, 54, 113, 66, 65, 120, 87, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa40e901f2f4a43a94ae97316e0ea8a72u128, 0xb70e8556f96316d50bac5da894451a40u128).calculate_p2pkh_address(false).iter().zip([49, 56, 50, 66, 122, 81, 102, 72, 88, 86, 77, 98, 74, 114, 104, 86, 111, 99, 122, 75, 56, 98, 122, 65, 85, 76, 97, 107, 111, 80, 66, 55, 121, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x77294bb86b96f9d890be3edf8f20d863u128, 0xba4987638061a97033fc13504368fb5du128).calculate_p2pkh_address(false).iter().zip([49, 76, 72, 90, 72, 114, 50, 70, 56, 97, 98, 122, 122, 89, 114, 107, 76, 78, 105, 86, 78, 111, 66, 77, 97, 116, 107, 74, 97, 56, 112, 113, 120, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x825a65c62cf41b3044f2b10e73067298u128, 0xe2dfb107f4c08007f006d5aa381127b7u128).calculate_p2pkh_address(false).iter().zip([49, 65, 72, 102, 99, 113, 83, 101, 100, 68, 109, 53, 98, 102, 88, 57, 49, 105, 82, 70, 53, 82, 115, 120, 67, 70, 70, 71, 54, 118, 76, 84, 107, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x758532d04e47cc91df6e56bffa41ee2au128, 0x5f4052ab10d16bb3eda4689d7fe39becu128).calculate_p2pkh_address(false).iter().zip([49, 69, 120, 106, 119, 97, 104, 120, 66, 78, 109, 106, 57, 76, 86, 101, 106, 70, 90, 57, 100, 118, 70, 69, 56, 105, 54, 52, 110, 68, 87, 102, 82, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbd4bc9dbd7b754b4bdb12044eb2d1e2fu128, 0xe01d7ed36cfd902bc088e0394c182e43u128).calculate_p2pkh_address(false).iter().zip([49, 72, 86, 109, 55, 110, 66, 117, 99, 81, 100, 101, 80, 89, 54, 84, 69, 72, 107, 107, 71, 102, 53, 74, 54, 107, 90, 104, 53, 122, 53, 98, 80, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbec84ebeac5db9f0a3e7a9ed486ba59eu128, 0x9c284226f33bd955f84e458d9afaa708u128).calculate_p2pkh_address(false).iter().zip([49, 54, 65, 90, 105, 67, 86, 121, 87, 51, 82, 67, 68, 109, 71, 118, 111, 70, 100, 86, 57, 77, 68, 112, 65, 100, 98, 89, 111, 115, 54, 97, 69, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4cb9aad4c0f499d991044db43315de7bu128, 0x66bfaa869fbad1671c98f2c5d8b49f72u128).calculate_p2pkh_address(false).iter().zip([49, 76, 83, 81, 55, 120, 75, 74, 49, 122, 104, 57, 50, 116, 104, 111, 119, 87, 51, 52, 120, 107, 51, 120, 109, 89, 75, 77, 80, 70, 102, 70, 115, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9c823d4da1cdc1af7c014f5cd7216921u128, 0x38b16db88e74833d2915df1abc24c95au128).calculate_p2pkh_address(false).iter().zip([49, 68, 69, 116, 100, 51, 99, 105, 104, 97, 65, 57, 119, 118, 49, 68, 112, 102, 114, 75, 72, 86, 114, 66, 87, 56, 100, 100, 99, 114, 106, 53, 88, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8e11835fdfcc8aa858080410caf5c05fu128, 0x8b2d4b143ac72692d04879ba9a27001du128).calculate_p2pkh_address(false).iter().zip([49, 77, 106, 75, 83, 118, 68, 77, 71, 69, 100, 111, 56, 55, 107, 111, 80, 84, 80, 88, 53, 89, 56, 55, 70, 97, 55, 106, 68, 70, 67, 80, 78, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbb2ac66f1672fb7b766a9a338fc4d599u128, 0xddfbb8a8cdf35b116a8d28f95192128u128).calculate_p2pkh_address(false).iter().zip([49, 55, 119, 57, 111, 117, 86, 103, 109, 98, 102, 51, 89, 49, 117, 83, 80, 50, 87, 77, 111, 103, 87, 112, 109, 77, 54, 120, 57, 72, 116, 120, 81, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x425b76d9fa7987c0d098a9f346a788e3u128, 0x4dc36f8c3c66b4bd8a65b9bd72e0999bu128).calculate_p2pkh_address(false).iter().zip([49, 65, 103, 111, 50, 86, 107, 82, 97, 120, 101, 57, 115, 117, 112, 105, 54, 74, 113, 75, 97, 99, 101, 113, 119, 103, 66, 51, 84, 68, 114, 120, 105, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb74c8667c924ff5e16167a3f732d75e7u128, 0x5d503dbd2d81c47e532e40a9592a0b4fu128).calculate_p2pkh_address(false).iter().zip([49, 53, 99, 76, 82, 84, 69, 68, 105, 118, 55, 66, 82, 118, 100, 75, 66, 54, 76, 109, 72, 86, 113, 54, 52, 113, 86, 97, 74, 84, 88, 113, 120, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xde8fac618ff21533cf002634639e9140u128, 0x2f77a57580619b7e10bc4731aafb8e6u128).calculate_p2pkh_address(false).iter().zip([49, 57, 106, 107, 88, 88, 104, 118, 65, 77, 50, 118, 111, 110, 105, 71, 55, 66, 117, 88, 68, 78, 67, 122, 86, 67, 49, 80, 119, 106, 103, 106, 68, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1045489c65f2add59b18ba919eb7a13au128, 0x28cf99932073368292d9f7e606faba07u128).calculate_p2pkh_address(false).iter().zip([49, 70, 51, 97, 101, 106, 88, 88, 100, 82, 84, 109, 80, 55, 90, 55, 101, 114, 113, 106, 83, 118, 66, 116, 67, 51, 86, 116, 120, 82, 81, 105, 90, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd6dfa79f4dad1d896cadb91696bd4a86u128, 0x8fe20323aefc2f7d177c419ea4e8ea71u128).calculate_p2pkh_address(false).iter().zip([49, 55, 78, 82, 72, 52, 76, 105, 116, 113, 114, 114, 50, 101, 114, 116, 68, 77, 53, 88, 88, 84, 54, 89, 56, 52, 90, 50, 113, 121, 115, 87, 71, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x761ced5a7c5d4638115bad05603967a7u128, 0x50469667e088f36f81d8697419d9572cu128).calculate_p2pkh_address(false).iter().zip([49, 57, 76, 51, 66, 67, 111, 115, 81, 50, 70, 84, 86, 81, 84, 102, 97, 110, 101, 74, 66, 52, 51, 86, 77, 65, 116, 55, 84, 104, 67, 99, 66, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe376e8bfb1f85c51bd36b370435621dbu128, 0x2b357c0c5e22e152bba259ca8a97632u128).calculate_p2pkh_address(false).iter().zip([49, 76, 110, 120, 71, 84, 106, 50, 88, 106, 68, 80, 122, 122, 66, 90, 120, 75, 98, 85, 111, 82, 122, 107, 101, 75, 85, 76, 117, 97, 119, 67, 86, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2ca4c32a13744e5b00d87316d32c9408u128, 0xd2d3ca314a33ad70c0d41353688905c0u128).calculate_p2pkh_address(false).iter().zip([49, 70, 110, 101, 98, 71, 55, 70, 55, 89, 76, 74, 57, 56, 65, 119, 50, 72, 119, 72, 49, 65, 99, 90, 53, 84, 50, 68, 49, 66, 122, 66, 115, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x55297d7c262f248bb0ae3c22153fa835u128, 0x2dbfd9388e64ec4c498056ca6eeac4e2u128).calculate_p2pkh_address(false).iter().zip([49, 56, 74, 105, 53, 118, 112, 114, 98, 82, 119, 101, 104, 111, 121, 66, 80, 51, 54, 69, 74, 56, 86, 119, 52, 55, 87, 56, 90, 66, 67, 77, 107, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xde176639d00260e75a71eb4ef42f7511u128, 0x74bedcb8c9044d257a11f0ad8bdafa35u128).calculate_p2pkh_address(false).iter().zip([49, 68, 77, 112, 86, 55, 112, 112, 67, 90, 49, 51, 71, 98, 76, 70, 56, 101, 68, 109, 113, 83, 109, 66, 74, 53, 122, 114, 110, 115, 71, 121, 106, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbb256dc59cf345f2289b84a11f7097ecu128, 0x2ecada8905b5d883bb9eecb5792c5f4eu128).calculate_p2pkh_address(false).iter().zip([49, 72, 69, 88, 80, 56, 109, 104, 67, 84, 84, 88, 52, 76, 101, 74, 117, 87, 111, 99, 75, 118, 72, 77, 69, 103, 55, 98, 82, 86, 105, 113, 66, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x686d844d2d26a3e226105d5322607c61u128, 0xb436da21583c4527bc3c7356ef900cbau128).calculate_p2pkh_address(false).iter().zip([49, 50, 76, 121, 84, 76, 104, 67, 54, 57, 49, 86, 68, 101, 97, 84, 118, 51, 114, 112, 97, 83, 52, 67, 122, 110, 49, 53, 51, 89, 83, 69, 86, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x85f67527596291cde0c2c8f29d3f2662u128, 0x675d07a510e8110c136b5ca0d940f70fu128).calculate_p2pkh_address(false).iter().zip([49, 81, 75, 99, 74, 90, 112, 54, 121, 101, 71, 102, 120, 110, 72, 105, 89, 82, 97, 50, 103, 110, 118, 97, 82, 98, 99, 74, 86, 112, 87, 51, 89, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5eaec5c591bc05e47529b797c252313du128, 0x82a0435c9dc2ee78e191d8602d64ce42u128).calculate_p2pkh_address(false).iter().zip([49, 78, 119, 106, 116, 117, 89, 109, 90, 78, 57, 84, 113, 100, 53, 72, 100, 100, 87, 87, 69, 118, 106, 53, 57, 69, 80, 111, 70, 71, 113, 116, 99, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c271767715a2e00d55c74cbd69d49a0u128, 0xe438707566279277743ee1477b0b5289u128).calculate_p2pkh_address(false).iter().zip([49, 71, 116, 85, 120, 98, 54, 112, 51, 85, 74, 87, 100, 72, 53, 69, 121, 97, 117, 55, 111, 106, 69, 120, 81, 116, 51, 111, 67, 68, 86, 111, 55, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe6f5b636d3d11e0056f4b7ab752bfa45u128, 0xe517a9e829419d7b3e92178cdfd033d4u128).calculate_p2pkh_address(false).iter().zip([49, 76, 120, 70, 56, 102, 53, 82, 53, 98, 85, 114, 77, 106, 49, 109, 50, 77, 107, 99, 52, 56, 106, 103, 111, 78, 75, 75, 87, 71, 122, 109, 110, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe916147b0685ea9e283c9f134066aec9u128, 0xc1a2dc8a268ae2f86d23f29e71d87627u128).calculate_p2pkh_address(false).iter().zip([49, 50, 72, 86, 75, 81, 102, 110, 97, 101, 99, 85, 113, 86, 67, 69, 116, 78, 56, 88, 107, 56, 57, 55, 115, 111, 104, 65, 52, 85, 102, 103, 54, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa18e22f79c0ea4813a8f6f5605403482u128, 0xc7e21db58f2d0193da71e69204f1979au128).calculate_p2pkh_address(false).iter().zip([49, 68, 122, 54, 112, 118, 53, 68, 88, 116, 113, 107, 71, 71, 90, 81, 88, 110, 109, 113, 100, 120, 116, 118, 70, 57, 65, 67, 71, 107, 78, 53, 107, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x613087c84c0f0bac7b93d90cc4ab0609u128, 0x91ce5bdb20d3d9cd0fac8482dea47ce6u128).calculate_p2pkh_address(false).iter().zip([49, 51, 111, 84, 55, 80, 75, 72, 99, 116, 76, 52, 121, 81, 66, 56, 75, 77, 65, 68, 81, 122, 52, 70, 69, 86, 109, 88, 68, 78, 98, 104, 102, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x769a7b06d3e3648fc5c59a66698c0ba6u128, 0x726d7d3ab399febe0f8a70a821e54e74u128).calculate_p2pkh_address(false).iter().zip([49, 65, 85, 81, 70, 82, 68, 76, 89, 78, 88, 85, 76, 120, 89, 97, 117, 100, 109, 89, 82, 77, 109, 111, 99, 106, 106, 65, 76, 66, 115, 84, 90, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc16ab32e7571bcaedc1642d002f1dc82u128, 0x150d0bed94086658f4ea19ed0c61cc12u128).calculate_p2pkh_address(false).iter().zip([49, 72, 99, 121, 87, 85, 102, 70, 80, 53, 106, 102, 53, 114, 78, 55, 86, 54, 53, 71, 51, 71, 119, 90, 85, 53, 110, 80, 88, 49, 54, 81, 75, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8adc5fc66ec94004f0d8312eb345aa4fu128, 0x43d0dcfe6cd78cff0270ffda27987d7au128).calculate_p2pkh_address(false).iter().zip([49, 72, 78, 87, 102, 97, 52, 77, 87, 68, 100, 85, 113, 104, 117, 57, 113, 119, 81, 50, 86, 83, 89, 66, 50, 111, 118, 75, 89, 97, 76, 51, 103, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b8d92d87ae125924ed53f8b33e91a02u128, 0x9da0905927bfc007a1e9f03a842c9405u128).calculate_p2pkh_address(false).iter().zip([49, 72, 97, 98, 111, 74, 81, 49, 57, 105, 71, 86, 51, 117, 112, 87, 83, 117, 111, 99, 77, 89, 84, 90, 110, 98, 104, 83, 82, 88, 88, 100, 53, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3cf7bbc58d67576edf5747eea86f629fu128, 0x45ed07c0d5ba5acc4db3569c2969ebc1u128).calculate_p2pkh_address(false).iter().zip([49, 68, 86, 99, 77, 87, 85, 117, 52, 119, 113, 110, 56, 72, 122, 77, 117, 90, 83, 106, 100, 104, 81, 117, 65, 110, 72, 101, 103, 120, 119, 83, 82, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6a76b683762128bc4a8416559132ed4u128, 0x7cd1a205accda58748ab4475b7c4b53au128).calculate_p2pkh_address(false).iter().zip([49, 77, 82, 81, 52, 53, 103, 118, 112, 87, 75, 66, 102, 71, 107, 111, 69, 80, 71, 107, 66, 67, 57, 66, 57, 114, 114, 116, 52, 70, 71, 85, 65, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x386b0955cbf0dbc594e1830f564a03d2u128, 0xd812f96a6183a8b7e1a67e2556bf00d5u128).calculate_p2pkh_address(false).iter().zip([49, 57, 77, 56, 102, 67, 86, 65, 101, 112, 112, 65, 74, 57, 77, 55, 76, 71, 122, 116, 78, 103, 82, 69, 84, 69, 70, 109, 104, 121, 78, 80, 55, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5bb1273e054dae73cf5bfc343f79378eu128, 0x401d76c3f8826e3e3048cd4816fc5eadu128).calculate_p2pkh_address(false).iter().zip([49, 51, 111, 112, 87, 112, 66, 78, 69, 86, 76, 111, 118, 112, 54, 84, 110, 105, 85, 72, 97, 76, 86, 69, 51, 78, 50, 87, 118, 103, 122, 74, 57, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5f885b59daeb537fdde4f64dfe7b4245u128, 0xaf748de6e8f9f90af736d7eaf49e9cd7u128).calculate_p2pkh_address(false).iter().zip([49, 66, 50, 99, 112, 81, 84, 107, 111, 110, 57, 107, 56, 56, 116, 84, 57, 78, 74, 70, 101, 120, 113, 118, 113, 120, 116, 71, 107, 70, 77, 109, 50, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x246275fde5499b7caed7d09c67ac4e2au128, 0xdf38ce5f92ee972c1df9633d889ceda2u128).calculate_p2pkh_address(false).iter().zip([49, 80, 103, 98, 54, 65, 85, 103, 80, 80, 98, 65, 112, 76, 114, 97, 98, 122, 122, 87, 122, 70, 66, 80, 53, 116, 66, 78, 99, 105, 89, 78, 97, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x752d79e4c50a6b157c02e2703ce24ba3u128, 0xa9756e09b4aaed1173f287597d543fadu128).calculate_p2pkh_address(false).iter().zip([49, 74, 69, 51, 121, 83, 69, 80, 112, 110, 111, 49, 110, 100, 112, 68, 98, 106, 109, 106, 57, 80, 104, 57, 105, 50, 71, 117, 71, 50, 122, 115, 122, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x38c529788469c6e4acc4218d08014352u128, 0x2a8c567cbe8c77e1b1d241cb14f9fdc3u128).calculate_p2pkh_address(false).iter().zip([49, 67, 100, 109, 116, 77, 67, 101, 55, 107, 107, 88, 81, 114, 106, 105, 86, 112, 76, 50, 89, 50, 51, 104, 114, 90, 53, 98, 86, 69, 87, 54, 78, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb7d89957a7c36757035dc7a0bacdddb1u128, 0x4342f34828a88ea8ef4abf12bf159858u128).calculate_p2pkh_address(false).iter().zip([49, 68, 113, 66, 53, 102, 89, 106, 66, 118, 122, 77, 104, 111, 56, 106, 56, 57, 53, 49, 49, 83, 85, 104, 107, 121, 53, 111, 97, 119, 107, 102, 70, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcfb478c3a8ae2972a062dd23259fc88fu128, 0xb2c37bc025598bb685ba61405839afccu128).calculate_p2pkh_address(false).iter().zip([49, 50, 119, 67, 90, 56, 65, 69, 119, 109, 69, 103, 103, 72, 99, 100, 86, 88, 52, 89, 72, 54, 51, 99, 109, 87, 85, 67, 55, 121, 53, 50, 114, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x54b9845b2e7fb038734a11e70c26cee9u128, 0xdeaa63bd83a659e2e8368320ebef59f1u128).calculate_p2pkh_address(false).iter().zip([49, 55, 72, 101, 115, 88, 117, 81, 82, 88, 107, 112, 116, 82, 98, 85, 86, 112, 66, 81, 67, 100, 102, 82, 107, 110, 56, 99, 118, 118, 65, 66, 67, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4885da71acc6f02866fb4e620a18a608u128, 0xab02a0f2d73e58e3b71b9a44e04f250du128).calculate_p2pkh_address(false).iter().zip([0, 49, 68, 86, 114, 122, 114, 109, 88, 55, 98, 55, 56, 106, 53, 112, 111, 97, 113, 57, 109, 120, 99, 116, 68, 71, 70, 81, 114, 113, 97, 69, 51, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb6fa099417a705d597802356ea1be257u128, 0xc802de0ce9c3c559f5b35dfc06455725u128).calculate_p2pkh_address(false).iter().zip([49, 68, 105, 68, 65, 103, 105, 51, 89, 101, 74, 80, 84, 72, 56, 56, 122, 99, 122, 68, 100, 78, 98, 99, 119, 104, 56, 99, 68, 120, 57, 98, 118, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x83a656a463716a109e49e4fe60217b56u128, 0xfe9843d76eca2ddffa39e08e21e6c2b4u128).calculate_p2pkh_address(false).iter().zip([49, 72, 101, 120, 66, 78, 66, 69, 117, 117, 67, 115, 57, 110, 68, 111, 115, 105, 55, 113, 89, 107, 106, 83, 66, 119, 53, 107, 77, 120, 104, 87, 109, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd59db29d869db794ba2b1556f4068f15u128, 0xf59644c141d3ef8b5a7a9e0711d6c44u128).calculate_p2pkh_address(false).iter().zip([49, 74, 68, 87, 109, 90, 121, 117, 115, 83, 120, 89, 121, 52, 100, 89, 84, 75, 100, 109, 87, 122, 102, 85, 68, 49, 122, 116, 107, 76, 99, 56, 89, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x11c621ab9c12debd9002d0edf50628ebu128, 0x142ff98c900215ba09b7520e76556718u128).calculate_p2pkh_address(false).iter().zip([49, 54, 52, 84, 111, 98, 83, 86, 90, 103, 80, 76, 88, 52, 81, 97, 84, 113, 69, 109, 52, 53, 67, 101, 99, 118, 84, 66, 74, 67, 71, 67, 103, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c4de267c795e5ec0baa2f506762d1cfu128, 0x2a83217d475802fe0db3fc8a15268b47u128).calculate_p2pkh_address(false).iter().zip([49, 52, 102, 54, 76, 117, 65, 99, 117, 83, 101, 86, 75, 50, 103, 49, 74, 54, 89, 102, 72, 70, 52, 81, 113, 50, 78, 69, 87, 104, 77, 68, 116, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7b6e647da1a0f5e37ac3b2de81017b8eu128, 0xf38f7ef92d97a92a26cc09f6f823b0efu128).calculate_p2pkh_address(false).iter().zip([49, 51, 114, 120, 116, 89, 85, 71, 118, 84, 84, 87, 86, 67, 88, 115, 100, 56, 112, 111, 116, 80, 109, 118, 82, 65, 99, 66, 66, 105, 53, 55, 71, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x50a76cf397f24eff6a863934e41ae7c7u128, 0xb103c3dccd879abea59a41c7e6c9baa6u128).calculate_p2pkh_address(false).iter().zip([49, 56, 74, 119, 65, 112, 122, 51, 114, 55, 104, 57, 57, 110, 114, 72, 111, 74, 115, 77, 117, 65, 71, 122, 106, 75, 66, 115, 54, 110, 55, 119, 72, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x639eff8f5fdca2f8018edbe6a25e1211u128, 0x8c04c0ae25394649e0614eee9a894eb5u128).calculate_p2pkh_address(false).iter().zip([49, 52, 70, 116, 105, 88, 70, 110, 114, 102, 68, 114, 56, 80, 67, 50, 69, 101, 52, 111, 100, 120, 99, 103, 121, 50, 70, 74, 103, 115, 121, 109, 102, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x87fccdf1eba5b8564968e2f0fdb9b9a7u128, 0x546d10df947049f0e3e1a7b5d36c9a0fu128).calculate_p2pkh_address(false).iter().zip([49, 68, 112, 100, 54, 109, 55, 51, 102, 115, 119, 100, 57, 120, 113, 89, 70, 57, 118, 56, 107, 75, 105, 109, 115, 49, 78, 67, 102, 75, 71, 104, 101, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc5fd6a824a1000f627597afe16f8570u128, 0x8398a69eea8d3c6f49d804a5b64889e9u128).calculate_p2pkh_address(false).iter().zip([49, 50, 67, 118, 84, 83, 99, 54, 51, 81, 102, 57, 87, 98, 107, 56, 57, 52, 114, 80, 99, 74, 80, 71, 55, 51, 54, 117, 105, 114, 70, 74, 107, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf2b14503e3a9e57d065f17d50b974906u128, 0x699e580b68a2de2cb2e1a586868c956cu128).calculate_p2pkh_address(false).iter().zip([49, 57, 72, 54, 115, 85, 84, 75, 114, 67, 88, 111, 80, 77, 81, 71, 54, 88, 71, 116, 78, 90, 116, 56, 103, 49, 89, 112, 107, 68, 74, 102, 119, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa2f0b471fd3d1c7c24c92aaa6b1fed6fu128, 0x4e7d23e6acbe9127c15a56757957caf6u128).calculate_p2pkh_address(false).iter().zip([49, 74, 77, 116, 100, 52, 120, 74, 51, 116, 104, 53, 118, 100, 80, 49, 52, 74, 89, 75, 50, 106, 85, 122, 111, 74, 89, 119, 87, 87, 121, 97, 52, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5afb56d391e446a8fc3d2affff474cb7u128, 0xad85dce09ded3a86d5bcf5855f5d33b5u128).calculate_p2pkh_address(false).iter().zip([49, 65, 87, 80, 56, 116, 121, 105, 72, 102, 100, 85, 78, 81, 88, 57, 75, 106, 67, 121, 57, 71, 72, 112, 98, 76, 52, 74, 115, 77, 50, 117, 105, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x45682b6aac6ce9cb9564e34624f6f83du128, 0x7672e494cb79177abfd9bffc71ca2b7eu128).calculate_p2pkh_address(false).iter().zip([49, 81, 57, 113, 106, 77, 67, 81, 85, 53, 117, 109, 76, 114, 120, 88, 66, 105, 105, 52, 78, 112, 69, 80, 104, 105, 109, 50, 110, 69, 111, 65, 120, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb08f6326278c157708209bf32371e3a7u128, 0xdaa887213f9cc6633aa91499ceba4d18u128).calculate_p2pkh_address(false).iter().zip([49, 66, 52, 99, 83, 65, 90, 49, 111, 77, 87, 86, 76, 49, 116, 102, 117, 71, 118, 119, 99, 82, 52, 75, 65, 53, 80, 106, 77, 117, 88, 65, 105, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xae1f3b56a32eedc4607e3aa97bafa9b5u128, 0x54a67b102b0e9632e32d67e9f4703e7u128).calculate_p2pkh_address(false).iter().zip([49, 65, 114, 69, 52, 121, 82, 67, 109, 113, 51, 87, 67, 88, 74, 89, 117, 120, 84, 74, 109, 106, 83, 109, 122, 109, 72, 77, 114, 122, 122, 101, 53, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf232c9a96715e7cf92d99074c3a7a848u128, 0xbaa8ea2a1b49be11de776bb8ebade24du128).calculate_p2pkh_address(false).iter().zip([49, 77, 51, 90, 106, 51, 113, 116, 56, 119, 113, 87, 70, 120, 105, 113, 105, 84, 103, 50, 75, 111, 97, 101, 110, 121, 67, 105, 78, 69, 114, 57, 76, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd74e21aeac14f2b77b1f7dc9cb0b06d1u128, 0xfa9c9e6b989c18c8bb24c445189ab54au128).calculate_p2pkh_address(false).iter().zip([49, 52, 55, 74, 117, 117, 116, 106, 85, 83, 51, 56, 103, 57, 68, 67, 117, 84, 116, 115, 88, 81, 77, 83, 89, 52, 74, 68, 80, 75, 49, 69, 75, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xced6289d4d352d2fa1f7eb62ad8cc972u128, 0x70735ee93cedd81a47daed33351221aau128).calculate_p2pkh_address(false).iter().zip([49, 50, 112, 69, 100, 76, 71, 109, 116, 89, 119, 75, 80, 82, 68, 106, 120, 80, 86, 115, 119, 99, 109, 118, 72, 104, 120, 84, 118, 86, 111, 54, 119, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe7409d88fdf9b26102e84af9dceb7b6fu128, 0x22ff045d4385e03af2c5258f1fb386c6u128).calculate_p2pkh_address(false).iter().zip([49, 68, 86, 81, 113, 104, 66, 69, 117, 53, 66, 121, 111, 70, 121, 68, 107, 111, 90, 118, 51, 122, 86, 90, 88, 52, 104, 80, 80, 111, 101, 102, 120, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe647e3093e918a4fb93b6d6a9b7c6578u128, 0xf12bd8afe9114a7b08e2f299b7eb3c2bu128).calculate_p2pkh_address(false).iter().zip([49, 56, 111, 112, 80, 100, 99, 52, 81, 116, 78, 75, 111, 107, 90, 119, 54, 78, 90, 88, 111, 105, 115, 122, 107, 49, 71, 67, 110, 119, 50, 87, 107, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xee39a2116810c29c3db78be92300bf66u128, 0xd0ed1b5c48bf0ab4930d58d2825a07a7u128).calculate_p2pkh_address(false).iter().zip([49, 69, 111, 119, 120, 89, 101, 119, 105, 102, 112, 86, 57, 99, 52, 72, 54, 105, 116, 90, 74, 70, 104, 104, 115, 72, 80, 74, 99, 81, 70, 114, 99, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc8fde28de2320c4f9c3b8ec327bc60cdu128, 0x39eb77bb90d9e8864396b0c575896990u128).calculate_p2pkh_address(false).iter().zip([0, 49, 103, 99, 98, 81, 118, 103, 86, 49, 84, 88, 85, 52, 97, 55, 53, 72, 118, 117, 104, 117, 99, 102, 65, 77, 84, 101, 53, 110, 89, 82, 121, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd9e105d71cdc4e17d7e6f252648400feu128, 0xcc4358b59e75c17de4f6cae246d5a59cu128).calculate_p2pkh_address(false).iter().zip([49, 77, 122, 118, 104, 100, 99, 102, 114, 49, 89, 114, 52, 49, 98, 55, 72, 55, 78, 67, 77, 111, 101, 67, 106, 90, 53, 100, 110, 105, 65, 85, 57, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcb1dc5ae4ffbad786abf0c7444ccbe24u128, 0xdb651d009e1684c30228e8a631d1bdf6u128).calculate_p2pkh_address(false).iter().zip([49, 56, 117, 109, 118, 50, 81, 116, 52, 121, 102, 84, 57, 67, 83, 97, 53, 89, 116, 78, 80, 72, 101, 78, 121, 106, 67, 111, 116, 55, 65, 107, 78, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2b7b17163f98dd1051c5c36270728b3du128, 0x733884541851fd4b7264d7a426dc28fdu128).calculate_p2pkh_address(false).iter().zip([49, 72, 110, 107, 68, 102, 68, 50, 119, 83, 120, 90, 101, 85, 97, 82, 105, 98, 72, 49, 53, 68, 109, 102, 98, 114, 77, 82, 105, 81, 112, 101, 85, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8424d6f07d7bc486b60d0564b3ee4a63u128, 0xbee3e3a1caded7b2fe6a389ab69cd78eu128).calculate_p2pkh_address(false).iter().zip([49, 51, 69, 102, 77, 90, 105, 114, 50, 113, 122, 104, 100, 103, 103, 78, 119, 75, 52, 115, 77, 89, 110, 115, 119, 54, 50, 104, 69, 113, 57, 117, 113, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd23881159de2939765cb008a461fe68fu128, 0x626899914fb835646387131c5a3fcca0u128).calculate_p2pkh_address(false).iter().zip([49, 57, 51, 111, 104, 118, 97, 121, 89, 104, 118, 112, 81, 77, 52, 57, 107, 70, 97, 56, 89, 76, 103, 115, 51, 87, 52, 112, 111, 106, 81, 110, 84, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x457f16fa62bb13066e583a03d284f36au128, 0x9743dd14dccf2c151bb4ac0621e7b89bu128).calculate_p2pkh_address(false).iter().zip([49, 67, 72, 78, 99, 75, 122, 50, 98, 97, 85, 52, 72, 118, 53, 75, 56, 115, 66, 109, 70, 97, 68, 70, 104, 83, 71, 52, 66, 121, 103, 89, 107, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x13f15c5ca929ac438c26c1f616b50cdfu128, 0xecf70ce324992912b3ed44d9890899fau128).calculate_p2pkh_address(false).iter().zip([49, 72, 83, 81, 119, 113, 82, 112, 77, 112, 119, 98, 53, 102, 69, 116, 103, 115, 87, 87, 87, 56, 84, 78, 50, 50, 110, 77, 57, 50, 50, 87, 72, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe8067d0c4e20426ad6320da70c831546u128, 0xd8d0da9d45dbcaff8c75309f8c6984e3u128).calculate_p2pkh_address(false).iter().zip([49, 80, 80, 57, 81, 121, 78, 86, 70, 110, 99, 99, 103, 101, 119, 111, 120, 51, 55, 115, 72, 74, 120, 71, 86, 56, 89, 109, 81, 56, 84, 53, 88, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbc4f4f46493af487166a93c4c9d3960fu128, 0x3fb2a5b65eb7afd74bc583deb91d9274u128).calculate_p2pkh_address(false).iter().zip([49, 52, 116, 122, 81, 56, 70, 88, 117, 68, 68, 117, 53, 49, 68, 117, 54, 107, 56, 88, 119, 77, 99, 97, 75, 102, 121, 81, 70, 68, 83, 106, 100, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x67c1ef469d27f4246622e1646b95f3c9u128, 0x5771f6c3ae4ae87d784b5c16c99544aau128).calculate_p2pkh_address(false).iter().zip([49, 78, 88, 111, 104, 87, 50, 116, 75, 89, 118, 99, 86, 86, 107, 81, 78, 101, 89, 85, 122, 52, 99, 87, 118, 112, 88, 90, 88, 118, 114, 72, 110, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdbee593630b882f3ca635d633a99d735u128, 0xa3613a5205da6841b7876cee72366e56u128).calculate_p2pkh_address(false).iter().zip([49, 66, 67, 53, 68, 119, 72, 110, 111, 49, 100, 68, 116, 72, 120, 66, 70, 77, 111, 80, 54, 113, 83, 74, 116, 100, 114, 101, 97, 116, 55, 121, 113, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3bebdd6bd2cb6c97fe7e5fd771734585u128, 0xb79c4eaf8144d24f9bba67d1845ecb6eu128).calculate_p2pkh_address(false).iter().zip([0, 49, 117, 98, 57, 75, 76, 69, 65, 117, 56, 72, 109, 105, 106, 112, 109, 77, 89, 109, 56, 99, 101, 57, 109, 115, 78, 87, 75, 98, 78, 82, 67, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x319d24a29f226786e1525e15e063c73eu128, 0x7084775afdc13a3b6c7a960f47c0db39u128).calculate_p2pkh_address(false).iter().zip([49, 69, 104, 89, 52, 50, 104, 74, 56, 105, 101, 88, 99, 105, 90, 71, 74, 121, 86, 90, 109, 66, 74, 55, 85, 49, 80, 115, 88, 103, 89, 106, 102, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbaaec7802c16001055e9d61697580660u128, 0x7d007549217ab14b2ac749bd66ee438du128).calculate_p2pkh_address(false).iter().zip([49, 78, 51, 54, 109, 101, 110, 87, 68, 71, 101, 84, 71, 56, 99, 50, 51, 76, 114, 55, 74, 66, 87, 72, 81, 53, 84, 74, 121, 110, 68, 120, 71, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xac792c13c3aaf3b4d4d043a4f951febu128, 0xa870f05c4448be3f6dfc194ac4df5819u128).calculate_p2pkh_address(false).iter().zip([49, 51, 71, 114, 98, 72, 70, 86, 106, 82, 121, 100, 101, 88, 105, 71, 105, 82, 51, 107, 65, 85, 53, 85, 114, 99, 101, 65, 50, 121, 81, 109, 90, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x84b24ba0a374ce7e0b52c32aaa28f377u128, 0x4a201c853f52a1fdf4e08212df2235fcu128).calculate_p2pkh_address(false).iter().zip([49, 66, 103, 83, 90, 99, 115, 55, 105, 90, 121, 88, 109, 107, 89, 103, 103, 82, 116, 111, 117, 107, 68, 85, 104, 56, 103, 117, 75, 109, 49, 101, 100, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5cfe723718779619904066a39778ff0eu128, 0x9c07e23455c9084065ecbfe8ae4b1fe1u128).calculate_p2pkh_address(false).iter().zip([49, 77, 68, 53, 90, 98, 102, 85, 88, 84, 52, 116, 84, 120, 66, 66, 76, 97, 86, 54, 100, 83, 80, 97, 81, 90, 74, 74, 90, 89, 114, 50, 116, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x537604b8af57e822829369fe76a1606cu128, 0x86686685ea12a7ca351f5624b2b94510u128).calculate_p2pkh_address(false).iter().zip([49, 56, 51, 50, 66, 109, 57, 70, 66, 112, 67, 78, 111, 97, 51, 87, 53, 117, 89, 89, 120, 114, 55, 86, 106, 111, 82, 89, 103, 119, 116, 117, 53, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x633b7279a23615286d7ec1dfd199a9e5u128, 0x85f0d781c085442a68c21179deacb9c6u128).calculate_p2pkh_address(false).iter().zip([49, 55, 70, 89, 113, 115, 118, 75, 68, 53, 82, 65, 105, 98, 75, 114, 109, 116, 74, 119, 57, 71, 68, 54, 119, 114, 115, 110, 86, 120, 120, 104, 101, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2c71ca36f03925de2576a66a1e83c34eu128, 0x37ffc5344200eb8e6ffa73edd6862425u128).calculate_p2pkh_address(false).iter().zip([49, 71, 103, 88, 122, 104, 51, 90, 105, 87, 86, 97, 109, 101, 114, 89, 106, 103, 80, 107, 69, 69, 68, 98, 85, 121, 65, 104, 100, 120, 55, 101, 83, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf2a1e43423a6eced49eb729ac3ee23eau128, 0x29616702fa5e27a5efbbc6e179310325u128).calculate_p2pkh_address(false).iter().zip([49, 51, 65, 97, 78, 72, 109, 72, 49, 84, 120, 55, 76, 78, 80, 85, 107, 100, 103, 82, 52, 68, 100, 98, 81, 50, 49, 89, 82, 116, 52, 110, 56, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8f4b5515358e247009b4b9e53e9a00deu128, 0x55bfe516869d3c42390ebc0a9231348bu128).calculate_p2pkh_address(false).iter().zip([49, 80, 121, 80, 80, 98, 84, 53, 65, 105, 86, 70, 100, 102, 67, 101, 49, 76, 65, 90, 122, 70, 85, 75, 112, 100, 52, 51, 113, 89, 81, 82, 71, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe4f81cb1e90127ed221be9879c066f3eu128, 0x230163f61834a394fbe9aaabfff25966u128).calculate_p2pkh_address(false).iter().zip([49, 70, 114, 80, 116, 107, 106, 114, 65, 81, 78, 97, 97, 113, 111, 100, 122, 100, 52, 76, 89, 77, 86, 77, 121, 112, 69, 87, 114, 87, 78, 53, 85, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9498d6522962efabb9037e3c8121a766u128, 0x298ce00620b1bd81ce4d85a762d81359u128).calculate_p2pkh_address(false).iter().zip([49, 80, 115, 78, 113, 54, 86, 113, 57, 110, 80, 109, 88, 109, 80, 116, 120, 102, 102, 116, 115, 88, 107, 57, 97, 74, 54, 83, 65, 74, 83, 68, 56, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x45c47440e5af21d4f9217162b4391d27u128, 0x29e75487745cd7db113b08cda541f82fu128).calculate_p2pkh_address(false).iter().zip([49, 50, 117, 116, 110, 78, 116, 120, 84, 87, 106, 68, 110, 69, 97, 114, 65, 113, 78, 115, 89, 70, 104, 119, 89, 81, 57, 117, 98, 107, 78, 119, 65, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe7a1050acc30bac78ae342990b2e874au128, 0xd35207d86c1136ae7396851c21562617u128).calculate_p2pkh_address(false).iter().zip([0, 49, 121, 110, 74, 84, 99, 77, 78, 115, 90, 120, 90, 53, 85, 83, 78, 68, 83, 57, 99, 49, 77, 86, 103, 53, 112, 75, 100, 78, 102, 118, 75, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xac3e6bd852319e13db023f8c4e290cc5u128, 0xe3a79396de871f8f1e6421cdf1b7e139u128).calculate_p2pkh_address(false).iter().zip([49, 54, 69, 112, 69, 112, 51, 57, 102, 81, 81, 122, 113, 67, 117, 116, 99, 85, 50, 50, 65, 74, 115, 49, 111, 103, 51, 67, 106, 81, 54, 121, 82, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xba7f7c117bd323f4379710df977d2126u128, 0x8b5f168498c341ad7f9e6581500b0dfcu128).calculate_p2pkh_address(false).iter().zip([0, 49, 102, 112, 50, 115, 117, 97, 120, 121, 84, 112, 87, 66, 104, 111, 53, 88, 85, 52, 111, 81, 90, 98, 117, 118, 105, 89, 107, 67, 98, 89, 122, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x38bb6b50c31737b2997fc376c6ae3f79u128, 0x9533ce113b50d7c41f1701acc5044710u128).calculate_p2pkh_address(false).iter().zip([49, 69, 84, 97, 106, 83, 65, 86, 98, 53, 103, 84, 110, 99, 99, 104, 109, 81, 52, 77, 49, 101, 113, 114, 102, 112, 56, 72, 56, 72, 72, 82, 119, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x35cc36efa854115b7ae68e4ce0c98f3eu128, 0x208fcc65c26b263ef2d2c66ff0cc24ccu128).calculate_p2pkh_address(false).iter().zip([49, 67, 115, 80, 80, 99, 65, 122, 101, 69, 52, 109, 70, 76, 77, 89, 54, 117, 67, 112, 116, 106, 122, 70, 107, 57, 102, 115, 112, 50, 101, 49, 84, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa2fff1b15ebb6fb243c96b4a0f75db2au128, 0x1d7b06eb99cdd53a46a02eb6e8478d3u128).calculate_p2pkh_address(false).iter().zip([49, 65, 102, 52, 72, 119, 53, 117, 83, 116, 52, 83, 86, 102, 84, 51, 81, 53, 54, 97, 80, 122, 57, 69, 65, 114, 101, 122, 117, 112, 116, 104, 82, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x742b6efdd4ba239cf918529f611f20ecu128, 0x4e071addc9d11d2a6596aa07d0d5f94au128).calculate_p2pkh_address(false).iter().zip([49, 72, 120, 103, 57, 85, 115, 80, 114, 76, 72, 105, 89, 85, 101, 107, 122, 56, 80, 116, 100, 121, 68, 106, 110, 89, 54, 110, 101, 119, 104, 100, 115, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb2c9ddf792d84e593f1bfa8f85266255u128, 0x8ea6c519abcc4eb3ffdd767db36eb481u128).calculate_p2pkh_address(false).iter().zip([49, 55, 84, 90, 118, 102, 55, 104, 98, 122, 52, 71, 84, 122, 110, 90, 104, 66, 65, 89, 118, 103, 71, 102, 75, 107, 87, 52, 84, 112, 77, 49, 71, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x75c34c5e22ed80c8ee7970bd0fb8bc62u128, 0x9df10a4349d23e5c37b99d85c932dab6u128).calculate_p2pkh_address(false).iter().zip([49, 52, 97, 90, 84, 65, 65, 102, 119, 78, 85, 107, 70, 66, 75, 99, 56, 114, 51, 57, 81, 69, 98, 65, 116, 82, 87, 65, 67, 84, 65, 51, 90, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x95c2f35b45b8664eb466d4cf696637b5u128, 0x3a0d2af84d2d4c93e87789cafb6aa422u128).calculate_p2pkh_address(false).iter().zip([49, 74, 74, 90, 109, 100, 114, 80, 89, 51, 89, 49, 113, 50, 84, 97, 67, 85, 110, 118, 98, 90, 77, 97, 120, 113, 84, 82, 55, 120, 85, 106, 84, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8ffee1b8cae85916d393925e06fd93ffu128, 0xf382dc1735fb94c808f927626d7228feu128).calculate_p2pkh_address(false).iter().zip([49, 56, 54, 119, 120, 66, 121, 97, 103, 100, 70, 74, 117, 113, 49, 81, 54, 120, 82, 72, 100, 103, 65, 66, 101, 71, 98, 105, 111, 65, 85, 105, 115, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcffa755638616b94609a380379f680dcu128, 0x232f0ad9cb153b39930c8145836c999bu128).calculate_p2pkh_address(false).iter().zip([49, 75, 54, 99, 114, 104, 110, 83, 97, 98, 68, 118, 109, 112, 100, 117, 76, 118, 80, 70, 83, 116, 76, 97, 51, 104, 103, 122, 122, 85, 56, 81, 101, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3d84b22a1701c695ad0a1ca5c2b19f12u128, 0x6f41037671b28e16caa8514fc6b49b3du128).calculate_p2pkh_address(false).iter().zip([49, 52, 56, 102, 102, 83, 53, 53, 116, 106, 105, 85, 52, 83, 102, 121, 122, 100, 82, 107, 99, 101, 56, 56, 80, 69, 116, 87, 102, 90, 89, 70, 77, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2e62504de0ea04728ea11a419b592964u128, 0xc02c64c8ae1b5fad8c4d918bf75b2b87u128).calculate_p2pkh_address(false).iter().zip([49, 55, 86, 121, 114, 100, 80, 85, 68, 51, 75, 118, 103, 99, 98, 50, 83, 84, 121, 49, 76, 112, 77, 78, 53, 89, 83, 80, 85, 51, 70, 119, 102, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9731db10bae683e826706e79b9b80a53u128, 0x4db1a0b7e57f7b4bb6485e63f87638c3u128).calculate_p2pkh_address(false).iter().zip([49, 56, 86, 121, 88, 53, 56, 74, 106, 99, 84, 66, 101, 98, 103, 51, 109, 77, 87, 111, 113, 55, 99, 65, 115, 119, 100, 114, 88, 83, 120, 70, 77, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc21d05a6940b878ae72d90f9e7c4db4au128, 0x80cf0965641e6441a593046cbe799d34u128).calculate_p2pkh_address(false).iter().zip([49, 55, 122, 122, 87, 50, 77, 120, 68, 84, 106, 115, 72, 110, 54, 50, 53, 70, 98, 85, 85, 82, 78, 83, 53, 70, 115, 49, 104, 54, 122, 105, 86, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf92f06fae2f7c505ddee9b7ce2ad392bu128, 0xfd1983bf50075a41c791cacf431158a6u128).calculate_p2pkh_address(false).iter().zip([49, 70, 86, 86, 82, 86, 112, 121, 102, 113, 88, 85, 51, 106, 87, 100, 53, 82, 71, 122, 115, 103, 51, 53, 85, 90, 72, 119, 87, 87, 110, 67, 110, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdcea5a703d55ee8185725b64d3d1ad5eu128, 0xd01fea55a4d5228f124b937308273d45u128).calculate_p2pkh_address(false).iter().zip([49, 67, 100, 103, 109, 90, 113, 67, 104, 66, 102, 65, 89, 69, 69, 52, 120, 118, 69, 51, 101, 65, 80, 80, 100, 68, 84, 69, 66, 78, 121, 101, 103, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3a888bfa56cffdc2f224057b95870e96u128, 0x23295af516cac7167f05e0a5fdaf23b3u128).calculate_p2pkh_address(false).iter().zip([49, 75, 84, 102, 112, 65, 105, 67, 51, 97, 117, 57, 69, 78, 83, 107, 120, 100, 120, 86, 74, 89, 80, 112, 67, 112, 89, 81, 102, 117, 115, 53, 83, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x14eb09d76179ad020d31b05e6c6e6126u128, 0x1b7c8ae4bf7b22c30d92dad40a5588cdu128).calculate_p2pkh_address(false).iter().zip([49, 67, 67, 55, 49, 50, 78, 81, 90, 65, 54, 74, 103, 97, 105, 55, 97, 98, 116, 49, 65, 99, 111, 85, 122, 75, 120, 89, 114, 89, 103, 109, 85, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdb81222d618cad1b9d53778f6312bd7cu128, 0xff8b9835309382523c7352b33c0a7f97u128).calculate_p2pkh_address(false).iter().zip([49, 67, 118, 80, 118, 86, 51, 78, 55, 87, 85, 52, 53, 88, 88, 81, 114, 111, 117, 55, 52, 66, 109, 82, 76, 109, 113, 88, 70, 78, 55, 80, 101, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa2dd4c85e2cbf76f7e09f4194832537du128, 0x561613c08ec664ff86cbcfca095caa69u128).calculate_p2pkh_address(false).iter().zip([49, 76, 85, 78, 87, 122, 65, 98, 115, 118, 106, 67, 122, 53, 112, 117, 76, 71, 122, 56, 54, 89, 68, 66, 82, 55, 67, 55, 117, 115, 98, 83, 113, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x864916b7e4d20e2ba753e4315aaa866au128, 0x5b45ed786cf50e57cae076cecc06b552u128).calculate_p2pkh_address(false).iter().zip([49, 68, 77, 89, 66, 74, 85, 97, 118, 101, 52, 111, 76, 56, 110, 74, 74, 121, 85, 57, 117, 81, 102, 121, 104, 65, 87, 53, 81, 106, 89, 80, 55, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfd700031eae370d0ef0c2f2f6beda769u128, 0x63d77e3c56643972ac14fb97adca06a4u128).calculate_p2pkh_address(false).iter().zip([49, 53, 83, 104, 75, 69, 67, 75, 115, 109, 118, 109, 76, 67, 99, 68, 52, 85, 84, 118, 49, 72, 70, 120, 98, 106, 106, 107, 120, 110, 90, 71, 100, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa4f1c77a6350533affdf3af98e266631u128, 0x652bfa895399ae19508069b091994014u128).calculate_p2pkh_address(false).iter().zip([49, 78, 107, 57, 71, 84, 86, 80, 75, 81, 121, 57, 80, 101, 85, 97, 50, 111, 54, 116, 75, 65, 104, 56, 75, 118, 80, 52, 116, 97, 102, 75, 49, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7f89c953cf7bbb0c294521b7d62b5cccu128, 0xc1a6a2daafedb3da4805d2faada2ebffu128).calculate_p2pkh_address(false).iter().zip([49, 65, 87, 72, 85, 121, 85, 54, 106, 80, 104, 101, 97, 115, 57, 72, 52, 70, 121, 77, 114, 118, 66, 50, 57, 113, 72, 100, 50, 65, 98, 97, 118, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd86f1d54c2ff5d8364a30216648e316cu128, 0x28516db3fadd0ef4d59a9f43df2ea4aau128).calculate_p2pkh_address(false).iter().zip([49, 74, 67, 120, 56, 117, 115, 119, 88, 49, 66, 71, 122, 54, 90, 65, 86, 74, 110, 70, 109, 116, 107, 103, 101, 109, 122, 89, 103, 102, 119, 56, 97, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1189100783f1c75c320066e96aee0065u128, 0xa191b4a6d9f2e7f973d60076ea07436au128).calculate_p2pkh_address(false).iter().zip([49, 55, 118, 111, 107, 82, 65, 111, 117, 84, 66, 53, 90, 87, 54, 74, 107, 54, 97, 102, 75, 54, 72, 65, 85, 120, 86, 81, 57, 98, 105, 105, 54, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc8ce7cbdebac6954d1ed8dc2c33317a6u128, 0x49c722c3c6c38e039fb66317a08152dcu128).calculate_p2pkh_address(false).iter().zip([49, 71, 53, 80, 76, 54, 71, 70, 115, 50, 86, 107, 99, 90, 50, 88, 115, 49, 122, 122, 50, 104, 115, 118, 76, 75, 116, 49, 116, 102, 84, 98, 71, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xda2eaf9e234486cf93ddd05c12b4fc17u128, 0x957d5e850951a26660ab3b3e93292ae3u128).calculate_p2pkh_address(false).iter().zip([0, 49, 81, 83, 98, 71, 89, 54, 78, 57, 104, 82, 72, 89, 88, 121, 76, 100, 70, 104, 54, 84, 84, 77, 120, 86, 56, 117, 67, 55, 111, 88, 53, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9e1d5758f37dc7505795ff665ab49759u128, 0x9007109eae13c91cf0e5f43b91e86c37u128).calculate_p2pkh_address(false).iter().zip([49, 67, 52, 80, 122, 119, 90, 107, 69, 101, 118, 100, 89, 107, 50, 75, 81, 74, 119, 57, 102, 72, 82, 115, 122, 100, 106, 103, 111, 97, 82, 54, 69, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1df744277cf62b4f59c14706c79d5a71u128, 0x464983ecd03d64f91b2f19bda1260f3au128).calculate_p2pkh_address(false).iter().zip([49, 78, 119, 66, 83, 110, 65, 78, 50, 89, 72, 83, 114, 78, 117, 66, 104, 105, 90, 121, 115, 107, 49, 115, 98, 49, 69, 54, 107, 89, 102, 84, 106, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x84d02a3e4e8abdd03ac62a8519701469u128, 0x876a652f067bb3adc6e923bbd32c13e6u128).calculate_p2pkh_address(false).iter().zip([49, 55, 115, 84, 104, 68, 102, 75, 88, 120, 109, 66, 88, 69, 54, 71, 57, 117, 57, 85, 49, 85, 81, 75, 85, 100, 54, 100, 85, 107, 111, 111, 83, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7a92559d2bc8dc84a3943e0469f252bbu128, 0xde60e3f60d9f1231a536b3171d6ad217u128).calculate_p2pkh_address(false).iter().zip([49, 67, 82, 75, 77, 119, 68, 74, 109, 55, 114, 77, 122, 49, 120, 109, 69, 53, 84, 81, 116, 112, 99, 82, 97, 70, 81, 66, 115, 118, 104, 55, 67, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x78522d457216be6342a420fa9ab5ef92u128, 0x9a1c7f7abb86e2087088f0e3a4d3d4ffu128).calculate_p2pkh_address(false).iter().zip([49, 68, 116, 66, 70, 119, 103, 84, 100, 101, 118, 87, 117, 69, 78, 83, 87, 114, 121, 67, 90, 56, 116, 70, 102, 50, 82, 77, 100, 70, 85, 76, 106, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x38f01ce3d36d13f1a3d1b7f8d457b328u128, 0x198d425e5d38c1343c1f2c1bb16f71e0u128).calculate_p2pkh_address(false).iter().zip([49, 52, 117, 100, 51, 102, 119, 99, 74, 113, 50, 67, 66, 113, 57, 122, 88, 70, 87, 69, 84, 113, 105, 90, 78, 71, 85, 119, 55, 56, 98, 78, 71, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5fbb39a9744cb8c1d17e987ff957fab4u128, 0x832409f04cf62b8794320d95af30aacu128).calculate_p2pkh_address(false).iter().zip([49, 55, 66, 76, 97, 119, 120, 51, 104, 113, 110, 84, 67, 78, 55, 119, 103, 72, 72, 75, 75, 107, 53, 119, 51, 98, 71, 90, 85, 107, 109, 119, 103, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7a50845bbb722113daba523136b447b1u128, 0xd821457ad9905f5d43325efccc2cfed3u128).calculate_p2pkh_address(false).iter().zip([49, 74, 98, 52, 67, 98, 83, 106, 113, 112, 51, 86, 69, 100, 70, 75, 52, 57, 69, 57, 120, 121, 87, 75, 67, 118, 119, 98, 110, 121, 75, 86, 115, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4aa5ee143b0799b1146c5032370d784au128, 0x88aec2add4c510f8e33495d2853ab337u128).calculate_p2pkh_address(false).iter().zip([49, 65, 90, 86, 87, 68, 71, 72, 105, 116, 57, 105, 49, 105, 121, 86, 118, 99, 88, 86, 106, 119, 104, 78, 103, 116, 55, 89, 86, 117, 53, 86, 80, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaef1feba2b4a7a963e16eb2ad6501b0bu128, 0x76bec7f3851ebc3cdb083a41c7845dbbu128).calculate_p2pkh_address(false).iter().zip([49, 53, 100, 100, 78, 84, 121, 84, 115, 83, 99, 81, 67, 66, 117, 89, 90, 85, 70, 105, 74, 107, 104, 74, 112, 102, 84, 77, 106, 51, 51, 89, 68, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x155d9d31c0fd08c719aeea53ead817bbu128, 0x531a962ee7a44777d88930ac0985ab5bu128).calculate_p2pkh_address(false).iter().zip([49, 55, 56, 66, 109, 55, 65, 119, 68, 87, 52, 103, 76, 121, 111, 86, 51, 76, 121, 57, 120, 86, 98, 70, 89, 112, 67, 84, 105, 70, 68, 78, 107, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1f2857805b571d30014e5c68f7157a91u128, 0x96c3757c8ea63a9e726b5782c5671d6fu128).calculate_p2pkh_address(false).iter().zip([49, 67, 89, 83, 51, 68, 50, 81, 107, 52, 115, 76, 101, 84, 97, 78, 90, 99, 97, 83, 109, 76, 49, 114, 50, 51, 98, 85, 51, 111, 68, 100, 111, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x824b8b60ed4d11fe042eb37e8bf572bdu128, 0xdc9b0482d3b8d4bb833bcf3856a8a1ffu128).calculate_p2pkh_address(false).iter().zip([49, 57, 112, 117, 120, 77, 77, 75, 100, 88, 118, 114, 109, 77, 104, 121, 103, 105, 51, 74, 69, 56, 111, 54, 101, 105, 120, 100, 57, 83, 70, 69, 67, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcd76c33dbf7517936b2c32e5e94c5194u128, 0xb92d712882bae2f6376b5b5912637eb1u128).calculate_p2pkh_address(false).iter().zip([49, 54, 69, 118, 77, 50, 67, 55, 69, 76, 71, 104, 109, 86, 76, 82, 80, 65, 75, 90, 76, 88, 88, 98, 101, 103, 90, 117, 53, 74, 53, 78, 103, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe5448c713d57eced1f6517747582f89u128, 0x8501642520939a6a9c68d3b3f2f0720u128).calculate_p2pkh_address(false).iter().zip([49, 51, 111, 51, 110, 67, 49, 51, 117, 78, 67, 72, 49, 66, 66, 84, 85, 104, 101, 97, 82, 121, 57, 66, 84, 72, 111, 66, 75, 104, 99, 106, 117, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe44c656a98bc64553d3cd2fb6d89b058u128, 0x171db4a451e5d2307d63128e2531b732u128).calculate_p2pkh_address(false).iter().zip([49, 78, 121, 119, 74, 85, 75, 117, 98, 53, 83, 107, 76, 115, 89, 118, 74, 106, 87, 119, 114, 72, 76, 100, 56, 114, 50, 80, 120, 119, 80, 83, 111, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfe6314d9980eb2a784a5c94136311809u128, 0x326101193921f40bf1bb111b105d2c34u128).calculate_p2pkh_address(false).iter().zip([49, 66, 69, 116, 112, 87, 90, 114, 69, 107, 99, 78, 83, 67, 106, 103, 77, 105, 90, 119, 120, 105, 122, 87, 68, 112, 81, 121, 53, 101, 78, 76, 107, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe4146ccf6846a154cf373e89cecc1a04u128, 0x1b9be73eaf401aa7b7751652a2b54519u128).calculate_p2pkh_address(false).iter().zip([49, 51, 57, 118, 99, 113, 111, 71, 54, 77, 84, 65, 100, 118, 101, 90, 76, 86, 86, 77, 80, 103, 106, 56, 78, 104, 98, 49, 75, 111, 113, 78, 75, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4b2b3f67ad62c91b28dcd6b90a65db79u128, 0xc97fc2cb8ef04622dc2701857f47c3e1u128).calculate_p2pkh_address(false).iter().zip([49, 72, 105, 51, 72, 83, 113, 90, 69, 99, 90, 52, 89, 115, 53, 87, 67, 99, 111, 84, 82, 76, 97, 90, 86, 50, 77, 52, 121, 105, 53, 90, 71, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc7f4796d880db7237ad22ffcf6621348u128, 0x1039ea13f89b4153c41a68d39376b519u128).calculate_p2pkh_address(false).iter().zip([49, 55, 101, 120, 68, 116, 75, 90, 119, 100, 85, 101, 67, 57, 120, 85, 77, 81, 76, 54, 52, 104, 78, 98, 104, 70, 88, 82, 109, 115, 87, 87, 109, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe113d75c837fc77308f58d62a2ec845fu128, 0x4e56289c5ad999b6b391a3af1c7f49ddu128).calculate_p2pkh_address(false).iter().zip([49, 78, 112, 82, 110, 106, 75, 90, 118, 89, 111, 84, 78, 114, 121, 115, 111, 106, 119, 89, 53, 82, 117, 49, 115, 75, 122, 57, 69, 114, 88, 103, 77, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2fdae5d4dc130d8b626a7c3dd9c1d0e9u128, 0xfa8cf46f24f30523a9f440a6b4db7a9bu128).calculate_p2pkh_address(false).iter().zip([49, 53, 97, 49, 76, 118, 98, 75, 52, 77, 104, 105, 111, 78, 57, 51, 113, 118, 85, 51, 102, 111, 53, 82, 97, 68, 107, 50, 78, 71, 117, 113, 53, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf57c8ab31411221ef0688c44968908ddu128, 0x808aed081437d6c0cb1e67bec16f7ca7u128).calculate_p2pkh_address(false).iter().zip([49, 50, 68, 76, 99, 51, 85, 90, 86, 50, 115, 71, 118, 105, 72, 49, 82, 118, 70, 116, 82, 121, 97, 57, 101, 120, 56, 105, 103, 90, 82, 118, 100, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe093e923faa0a9458591d5d56fb92549u128, 0x98106af5bd6b3d8e3f6a8f4447e6ed91u128).calculate_p2pkh_address(false).iter().zip([49, 80, 83, 106, 101, 76, 78, 101, 70, 83, 98, 55, 78, 68, 67, 49, 57, 115, 98, 121, 118, 100, 120, 88, 104, 114, 103, 122, 90, 75, 55, 65, 76, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3b3fb3ecc16801402a6c11523e293a02u128, 0x3ba07a8bb1153b5825918195cef5b004u128).calculate_p2pkh_address(false).iter().zip([49, 74, 97, 103, 82, 67, 85, 100, 74, 51, 120, 74, 104, 120, 70, 111, 80, 97, 89, 89, 110, 99, 53, 100, 115, 89, 66, 101, 51, 109, 90, 97, 115, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaa82652ae2098fed74ec4d0cbe58bc5cu128, 0xa286729a33a54f6bd42705138621e721u128).calculate_p2pkh_address(false).iter().zip([49, 53, 90, 98, 53, 77, 88, 54, 114, 82, 104, 119, 72, 76, 121, 67, 105, 109, 78, 102, 117, 78, 115, 107, 75, 122, 72, 77, 87, 122, 101, 118, 110, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x39cfedceedc92c7cb867dd0f2a441691u128, 0x65d274c472c91fd2cd37c72f452aedeau128).calculate_p2pkh_address(false).iter().zip([49, 74, 82, 88, 100, 101, 122, 52, 53, 50, 75, 98, 100, 118, 114, 112, 102, 118, 56, 116, 74, 78, 51, 88, 87, 107, 57, 119, 102, 67, 65, 82, 105, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x879f39ac8325451e38f638f1006f06bau128, 0x4c96a6884a8a7c696d97ae56e7168d8bu128).calculate_p2pkh_address(false).iter().zip([49, 67, 103, 115, 119, 78, 98, 100, 122, 109, 51, 104, 102, 54, 102, 117, 53, 65, 87, 100, 111, 85, 120, 88, 57, 72, 119, 53, 70, 110, 109, 121, 101, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x222eb8a3e98e1127abfc25b3157b4d9fu128, 0xd4f24e54bc93ae1a7fe855f7b3d240a3u128).calculate_p2pkh_address(false).iter().zip([49, 51, 68, 118, 71, 112, 85, 49, 104, 90, 97, 70, 51, 100, 55, 102, 113, 55, 49, 103, 70, 67, 50, 66, 74, 56, 103, 77, 120, 72, 82, 111, 112, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdc3a066d6404da66f90e58b85de964b3u128, 0xf8ad14284c938d946b347c58c239669cu128).calculate_p2pkh_address(false).iter().zip([49, 66, 99, 115, 67, 80, 53, 122, 52, 50, 119, 56, 68, 85, 82, 52, 102, 120, 101, 89, 80, 97, 105, 112, 113, 54, 103, 106, 118, 50, 105, 85, 112, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcd88d38efd7fec25739c2bece12a1e9eu128, 0x5da4a2f7ab8d17adea81a3567c8ba715u128).calculate_p2pkh_address(false).iter().zip([49, 51, 82, 107, 77, 82, 74, 82, 86, 51, 68, 56, 83, 72, 100, 71, 56, 68, 89, 101, 110, 56, 55, 88, 53, 72, 85, 122, 76, 65, 113, 118, 102, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb49e0b2c5c260746a9a68d44f790262u128, 0x287731ad637887309ca09cae2b558fb6u128).calculate_p2pkh_address(false).iter().zip([49, 71, 105, 72, 119, 49, 121, 77, 72, 121, 53, 81, 103, 98, 81, 112, 121, 70, 89, 56, 54, 65, 84, 121, 97, 102, 115, 98, 121, 77, 121, 112, 114, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa352cc4677b192ca3723849e831a8971u128, 0x14bd903b3a47d1e77fab24e267bf7a45u128).calculate_p2pkh_address(false).iter().zip([49, 57, 120, 117, 117, 103, 80, 122, 107, 72, 119, 70, 65, 104, 83, 80, 106, 71, 77, 109, 77, 114, 86, 50, 118, 114, 81, 52, 117, 97, 114, 113, 66, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xef4121d803c92269a3f479e0a9d8e257u128, 0xb5ea0d81ee9aa132e1a3169c53393093u128).calculate_p2pkh_address(false).iter().zip([49, 53, 70, 100, 56, 69, 105, 120, 98, 118, 51, 104, 122, 57, 74, 83, 100, 98, 113, 118, 70, 78, 71, 81, 101, 51, 66, 111, 56, 81, 104, 72, 103, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x42a5a16c99c41c2314be36bffe7bf47au128, 0xdafcd203952e5630a525a7a5a3562fcfu128).calculate_p2pkh_address(false).iter().zip([49, 54, 85, 69, 50, 112, 98, 87, 71, 82, 114, 118, 82, 53, 86, 75, 78, 110, 113, 87, 119, 89, 116, 116, 66, 99, 85, 76, 101, 57, 67, 56, 85, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc1145ac2e85b190f4fd04b6a371b4096u128, 0x51e66fb212b76397f3fc6b482c6a50bbu128).calculate_p2pkh_address(false).iter().zip([49, 65, 76, 51, 103, 72, 69, 83, 120, 86, 71, 89, 111, 102, 104, 56, 72, 70, 109, 117, 116, 109, 77, 71, 68, 97, 114, 118, 99, 77, 119, 118, 118, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x78b996b0ec1bc7d5e4517c17da66f679u128, 0xa0ebc61818d289bf6aeff9f795d77425u128).calculate_p2pkh_address(false).iter().zip([49, 53, 109, 86, 114, 99, 75, 70, 105, 65, 112, 81, 90, 100, 121, 107, 114, 80, 89, 121, 85, 104, 102, 53, 110, 86, 83, 57, 69, 97, 116, 116, 83, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x794c3cd6d2eeef962f213ea043beef98u128, 0xdb92087055af94f69f875b0eb18f5510u128).calculate_p2pkh_address(false).iter().zip([49, 76, 122, 82, 82, 67, 76, 103, 51, 99, 98, 65, 75, 113, 121, 110, 89, 70, 101, 101, 111, 90, 120, 84, 101, 113, 111, 121, 117, 70, 49, 71, 52, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2d2980be1de091d657d1c5b264ed02cau128, 0xce117e494ffae0be50c6ce68fc04ccbbu128).calculate_p2pkh_address(false).iter().zip([49, 67, 81, 77, 111, 81, 76, 121, 80, 78, 52, 83, 88, 86, 68, 113, 100, 101, 72, 98, 57, 78, 75, 55, 98, 119, 122, 49, 106, 80, 98, 101, 53, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc026ae022cb3fc2d2ba30f94d4a086e0u128, 0xaf428bc7106cc6ee1f5ffd36188b68dau128).calculate_p2pkh_address(false).iter().zip([49, 67, 105, 70, 118, 53, 99, 78, 119, 90, 121, 70, 52, 70, 90, 69, 97, 112, 54, 81, 52, 84, 76, 53, 82, 90, 117, 70, 119, 54, 54, 85, 117, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x699034526cb919f88359a9f1023bca1cu128, 0xcadb4901fd592953be22ee03a10ba108u128).calculate_p2pkh_address(false).iter().zip([49, 81, 49, 78, 107, 97, 75, 54, 76, 115, 77, 86, 116, 66, 50, 121, 111, 117, 88, 122, 65, 106, 118, 106, 118, 114, 65, 75, 77, 111, 72, 51, 86, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcf29e486f9d80cc7119d44e42fc1c57au128, 0x31722d3d693902cbe9d05f5532421e48u128).calculate_p2pkh_address(false).iter().zip([49, 67, 49, 114, 117, 101, 113, 97, 66, 57, 119, 54, 106, 121, 110, 89, 116, 116, 57, 113, 121, 99, 69, 86, 78, 103, 86, 71, 80, 76, 76, 55, 88, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd3dafc5d838749eb1123d184bd1d671fu128, 0xc138361b895326915a99c7a6ef80d64eu128).calculate_p2pkh_address(false).iter().zip([49, 78, 104, 104, 112, 119, 105, 104, 72, 53, 109, 76, 119, 87, 121, 57, 86, 65, 70, 102, 81, 85, 77, 106, 57, 53, 50, 115, 117, 112, 104, 50, 97, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9857f1a52e4a73bf198fb3288936a7ebu128, 0x3752de62f8ba97515e342daf9ac8dcffu128).calculate_p2pkh_address(false).iter().zip([49, 50, 78, 68, 49, 101, 85, 110, 67, 75, 71, 71, 82, 83, 53, 57, 56, 109, 75, 114, 89, 83, 55, 55, 120, 85, 98, 117, 56, 56, 121, 97, 85, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x922426c19baa54818b38a8c4ce7b232fu128, 0x1b09a014a4a86466db4676501f94667cu128).calculate_p2pkh_address(false).iter().zip([49, 76, 51, 116, 69, 82, 112, 88, 85, 54, 115, 56, 67, 107, 57, 55, 71, 76, 102, 122, 52, 121, 52, 67, 69, 97, 72, 54, 102, 68, 85, 117, 89, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd3c34170fc195890117427f5664f6795u128, 0xbd794b356c2b1d196a1098ace76d2fdbu128).calculate_p2pkh_address(false).iter().zip([49, 68, 50, 105, 116, 82, 49, 69, 65, 72, 104, 100, 50, 115, 115, 53, 115, 110, 113, 71, 87, 51, 83, 50, 113, 78, 78, 83, 76, 83, 65, 76, 102, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb3a860757306c8ef14029beedf33b47eu128, 0x58b6400a60f1018405172996cbab3cfdu128).calculate_p2pkh_address(false).iter().zip([49, 68, 51, 72, 122, 52, 116, 121, 57, 78, 89, 101, 77, 111, 90, 109, 113, 113, 101, 115, 122, 116, 105, 78, 90, 83, 85, 72, 80, 89, 52, 110, 87, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb60304f1dfd78730653432eef04f5f9au128, 0x7cedebe27aa074b3b6d04ed8893cad09u128).calculate_p2pkh_address(false).iter().zip([49, 81, 72, 68, 102, 118, 65, 51, 84, 74, 122, 86, 80, 89, 98, 98, 122, 112, 116, 78, 51, 111, 84, 100, 85, 121, 66, 111, 121, 71, 74, 97, 114, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdc17f50268fc87c7fa1470e9fc602803u128, 0xee6077daeb43ff8f44777a68c600c53du128).calculate_p2pkh_address(false).iter().zip([49, 75, 103, 97, 120, 69, 70, 50, 100, 81, 114, 99, 89, 51, 109, 76, 77, 72, 65, 77, 117, 76, 99, 89, 103, 70, 117, 115, 77, 113, 88, 105, 122, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcd3324aaa566d63ea53330959669cfaeu128, 0x7f94b62f353f4a289d60882a2e5557a9u128).calculate_p2pkh_address(false).iter().zip([49, 56, 87, 97, 87, 107, 114, 100, 80, 102, 113, 51, 85, 83, 90, 82, 103, 71, 89, 106, 98, 52, 52, 112, 111, 87, 113, 118, 66, 72, 80, 87, 75, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9b90d1ba0d5446b8925429d88984604cu128, 0x7e6a1813bda16fa3d1502d1c71e18925u128).calculate_p2pkh_address(false).iter().zip([49, 69, 82, 120, 87, 75, 114, 103, 49, 114, 65, 111, 65, 90, 122, 102, 98, 121, 86, 88, 67, 57, 112, 81, 81, 53, 109, 77, 72, 68, 114, 88, 89, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9eb008b47798be280fa23a0e1b751c97u128, 0xf84ff192c9420552ac8724b38becfc98u128).calculate_p2pkh_address(false).iter().zip([49, 77, 118, 99, 82, 89, 113, 117, 49, 100, 50, 84, 120, 81, 120, 71, 52, 111, 97, 98, 111, 119, 68, 120, 50, 69, 97, 103, 66, 74, 56, 53, 82, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfc3767bc34eed4df127c5fa569f012feu128, 0x3d27c33f6b25386ddd2402f6a82eb717u128).calculate_p2pkh_address(false).iter().zip([49, 65, 57, 53, 118, 111, 65, 65, 53, 116, 118, 89, 65, 65, 111, 115, 122, 76, 105, 117, 112, 72, 67, 106, 106, 111, 115, 100, 57, 51, 116, 80, 115, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1cadd8e1602f2bc78f031f9b77a1951u128, 0x9fcc10e1e720782624930ca4dff7658cu128).calculate_p2pkh_address(false).iter().zip([49, 77, 98, 107, 102, 53, 78, 67, 88, 121, 80, 57, 106, 100, 102, 77, 69, 56, 98, 107, 77, 87, 105, 118, 81, 99, 119, 87, 120, 117, 86, 69, 105, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2c1d4faa7f329647b6ffdc4fcb1a31c1u128, 0x14d8b84ad8917d49f4ae486ba3cf79f5u128).calculate_p2pkh_address(false).iter().zip([49, 55, 54, 86, 69, 97, 99, 122, 86, 117, 109, 57, 98, 121, 118, 74, 56, 68, 78, 71, 65, 85, 87, 106, 116, 67, 80, 57, 100, 87, 115, 117, 118, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe038765275db2139179d479b3d25e5d7u128, 0x9710f504498f7bcf41a8f00dca7cd085u128).calculate_p2pkh_address(false).iter().zip([49, 51, 118, 118, 100, 52, 112, 51, 53, 103, 76, 75, 111, 85, 118, 117, 83, 78, 101, 97, 113, 88, 56, 77, 71, 54, 102, 110, 100, 84, 115, 98, 70, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdacfda47315d4361cd049fcf130156d5u128, 0x81d50960baf34b6b946559256c506c1u128).calculate_p2pkh_address(false).iter().zip([49, 77, 57, 53, 57, 75, 113, 67, 72, 72, 98, 56, 85, 52, 51, 69, 114, 89, 99, 74, 52, 89, 87, 81, 53, 53, 78, 82, 88, 82, 69, 117, 119, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc3a03270f7ac543d945fc837ff5f8560u128, 0xefa6d744c7e3fa64643ee9a70495570bu128).calculate_p2pkh_address(false).iter().zip([49, 50, 83, 120, 74, 67, 76, 65, 89, 111, 84, 101, 110, 75, 107, 117, 106, 75, 98, 77, 67, 83, 112, 80, 110, 98, 69, 66, 49, 105, 78, 107, 114, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x14be2f5b91bac1130c45b7c0e40b8a60u128, 0x5842a24e61264491e5b98e1b36e079a4u128).calculate_p2pkh_address(false).iter().zip([49, 70, 68, 52, 80, 83, 98, 100, 100, 78, 113, 50, 116, 102, 71, 78, 87, 68, 52, 67, 67, 55, 81, 98, 65, 104, 116, 116, 100, 109, 122, 65, 114, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf63d5d7b9a2a166e06614db01aeb5127u128, 0x1724c7ba9ddb4213e1ca12f63bdcdff6u128).calculate_p2pkh_address(false).iter().zip([49, 54, 56, 74, 71, 56, 97, 110, 113, 116, 68, 80, 107, 101, 107, 54, 65, 106, 83, 75, 115, 56, 112, 57, 67, 97, 75, 56, 106, 120, 119, 122, 104, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x22231e57ad0d9032f17da28adbcf4fc8u128, 0xfeb0e659c70da33932ff08066fff013fu128).calculate_p2pkh_address(false).iter().zip([49, 71, 103, 118, 57, 52, 81, 111, 85, 66, 82, 105, 113, 67, 87, 67, 70, 81, 81, 86, 88, 104, 84, 82, 122, 71, 100, 88, 120, 50, 85, 109, 52, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b1ee8091f645f88ce65a729ec4e041au128, 0x837c3a924a34ccbe01e3c8c23b197adcu128).calculate_p2pkh_address(false).iter().zip([49, 52, 101, 72, 90, 68, 112, 74, 99, 89, 51, 99, 109, 88, 115, 72, 120, 65, 77, 81, 78, 100, 98, 49, 110, 107, 87, 118, 85, 86, 85, 77, 78, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6e1f21b615632b8ac474b5c7babb1fb9u128, 0xe00ee8dbcddb8128e747045f27bdd72u128).calculate_p2pkh_address(false).iter().zip([0, 49, 69, 101, 53, 105, 104, 50, 106, 105, 88, 89, 88, 121, 54, 115, 81, 74, 50, 67, 120, 104, 84, 106, 82, 104, 122, 122, 89, 77, 97, 88, 105, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3756297de167640b79b55d5a90933ec3u128, 0x794bed27320d7c6de587b959d4620545u128).calculate_p2pkh_address(false).iter().zip([49, 68, 77, 117, 99, 77, 68, 88, 65, 51, 116, 76, 80, 115, 99, 103, 89, 71, 105, 105, 106, 102, 87, 54, 88, 117, 89, 98, 110, 97, 121, 97, 122, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc369ebd5fa4d95e02cb8c330207449dbu128, 0xed2e5f92950158b2625559e59072e9d7u128).calculate_p2pkh_address(false).iter().zip([49, 74, 89, 103, 66, 66, 67, 107, 69, 77, 52, 54, 119, 80, 98, 54, 57, 77, 106, 88, 54, 111, 55, 117, 119, 115, 74, 100, 71, 67, 98, 68, 107, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x26df4cac93357c7cbc002b7757a85819u128, 0x86aa29c5b0df8a492590c9a3f96b3da0u128).calculate_p2pkh_address(false).iter().zip([49, 77, 109, 99, 88, 117, 100, 86, 101, 90, 53, 103, 66, 80, 121, 99, 52, 116, 55, 112, 105, 87, 82, 71, 103, 111, 51, 106, 71, 121, 65, 109, 119, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbae1e465fa7165fd98acc85adba28cc8u128, 0x7cbff1e7870252d34902813f1a0f4010u128).calculate_p2pkh_address(false).iter().zip([49, 72, 50, 56, 122, 114, 106, 120, 84, 109, 53, 82, 51, 98, 109, 53, 87, 103, 84, 109, 113, 78, 65, 71, 102, 49, 97, 115, 50, 102, 116, 100, 90, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8410afc629943544ed6aa34831ab6b82u128, 0x9da48c868976163d8855823cf69eed39u128).calculate_p2pkh_address(false).iter().zip([49, 77, 113, 100, 76, 78, 55, 87, 99, 77, 114, 105, 121, 82, 110, 72, 112, 121, 67, 120, 84, 103, 74, 86, 112, 118, 68, 105, 109, 121, 56, 70, 77, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x99fab5737832fe9d6dbb0bd797e88d95u128, 0xd389563d8f2e3beb4382e813c561d333u128).calculate_p2pkh_address(false).iter().zip([49, 69, 84, 56, 75, 75, 120, 74, 99, 82, 101, 52, 105, 66, 49, 74, 74, 65, 107, 106, 111, 121, 114, 53, 85, 66, 109, 50, 101, 56, 81, 104, 66, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf8a95200d5df7fc624c3a31b84152060u128, 0x14489e7bb195e578bd9c8adf468273bbu128).calculate_p2pkh_address(false).iter().zip([49, 55, 84, 111, 111, 105, 72, 89, 70, 54, 114, 71, 68, 83, 82, 65, 49, 68, 68, 71, 74, 69, 103, 102, 112, 101, 120, 69, 74, 52, 54, 70, 87, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf490c35e3c05fb8646ef6b3176a3731au128, 0x64d259b35f91753cc97d07920227aaf8u128).calculate_p2pkh_address(false).iter().zip([49, 75, 115, 70, 113, 109, 109, 55, 56, 78, 111, 55, 77, 68, 84, 117, 54, 70, 69, 82, 116, 107, 121, 115, 105, 113, 82, 119, 74, 65, 67, 80, 70, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x53ae3ff4c36650d0c751259f0d1cdf5au128, 0x3bf79bb0cc1e8dc1ebd75d4afcf27370u128).calculate_p2pkh_address(false).iter().zip([49, 52, 113, 71, 82, 84, 121, 119, 102, 89, 53, 107, 74, 83, 49, 69, 71, 76, 89, 49, 106, 76, 76, 99, 111, 65, 103, 98, 72, 99, 81, 84, 55, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xda7f43a50c02437515f4c10f6cf74df2u128, 0x42b4eaa1481a6497ad5e468cdce9d8b9u128).calculate_p2pkh_address(false).iter().zip([49, 76, 120, 118, 107, 111, 102, 80, 85, 119, 120, 75, 57, 57, 85, 68, 68, 88, 88, 90, 122, 66, 111, 78, 71, 51, 121, 103, 119, 57, 68, 72, 65, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdcf7ad82c2a1b3dbfcd71c86665ea285u128, 0xc1341627613b5f9fe4f97a4ce7664f6eu128).calculate_p2pkh_address(false).iter().zip([49, 72, 122, 89, 57, 80, 98, 106, 90, 121, 76, 84, 113, 106, 116, 81, 109, 53, 110, 107, 107, 77, 71, 114, 77, 121, 111, 106, 97, 82, 117, 101, 87, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x315dbe99fdc558782e11e9a2af161640u128, 0xbe3f047f430d4a195427da7e320a5378u128).calculate_p2pkh_address(false).iter().zip([0, 49, 83, 50, 110, 88, 118, 121, 107, 69, 71, 83, 76, 118, 118, 75, 98, 100, 68, 71, 106, 84, 81, 71, 53, 86, 80, 118, 104, 52, 102, 74, 115, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6228fb7dc0a7a2cb4158e19d79da706eu128, 0x892b40aa7c3aad7093f90c1beb03aaafu128).calculate_p2pkh_address(false).iter().zip([49, 74, 72, 49, 102, 101, 106, 111, 65, 107, 106, 83, 121, 106, 101, 65, 109, 81, 121, 114, 82, 89, 89, 100, 120, 114, 54, 89, 104, 115, 116, 121, 72, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb1e69436a773b610bee88efa418feb8au128, 0x40512f9c59148bed577036001c94e732u128).calculate_p2pkh_address(false).iter().zip([49, 66, 105, 76, 55, 85, 119, 99, 51, 55, 90, 65, 120, 86, 69, 68, 118, 109, 74, 77, 103, 69, 75, 68, 51, 109, 72, 89, 82, 71, 54, 78, 119, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaa090099b034ac0df7fa3816304984bcu128, 0xa84126f15b50c8f7ceafa783a2ccb255u128).calculate_p2pkh_address(false).iter().zip([49, 75, 71, 55, 65, 113, 83, 54, 101, 111, 72, 69, 99, 83, 106, 68, 90, 104, 120, 72, 99, 116, 65, 83, 100, 52, 53, 65, 89, 56, 104, 80, 67, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x654f9887319b6e0bd44d39d8c571a95u128, 0x9b315b221ddd8f1e0774febf993bdb16u128).calculate_p2pkh_address(false).iter().zip([49, 68, 80, 119, 52, 76, 100, 106, 75, 57, 82, 83, 88, 51, 81, 99, 121, 83, 119, 107, 97, 69, 89, 87, 118, 117, 83, 88, 69, 84, 76, 89, 66, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x606dadcea6ffc65a5e62f36ad0a51bc9u128, 0x804d2e3b5b46e07956b810f1099b0859u128).calculate_p2pkh_address(false).iter().zip([49, 69, 68, 82, 50, 115, 97, 109, 99, 87, 101, 51, 55, 55, 69, 56, 65, 114, 80, 77, 88, 82, 72, 80, 83, 116, 83, 51, 114, 113, 78, 114, 115, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcaec21df0f0d8ab03519b1126755e639u128, 0x368bb4e4392fcb2068594c01f8ceae95u128).calculate_p2pkh_address(false).iter().zip([49, 80, 119, 68, 120, 98, 57, 103, 67, 106, 85, 74, 105, 120, 107, 85, 70, 101, 118, 75, 56, 101, 78, 119, 110, 74, 55, 109, 105, 80, 110, 53, 51, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd3c1ae5ad20b4a4cc026d21568790caeu128, 0xf6f55a6fa0e1d67759e412b6339edb39u128).calculate_p2pkh_address(false).iter().zip([49, 56, 80, 119, 70, 53, 53, 57, 81, 76, 116, 115, 57, 66, 116, 117, 67, 71, 105, 56, 106, 100, 54, 82, 105, 105, 122, 70, 87, 87, 97, 76, 120, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa65bc88cdc65e78d8cdcd5e0ee3fb76fu128, 0xdffaefa79b6c5fd07ecc43f2793182e0u128).calculate_p2pkh_address(false).iter().zip([49, 80, 109, 99, 85, 115, 51, 113, 121, 75, 110, 76, 105, 105, 51, 67, 99, 98, 99, 107, 100, 110, 88, 89, 85, 83, 81, 78, 89, 104, 57, 70, 83, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc1da50e0fc9a2600a6ee4e4be2635679u128, 0x74e2117c8c413daaccdacd00c07d1561u128).calculate_p2pkh_address(false).iter().zip([49, 67, 53, 103, 100, 121, 114, 122, 69, 116, 81, 49, 90, 54, 115, 69, 104, 116, 85, 77, 83, 71, 81, 70, 75, 80, 90, 74, 102, 50, 98, 71, 78, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdc1177fd6013ec76d4dd2503895b0785u128, 0xcb690ed322dd636277db05f56196c51du128).calculate_p2pkh_address(false).iter().zip([49, 76, 112, 101, 50, 103, 117, 122, 87, 65, 52, 57, 57, 119, 102, 101, 77, 102, 90, 113, 107, 117, 114, 109, 106, 98, 100, 81, 106, 53, 121, 97, 116, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8ee1393a9cc5973bb2b9b1154496d602u128, 0xb6478ef8848b28ef65930e8ec79c6338u128).calculate_p2pkh_address(false).iter().zip([49, 51, 56, 55, 53, 81, 57, 75, 74, 66, 53, 100, 75, 114, 99, 83, 84, 83, 114, 85, 121, 90, 70, 84, 104, 49, 116, 71, 56, 49, 120, 102, 65, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2a004e064c98812f9301efa0498fe7c2u128, 0x1568ecd36a18bba87795fe50ab2dcc3u128).calculate_p2pkh_address(false).iter().zip([49, 68, 71, 120, 70, 121, 101, 118, 115, 112, 54, 113, 89, 101, 74, 88, 86, 88, 117, 86, 116, 76, 88, 74, 71, 82, 77, 98, 71, 110, 80, 99, 106, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc9d828bf5cbaab17f278a590b4107c17u128, 0xda9bf5280ac185a3bacbf9b2cc345414u128).calculate_p2pkh_address(false).iter().zip([49, 57, 81, 90, 110, 75, 112, 72, 117, 89, 56, 116, 65, 88, 55, 74, 56, 106, 109, 56, 84, 90, 122, 68, 103, 54, 107, 97, 75, 84, 97, 97, 114, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x65b3fbcc2e7507db5cdaf0f9df019c2cu128, 0x5a17aeca38bfc2e62097220e87c31a56u128).calculate_p2pkh_address(false).iter().zip([49, 71, 53, 118, 53, 119, 122, 104, 111, 71, 121, 76, 69, 67, 116, 49, 86, 122, 85, 52, 75, 101, 118, 101, 90, 90, 52, 122, 119, 99, 52, 53, 100, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfbb0bbc655b837868d3421ccbe1d30a9u128, 0xff8ebd53b6eba2034c89c908e8de456eu128).calculate_p2pkh_address(false).iter().zip([49, 52, 117, 104, 113, 84, 103, 53, 107, 84, 55, 87, 66, 68, 71, 89, 89, 68, 106, 119, 102, 100, 107, 49, 49, 100, 86, 54, 118, 83, 83, 65, 55, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x59f706dd264a5a407500ae73749ef39u128, 0x8206ac04b57df60adc0aff70ec3f25c4u128).calculate_p2pkh_address(false).iter().zip([49, 78, 65, 71, 49, 74, 113, 56, 65, 112, 70, 101, 56, 83, 82, 110, 106, 117, 76, 50, 115, 66, 115, 89, 54, 71, 117, 113, 70, 103, 54, 85, 120, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6c71480720d74e397efce2f623cd4015u128, 0x52bf40d1c8c3df700982599eb5aed779u128).calculate_p2pkh_address(false).iter().zip([49, 54, 114, 78, 89, 100, 122, 54, 70, 105, 117, 65, 118, 111, 49, 50, 52, 89, 51, 90, 76, 55, 78, 82, 106, 90, 109, 67, 101, 122, 77, 75, 103, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xce1c65b7005215e4ed32022adce1d104u128, 0x9f1615a8d1a4da23dbff6076e721ac93u128).calculate_p2pkh_address(false).iter().zip([49, 65, 53, 65, 119, 112, 54, 113, 77, 121, 117, 67, 120, 56, 70, 101, 83, 104, 85, 107, 83, 114, 117, 119, 57, 98, 120, 97, 65, 74, 104, 109, 87, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbd4b0b39c315ff9fa2d5b3765b01d5ddu128, 0x5b5e597995008b771e977fb20769efe6u128).calculate_p2pkh_address(false).iter().zip([49, 65, 104, 118, 80, 115, 77, 78, 51, 65, 82, 68, 75, 89, 71, 76, 65, 70, 100, 84, 104, 101, 114, 97, 83, 65, 50, 121, 67, 82, 107, 75, 97, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x22df694d888bfc43e60bfc8ae2fd92bdu128, 0xb73ea0de1ecd84289ccfb2632342e75du128).calculate_p2pkh_address(false).iter().zip([49, 55, 53, 72, 118, 76, 72, 107, 111, 74, 111, 113, 86, 77, 74, 76, 102, 77, 100, 105, 75, 118, 104, 90, 113, 72, 103, 77, 75, 50, 105, 80, 51, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x88bea7dfbb590a153179c1953dd2adb6u128, 0xbb9fa762683781759b8c18f9a87d1869u128).calculate_p2pkh_address(false).iter().zip([49, 80, 118, 53, 81, 111, 102, 77, 102, 82, 55, 87, 50, 110, 120, 111, 114, 106, 72, 70, 57, 85, 120, 78, 90, 117, 82, 83, 56, 117, 83, 112, 101, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x35c29cfd742075085d7f4e9ef8385c73u128, 0x82c68363ff2a6c42d1895c0ca757dec8u128).calculate_p2pkh_address(false).iter().zip([49, 68, 116, 119, 111, 72, 114, 120, 49, 69, 119, 49, 100, 97, 90, 87, 97, 54, 75, 66, 100, 110, 109, 69, 102, 52, 122, 119, 72, 78, 83, 120, 72, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2a5749585b0358a816bb4e230dea3b2fu128, 0x409a841c89c96331f1f01e179e9e9bfdu128).calculate_p2pkh_address(false).iter().zip([49, 52, 88, 77, 121, 110, 98, 56, 111, 51, 52, 75, 118, 77, 83, 103, 98, 114, 82, 84, 54, 50, 80, 116, 100, 81, 99, 65, 107, 110, 67, 90, 72, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x25e85017d47a135c66afe1a54cef41d0u128, 0x69dd0a3d1a8fc2048b91efd511711912u128).calculate_p2pkh_address(false).iter().zip([49, 51, 104, 84, 53, 84, 71, 97, 85, 83, 103, 100, 89, 110, 76, 75, 106, 98, 66, 57, 69, 119, 115, 105, 71, 115, 90, 106, 70, 71, 105, 75, 49, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4c9b810ce1e0d2a44263e790388c8746u128, 0xb191426d82d58aa9423c928e016b5b7du128).calculate_p2pkh_address(false).iter().zip([49, 56, 98, 49, 97, 116, 100, 67, 113, 84, 101, 68, 99, 83, 77, 114, 54, 71, 57, 111, 110, 121, 88, 85, 77, 86, 69, 78, 76, 50, 119, 87, 53, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcabe02545e13cf7ea95e8bcbbc98da1bu128, 0x35fa0982998ef620e7e4e156e0cdafcdu128).calculate_p2pkh_address(false).iter().zip([49, 68, 68, 67, 87, 88, 65, 99, 69, 86, 117, 67, 68, 111, 120, 117, 109, 120, 115, 103, 115, 120, 78, 53, 105, 78, 84, 83, 104, 77, 87, 89, 114, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5fbff42839037420a16a7d3d2c25be63u128, 0xb54e183ea1deb23c1c0afb1d8f9c825au128).calculate_p2pkh_address(false).iter().zip([49, 54, 106, 77, 67, 121, 115, 97, 80, 77, 50, 121, 90, 114, 72, 67, 109, 54, 111, 100, 121, 81, 103, 78, 97, 89, 105, 66, 74, 82, 85, 53, 97, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xab16fc5449528ff5e26aeb04a833b8dfu128, 0xeab14adb6bf857f940a1a8dc09862ca3u128).calculate_p2pkh_address(false).iter().zip([49, 56, 85, 56, 57, 97, 100, 114, 102, 67, 105, 109, 85, 106, 99, 105, 104, 51, 85, 77, 117, 50, 70, 121, 114, 114, 122, 54, 54, 88, 104, 109, 55, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x10cd3c7b38802b8510d8c17628c2270eu128, 0x1977af5777d8aee5bbe05df98cce5d98u128).calculate_p2pkh_address(false).iter().zip([49, 50, 84, 71, 121, 98, 104, 76, 82, 71, 53, 90, 97, 74, 114, 90, 89, 49, 72, 81, 75, 89, 88, 121, 69, 75, 98, 104, 117, 110, 51, 78, 105, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x34e5bd779cbc7170a026aaefd8217c96u128, 0x1bb4e8fa93f84898fb54a0ce323b1ff4u128).calculate_p2pkh_address(false).iter().zip([49, 76, 65, 72, 116, 86, 50, 98, 55, 118, 120, 70, 107, 105, 72, 56, 52, 99, 55, 97, 121, 88, 113, 122, 117, 70, 69, 56, 101, 68, 110, 114, 88, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd4f86b32e25c8893fdb70665106dba55u128, 0x1dc4c3ce2b24a110ba5343b41d40c500u128).calculate_p2pkh_address(false).iter().zip([49, 56, 77, 90, 78, 89, 57, 86, 75, 97, 51, 66, 122, 56, 100, 117, 106, 49, 113, 88, 112, 52, 51, 111, 66, 68, 122, 78, 66, 75, 56, 56, 83, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbf1fb9cec48e1cd9f10e25c1ed8192a4u128, 0x8344b7520e247978f902efb3092d8c3u128).calculate_p2pkh_address(false).iter().zip([49, 68, 122, 65, 56, 69, 87, 97, 121, 69, 68, 71, 107, 116, 84, 50, 55, 103, 97, 85, 75, 83, 75, 110, 68, 49, 53, 52, 51, 84, 50, 76, 103, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa717f7fef61f869728b231be28cb20d0u128, 0xe8c00ce2305841ca42c659cf43e3da3eu128).calculate_p2pkh_address(false).iter().zip([49, 56, 116, 86, 52, 66, 99, 90, 68, 57, 52, 84, 111, 116, 81, 107, 109, 90, 113, 53, 69, 109, 82, 109, 52, 74, 71, 71, 82, 105, 78, 55, 55, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x498757fc2bd12f8d11fba161c350c8cfu128, 0xa2794b1b88757dcee8edcfb054754094u128).calculate_p2pkh_address(false).iter().zip([49, 56, 100, 103, 49, 68, 111, 75, 103, 99, 65, 84, 66, 66, 68, 115, 104, 101, 84, 71, 101, 83, 53, 104, 117, 50, 71, 113, 90, 51, 75, 51, 88, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8dd139d8cdf668d65e0655053c7d2e69u128, 0x31173e458efe144a2e7561d0841aa111u128).calculate_p2pkh_address(false).iter().zip([49, 78, 107, 98, 70, 67, 75, 104, 112, 84, 113, 74, 113, 68, 103, 117, 56, 70, 86, 99, 68, 82, 105, 97, 52, 69, 105, 90, 49, 49, 113, 80, 120, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb829d0cd50979ab5b9400c01702d0428u128, 0x39e45e87baba3b8ea1dfe48269eef0aau128).calculate_p2pkh_address(false).iter().zip([49, 77, 70, 106, 86, 98, 117, 68, 56, 82, 102, 90, 72, 112, 57, 74, 74, 90, 98, 56, 85, 82, 103, 118, 72, 117, 118, 67, 70, 75, 89, 75, 56, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbf9bd343d548b412fa5e60e9f92d8db3u128, 0x6b2ca6acc1dd089978bfa6f12dba57c3u128).calculate_p2pkh_address(false).iter().zip([49, 71, 116, 67, 57, 107, 117, 83, 115, 77, 56, 113, 103, 110, 104, 65, 101, 110, 77, 90, 115, 67, 88, 98, 104, 65, 107, 76, 50, 97, 82, 72, 74, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x28dc4a74dd3a82e53a796ce27ca7afabu128, 0x59b782ae72a92362f85eb705ef67a25fu128).calculate_p2pkh_address(false).iter().zip([49, 75, 67, 52, 86, 57, 70, 97, 69, 65, 104, 117, 77, 110, 122, 105, 119, 97, 98, 54, 85, 50, 109, 70, 97, 82, 56, 98, 111, 115, 86, 97, 72, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x597ef899e0217aab493aee4fe883f14cu128, 0x9b1053fa07182c1a919c2f08a6c18ad6u128).calculate_p2pkh_address(false).iter().zip([49, 53, 71, 97, 112, 117, 100, 113, 54, 52, 98, 107, 66, 54, 102, 120, 70, 105, 97, 118, 103, 68, 122, 75, 100, 102, 116, 86, 103, 109, 74, 111, 103, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa5861cb9a9554502b9ed97895511a93eu128, 0x3801881fd36ed1c8b06e9b149be0ceacu128).calculate_p2pkh_address(false).iter().zip([49, 81, 54, 65, 99, 101, 84, 72, 66, 98, 75, 122, 57, 122, 49, 103, 75, 107, 103, 100, 49, 83, 83, 102, 85, 105, 84, 52, 116, 52, 65, 118, 85, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1ec196b7978b23277a82482cc85327a0u128, 0x9d0c42211a7e785352c2033723a6b177u128).calculate_p2pkh_address(false).iter().zip([49, 56, 78, 56, 76, 115, 52, 71, 118, 86, 65, 101, 52, 100, 83, 114, 119, 102, 100, 74, 84, 49, 107, 67, 107, 117, 104, 120, 120, 72, 89, 84, 65, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x91e204e8f79c3d52731eb2d9bb912825u128, 0x9d9bcd78b874163ba1606888ad2a3e61u128).calculate_p2pkh_address(false).iter().zip([49, 51, 122, 74, 102, 122, 80, 118, 88, 111, 107, 105, 113, 104, 112, 72, 100, 112, 83, 110, 119, 121, 85, 121, 104, 97, 52, 83, 87, 66, 98, 80, 86, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfee561fb9c6fca6e2085c91134dd08a3u128, 0xf018034e8efad5047c1b4c541e71286u128).calculate_p2pkh_address(false).iter().zip([49, 57, 69, 88, 81, 84, 115, 50, 85, 122, 100, 76, 49, 51, 85, 116, 82, 100, 87, 117, 56, 78, 119, 106, 85, 66, 88, 103, 101, 76, 75, 88, 85, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x63d4c77205164212a1cb9285124ab4fau128, 0xece4e43b63226df93f0d8769b3f50e79u128).calculate_p2pkh_address(false).iter().zip([49, 78, 66, 121, 122, 116, 86, 56, 109, 97, 57, 97, 57, 103, 106, 82, 55, 101, 117, 65, 50, 115, 89, 70, 74, 83, 65, 70, 76, 121, 50, 74, 112, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfa466920cc1addde029c2db60634faf2u128, 0x893eabaefb62217cd44fa279db0768fu128).calculate_p2pkh_address(false).iter().zip([49, 56, 113, 89, 87, 51, 69, 66, 100, 121, 112, 104, 56, 77, 57, 85, 97, 52, 117, 89, 119, 65, 107, 122, 103, 56, 90, 82, 87, 76, 109, 52, 49, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6f3964dda6217770572adacc827038bau128, 0x5a26e6b7fe678fa1524814f5e3806d29u128).calculate_p2pkh_address(false).iter().zip([49, 57, 100, 51, 117, 71, 88, 83, 116, 68, 97, 106, 115, 74, 71, 80, 52, 68, 89, 90, 82, 100, 69, 83, 100, 75, 120, 69, 117, 121, 115, 97, 84, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfaff892e20f1c04ab63143a488372536u128, 0x4ab4028b27785bb55af02a33f0f5c583u128).calculate_p2pkh_address(false).iter().zip([49, 55, 118, 114, 111, 49, 103, 107, 98, 117, 83, 102, 89, 109, 77, 120, 89, 114, 67, 81, 87, 122, 50, 110, 114, 102, 81, 86, 120, 120, 49, 69, 67, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7edcebfc362c91bebe4f78b4a5a62cf5u128, 0xba44904d9e05304851cd79c62051669eu128).calculate_p2pkh_address(false).iter().zip([49, 78, 89, 66, 83, 81, 100, 121, 57, 105, 119, 112, 83, 81, 86, 70, 114, 55, 120, 88, 81, 87, 119, 85, 72, 97, 83, 85, 54, 97, 105, 67, 66, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x59d0167d68d64970c0c1a84abd0e688du128, 0x9789a917b92bc54540ddbcd6502b9816u128).calculate_p2pkh_address(false).iter().zip([49, 57, 81, 86, 54, 117, 109, 103, 74, 88, 54, 99, 103, 118, 87, 105, 86, 82, 76, 121, 83, 69, 101, 116, 57, 102, 66, 112, 100, 121, 110, 101, 55, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6c5aba01a5f27c6892581489075b1f4fu128, 0x428d9fae8fb37186538005b61b839ecbu128).calculate_p2pkh_address(false).iter().zip([49, 71, 89, 90, 87, 81, 101, 118, 55, 75, 85, 105, 100, 118, 105, 78, 120, 75, 103, 76, 70, 105, 116, 67, 88, 65, 77, 109, 120, 100, 103, 110, 50, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe5ff76347e0563439f347ae50397aad6u128, 0xe69ea130673fb327933e5d029b91c2dau128).calculate_p2pkh_address(false).iter().zip([49, 74, 115, 120, 83, 68, 105, 99, 87, 51, 67, 100, 78, 122, 83, 67, 50, 80, 76, 116, 81, 81, 111, 77, 119, 121, 85, 89, 109, 75, 114, 75, 106, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd8dac7c3eca83eea39782d4cd317128bu128, 0xda1d448454356061014fd954ae987d98u128).calculate_p2pkh_address(false).iter().zip([49, 65, 86, 104, 67, 77, 110, 111, 117, 99, 114, 70, 51, 103, 98, 50, 122, 122, 105, 54, 107, 72, 85, 77, 87, 107, 78, 106, 65, 121, 50, 111, 121, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7d4129dbd1667d6ace124aa256949a41u128, 0x168a367eb7847d68db30a14d979c569u128).calculate_p2pkh_address(false).iter().zip([0, 49, 77, 119, 74, 109, 65, 89, 49, 106, 118, 70, 54, 67, 69, 87, 52, 100, 80, 121, 87, 78, 107, 102, 111, 87, 65, 82, 54, 106, 109, 115, 87, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4d9364e1894f08805f82695ca94a5052u128, 0x8c9969c76a911e43b24876eb14c1ae9cu128).calculate_p2pkh_address(false).iter().zip([49, 69, 115, 52, 115, 99, 71, 67, 56, 51, 106, 52, 111, 97, 107, 53, 107, 56, 100, 106, 72, 55, 106, 49, 80, 68, 65, 54, 80, 112, 74, 72, 50, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x610a73ef2a87b90917dc6a92ee20a2e4u128, 0x5d6c2b43840bb679beed790989e360adu128).calculate_p2pkh_address(false).iter().zip([49, 78, 104, 107, 52, 112, 102, 122, 111, 104, 80, 57, 103, 88, 54, 106, 120, 111, 102, 69, 114, 121, 109, 69, 56, 87, 98, 76, 89, 105, 56, 121, 105, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x884c25b8e8833f06f593b0d8acc9f2dbu128, 0xc693eeee634cd5e6e9372d36f1953e1du128).calculate_p2pkh_address(false).iter().zip([49, 54, 72, 69, 100, 51, 116, 88, 82, 55, 53, 121, 116, 55, 70, 81, 102, 82, 104, 76, 120, 51, 70, 88, 121, 118, 57, 102, 53, 51, 75, 55, 53, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x666308ec1b82695d476c9456a6b31c0fu128, 0x2405b964212b549baf3c3a503a0cea94u128).calculate_p2pkh_address(false).iter().zip([49, 75, 122, 49, 107, 85, 80, 120, 114, 100, 122, 82, 77, 114, 120, 82, 110, 89, 69, 51, 105, 65, 75, 90, 68, 102, 89, 112, 118, 65, 89, 55, 74, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8bf4c8a7498b5763263cb4a5d5a72f8au128, 0xbf0a48c2a863157eacbc3e15f1fb827u128).calculate_p2pkh_address(false).iter().zip([49, 65, 54, 56, 117, 103, 103, 71, 65, 122, 71, 74, 83, 55, 98, 75, 107, 89, 105, 106, 83, 49, 87, 97, 75, 98, 81, 56, 98, 49, 107, 119, 116, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7e94a11acf50100c3f85de96ef88eafcu128, 0xc89d20b84bfa2f99d5d0befdea0c24dfu128).calculate_p2pkh_address(false).iter().zip([49, 78, 115, 68, 102, 121, 90, 49, 71, 69, 117, 119, 77, 80, 72, 107, 117, 74, 53, 118, 100, 116, 107, 89, 71, 116, 120, 88, 89, 119, 112, 115, 115, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbf9224b78d4b74191a13a330b44157c8u128, 0x9780a804d7cac6f65f89dcc153ee40d2u128).calculate_p2pkh_address(false).iter().zip([49, 72, 53, 78, 105, 99, 50, 118, 78, 87, 83, 98, 107, 80, 113, 116, 99, 80, 110, 77, 106, 55, 53, 55, 117, 57, 106, 75, 65, 52, 51, 120, 80, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x431c1a9e4b3fffb6be1164f205bfff8u128, 0xb083367d79c02226af6753a4f30ea05cu128).calculate_p2pkh_address(false).iter().zip([49, 72, 56, 83, 68, 49, 103, 69, 87, 83, 65, 77, 78, 66, 120, 82, 87, 81, 103, 71, 76, 78, 78, 49, 75, 120, 71, 85, 81, 88, 118, 102, 117, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3f9eff3c5436abfb8d9aa602d55cdbbdu128, 0x8098f49ee44c7dce8b2283b4c0c47810u128).calculate_p2pkh_address(false).iter().zip([49, 51, 99, 67, 105, 78, 78, 120, 102, 111, 111, 98, 102, 87, 72, 113, 88, 82, 69, 104, 90, 78, 107, 86, 105, 102, 112, 68, 81, 103, 65, 78, 116, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf9af7734f3b356dfabc5e93f6f5fdf8eu128, 0x44dbac365eed45681b5cee694326118u128).calculate_p2pkh_address(false).iter().zip([49, 54, 121, 54, 71, 80, 54, 88, 71, 113, 85, 75, 115, 121, 50, 87, 51, 82, 57, 52, 85, 117, 107, 57, 119, 115, 122, 119, 97, 68, 83, 51, 85, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x36fdab117110d2158c0a97dad76e2304u128, 0xd750da116309e69dccb348337f4a0603u128).calculate_p2pkh_address(false).iter().zip([49, 51, 90, 56, 112, 54, 116, 74, 54, 99, 87, 65, 67, 72, 111, 87, 111, 103, 66, 104, 53, 97, 82, 105, 53, 54, 106, 105, 54, 107, 115, 107, 84, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x359937680360f258bcf6daf25c9149a2u128, 0xd898c0061a1b116e23ebc5b397e81a3fu128).calculate_p2pkh_address(false).iter().zip([49, 80, 115, 106, 51, 106, 53, 89, 65, 84, 88, 109, 112, 104, 113, 68, 120, 78, 50, 83, 77, 67, 55, 77, 65, 116, 51, 121, 106, 72, 119, 52, 81, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x70b9c2e262e2c10817969365438eaf1u128, 0xa278991a04b8ea4dbc170c97454012c2u128).calculate_p2pkh_address(false).iter().zip([49, 72, 97, 55, 111, 72, 56, 118, 53, 69, 122, 49, 100, 53, 65, 88, 86, 85, 102, 75, 115, 99, 57, 52, 50, 121, 69, 118, 87, 80, 102, 75, 52, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd868cb530e034cea7f7d88aae29c2adau128, 0x4dfcf1e374dcd98e7cc2fe2588168c65u128).calculate_p2pkh_address(false).iter().zip([49, 70, 68, 82, 82, 97, 118, 67, 69, 52, 50, 55, 55, 84, 77, 82, 50, 68, 77, 65, 56, 110, 78, 112, 98, 72, 80, 75, 98, 116, 74, 83, 119, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc6507093c741eec1a6a1b08b88d221fdu128, 0x72bba5992f55c33f4dcf93a96f9bce16u128).calculate_p2pkh_address(false).iter().zip([0, 49, 75, 111, 117, 99, 106, 104, 49, 99, 90, 109, 107, 77, 118, 102, 53, 67, 57, 119, 74, 105, 56, 120, 110, 70, 66, 71, 113, 85, 111, 84, 52, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa8b2172aafa9842f4d004efa08c3b7u128, 0x9993308a6a0012af9d4853f3677cd18eu128).calculate_p2pkh_address(false).iter().zip([49, 54, 102, 70, 120, 65, 103, 75, 115, 53, 100, 89, 112, 99, 76, 54, 105, 80, 83, 122, 103, 121, 56, 81, 103, 88, 111, 89, 75, 56, 57, 90, 68, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf884a0669ef43d8d92d11c2b3b18056eu128, 0x37ce9881671c4fa452519a51cb698560u128).calculate_p2pkh_address(false).iter().zip([49, 74, 51, 87, 90, 100, 112, 102, 50, 97, 122, 57, 118, 107, 83, 110, 72, 84, 110, 98, 74, 78, 113, 49, 80, 53, 110, 116, 72, 65, 104, 88, 113, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5105d820945bd1031437e5b6e69ad41au128, 0xc20d2cc192e4dd571c30d0c06d044d0bu128).calculate_p2pkh_address(false).iter().zip([0, 49, 115, 66, 103, 85, 52, 85, 100, 107, 99, 116, 81, 118, 109, 103, 55, 56, 55, 53, 115, 109, 111, 54, 82, 75, 52, 56, 75, 115, 50, 117, 69, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x905854fa91a8d3ae95a724509c742babu128, 0x12ed9e81d65ccf7a67e525d5f80d4ac3u128).calculate_p2pkh_address(false).iter().zip([49, 71, 116, 69, 98, 66, 105, 84, 112, 97, 113, 57, 81, 56, 89, 89, 120, 65, 83, 87, 109, 77, 119, 107, 111, 72, 116, 112, 56, 88, 98, 112, 101, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x479103e3520297c253efa419bf48ce38u128, 0xce3c4ed7ad5d146deefbf927ff8e6e81u128).calculate_p2pkh_address(false).iter().zip([49, 69, 105, 85, 54, 85, 56, 99, 71, 110, 69, 116, 65, 98, 99, 75, 83, 87, 105, 52, 71, 114, 51, 120, 106, 53, 49, 76, 66, 121, 119, 88, 74, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x30922324088744ebef34707696426d7bu128, 0x1137ca5d6241bbebda618865fc940cdbu128).calculate_p2pkh_address(false).iter().zip([49, 57, 118, 84, 121, 120, 116, 83, 121, 68, 120, 87, 57, 67, 105, 122, 115, 87, 100, 81, 98, 109, 76, 113, 118, 112, 100, 74, 99, 111, 88, 76, 112, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5911a67e8eb443c44e4351bf26008feau128, 0xe55c8ba70873c6e910f53426a4a3cd78u128).calculate_p2pkh_address(false).iter().zip([49, 78, 112, 75, 68, 118, 70, 105, 102, 75, 111, 57, 119, 71, 81, 101, 56, 77, 84, 57, 83, 114, 80, 53, 116, 70, 105, 75, 101, 85, 67, 56, 68, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x377feb918138bdc63e1ed07d2cdccd72u128, 0x324c0df73e09115c4a48e5ecd160385du128).calculate_p2pkh_address(false).iter().zip([49, 77, 69, 67, 111, 80, 88, 81, 75, 109, 65, 120, 68, 81, 57, 87, 83, 67, 112, 70, 104, 75, 101, 77, 109, 107, 56, 54, 50, 111, 110, 86, 53, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4ce5078abe3563e78e90a09b6dcdbfc2u128, 0x1de2926ddc06c8ff2a0d611e5cf0686bu128).calculate_p2pkh_address(false).iter().zip([49, 53, 118, 71, 84, 50, 50, 56, 109, 113, 99, 119, 86, 101, 67, 54, 86, 78, 97, 112, 67, 82, 55, 120, 80, 50, 88, 119, 103, 77, 82, 116, 99, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b43b4a9a7a41741d5186fa1ef9ee7bu128, 0xc83420ed7479f4ef863eeb271635078cu128).calculate_p2pkh_address(false).iter().zip([49, 50, 55, 74, 65, 54, 87, 90, 82, 71, 76, 50, 99, 103, 71, 82, 111, 69, 84, 104, 71, 65, 116, 111, 72, 115, 90, 122, 84, 68, 104, 115, 90, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6c2f31baf1d788d9202386583c5d8bb6u128, 0xefe2ecca12f0f9929a0a37299a879b8cu128).calculate_p2pkh_address(false).iter().zip([49, 50, 98, 103, 86, 78, 113, 72, 81, 103, 86, 105, 81, 122, 82, 103, 81, 75, 104, 76, 77, 50, 71, 111, 57, 89, 87, 81, 121, 71, 66, 76, 101, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x36bd8a5b2f82c14d97803b23568c194du128, 0x975203179572409aa79d73f1d7b10c2au128).calculate_p2pkh_address(false).iter().zip([49, 57, 112, 110, 89, 111, 76, 67, 74, 68, 87, 77, 107, 66, 105, 74, 100, 121, 68, 121, 67, 109, 51, 72, 82, 88, 82, 98, 77, 53, 50, 106, 107, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9228d48b9c3235fcb24211981ff65471u128, 0xfb99f54f03d86f337efd88e7988fc725u128).calculate_p2pkh_address(false).iter().zip([49, 51, 103, 113, 118, 120, 89, 113, 119, 117, 119, 65, 115, 109, 117, 53, 88, 82, 121, 86, 84, 105, 85, 109, 56, 54, 71, 75, 119, 109, 117, 98, 89, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xab50f80b7c03d9e6a4e924070176c00bu128, 0x2cf829694b2d4d07c2d7f05e9d26463u128).calculate_p2pkh_address(false).iter().zip([49, 69, 55, 90, 109, 115, 90, 70, 81, 86, 72, 120, 81, 118, 49, 122, 97, 87, 89, 122, 121, 84, 66, 118, 112, 100, 118, 77, 67, 68, 100, 54, 122, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd19eccd8b4c84bc9a3ef11324510090fu128, 0x178ba8c7d8b7cebc7864679e631cc45du128).calculate_p2pkh_address(false).iter().zip([49, 68, 115, 98, 104, 57, 74, 103, 90, 68, 56, 113, 105, 55, 70, 101, 54, 121, 51, 88, 83, 55, 49, 105, 104, 72, 112, 89, 118, 114, 54, 54, 74, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x255c1b98267b532fceb446e14a0b1b9au128, 0x8dab72ad25333a8bf467c18d21b5e9c3u128).calculate_p2pkh_address(false).iter().zip([49, 71, 105, 84, 81, 51, 71, 113, 69, 51, 115, 115, 120, 100, 120, 103, 120, 101, 65, 53, 89, 49, 55, 68, 115, 70, 110, 115, 117, 97, 104, 52, 66, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xca30e07973289c334ccdc105959240f5u128, 0x8e0c60ccc452f1d6440f0f8b2f9740b7u128).calculate_p2pkh_address(false).iter().zip([49, 81, 66, 88, 90, 51, 83, 105, 97, 100, 67, 74, 86, 105, 54, 114, 74, 104, 103, 53, 83, 71, 68, 56, 119, 99, 90, 87, 57, 80, 120, 71, 53, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3d430fc5cfb6f4d995b1d3d0416f52eau128, 0xf4926cb4b9a7b23841e9f6cbca977c01u128).calculate_p2pkh_address(false).iter().zip([49, 72, 105, 104, 90, 86, 70, 81, 110, 65, 86, 122, 99, 100, 97, 80, 106, 80, 54, 101, 66, 102, 104, 114, 51, 50, 57, 112, 49, 120, 114, 122, 80, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1e623173b4952a71ece396057503d931u128, 0xc87b24d6c0ee67b73422f45c9a6fdd8u128).calculate_p2pkh_address(false).iter().zip([49, 80, 121, 115, 101, 56, 98, 120, 97, 105, 90, 84, 75, 100, 81, 112, 49, 65, 122, 81, 113, 97, 54, 90, 102, 66, 83, 114, 54, 85, 88, 65, 106, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9dfa6109f4bc0cf7f53728f05a7d8defu128, 0x8d306405bdadfad9ee01f8f2af258336u128).calculate_p2pkh_address(false).iter().zip([49, 70, 102, 50, 113, 117, 53, 68, 57, 51, 51, 72, 97, 50, 115, 54, 56, 69, 107, 107, 106, 50, 69, 53, 69, 88, 68, 104, 103, 114, 103, 49, 52, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x79e1bf618e1e4152d35d054d78e23111u128, 0x9c3b648bd20996250b3a556aabbda967u128).calculate_p2pkh_address(false).iter().zip([49, 56, 99, 85, 101, 105, 103, 66, 71, 100, 83, 88, 106, 107, 102, 90, 85, 74, 57, 77, 70, 72, 56, 83, 69, 75, 89, 81, 119, 74, 103, 57, 89, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf3d5509aab6e28e939aff6bbc70ff846u128, 0xcb9bc857fd9349c4bd872e3f9e8c6d80u128).calculate_p2pkh_address(false).iter().zip([0, 49, 86, 110, 105, 52, 84, 113, 117, 71, 53, 120, 110, 121, 57, 97, 116, 111, 90, 68, 90, 53, 71, 77, 71, 110, 67, 105, 83, 52, 66, 83, 70, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3bdaebb56883bcd44305afb0cce2d0b4u128, 0xe9dd2e0b8da736232211778ed8d81bu128).calculate_p2pkh_address(false).iter().zip([49, 74, 67, 86, 56, 74, 122, 50, 89, 68, 109, 99, 90, 67, 66, 72, 100, 76, 111, 78, 51, 118, 120, 70, 71, 68, 85, 52, 89, 98, 87, 117, 67, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3a1086fed596d6b9e87853e2ef90b795u128, 0x66d1ac931357a06d1ee14ee6705c620cu128).calculate_p2pkh_address(false).iter().zip([49, 80, 84, 74, 113, 70, 104, 68, 116, 119, 109, 50, 68, 103, 121, 99, 78, 107, 55, 118, 97, 106, 57, 49, 122, 117, 55, 83, 76, 49, 110, 67, 53, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcdfb2714c220ccbd9f60cc0d3059c05fu128, 0x913208d7e03926b18ce366f546a395acu128).calculate_p2pkh_address(false).iter().zip([49, 56, 87, 103, 54, 100, 86, 98, 116, 87, 67, 68, 71, 121, 78, 71, 72, 122, 81, 53, 118, 101, 56, 100, 109, 103, 72, 120, 72, 88, 118, 75, 69, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6e8e489c5c675e981bbfc852b076b39fu128, 0x352b32249a8e8ee60966bd7af39264dbu128).calculate_p2pkh_address(false).iter().zip([49, 70, 116, 77, 118, 54, 82, 90, 72, 118, 78, 54, 87, 57, 56, 122, 121, 72, 82, 122, 121, 106, 65, 50, 78, 77, 72, 116, 85, 90, 55, 120, 97, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x42e769e01a8029715ab1a55ad8090cbau128, 0x7b04f81b328126f367fd9ac4ab5f33c0u128).calculate_p2pkh_address(false).iter().zip([49, 65, 105, 56, 66, 115, 115, 67, 87, 74, 105, 117, 101, 113, 65, 102, 70, 55, 106, 65, 52, 69, 65, 88, 110, 80, 82, 90, 107, 117, 66, 121, 84, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4559e88104a99f0505c0bf62a00a38a2u128, 0xb649d335eded330d093cffc93ca5e611u128).calculate_p2pkh_address(false).iter().zip([49, 76, 120, 87, 78, 115, 82, 86, 71, 90, 85, 109, 78, 72, 114, 118, 104, 97, 74, 80, 67, 120, 55, 103, 112, 103, 75, 121, 85, 71, 70, 103, 120, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd332ff7fd2ee88a08a634cd36268f11au128, 0xc74ea805208bd23b84b684e7752d1da3u128).calculate_p2pkh_address(false).iter().zip([49, 72, 103, 90, 78, 100, 107, 49, 102, 83, 90, 80, 77, 55, 50, 122, 83, 87, 114, 71, 109, 84, 75, 116, 114, 106, 80, 114, 119, 67, 113, 55, 106, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4fc5b65504d4d1c78f39f2fd2e418f8u128, 0x607d7a24bf89bf177f12ecafa0116878u128).calculate_p2pkh_address(false).iter().zip([49, 69, 112, 57, 75, 120, 90, 68, 119, 69, 88, 122, 84, 87, 85, 76, 109, 115, 97, 117, 112, 100, 53, 84, 52, 70, 88, 78, 110, 109, 68, 83, 49, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9d9c54154359e72537bfa3e9bad64f5cu128, 0xb3351b66a95fe4dbfbde60326ec6edeau128).calculate_p2pkh_address(false).iter().zip([49, 55, 106, 81, 56, 103, 78, 53, 72, 104, 114, 116, 69, 106, 109, 110, 57, 69, 51, 65, 120, 113, 105, 120, 69, 86, 86, 101, 89, 102, 121, 84, 110, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaa4ab9c0d11272b14fc90856f1e8fcf6u128, 0xed8b969577b2f4e474f975a6163f9dcau128).calculate_p2pkh_address(false).iter().zip([49, 51, 107, 57, 67, 65, 117, 55, 105, 65, 99, 51, 84, 57, 112, 114, 75, 99, 118, 119, 86, 110, 113, 97, 109, 90, 75, 67, 110, 54, 65, 106, 120, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc9bb0ca3dd316ffba0d97d71bd8adc34u128, 0x5473b85df5f10b0dbf0c0866be0f074fu128).calculate_p2pkh_address(false).iter().zip([49, 69, 70, 99, 78, 99, 118, 51, 82, 78, 106, 89, 98, 75, 49, 97, 50, 72, 71, 114, 98, 109, 89, 75, 83, 113, 102, 117, 65, 68, 120, 104, 100, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbab5b1b175f4b78e4234c9b8e5ab5a5u128, 0xfe8c68a191a07b835a947e74630122fau128).calculate_p2pkh_address(false).iter().zip([49, 54, 57, 101, 51, 98, 102, 53, 52, 117, 85, 114, 109, 71, 112, 51, 101, 84, 83, 51, 107, 57, 75, 50, 57, 115, 74, 120, 105, 90, 69, 103, 115, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3e3b3f9b00f9735b101355d664eb47ecu128, 0x10dedd95f050845016ca9376f38dc351u128).calculate_p2pkh_address(false).iter().zip([49, 50, 82, 72, 120, 99, 77, 81, 99, 120, 111, 53, 56, 78, 78, 111, 84, 71, 82, 54, 104, 85, 52, 72, 101, 83, 56, 113, 74, 78, 88, 70, 68, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1117df9e03ff05265fc6d9d2767adf2eu128, 0x489edcb58c59ac52a504c4806cea3c82u128).calculate_p2pkh_address(false).iter().zip([49, 72, 55, 49, 66, 89, 118, 101, 68, 76, 86, 118, 113, 121, 122, 118, 122, 115, 71, 77, 118, 80, 87, 80, 74, 84, 110, 115, 51, 72, 66, 97, 104, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x39f48d2dd5ec004deb8ab565d0710cf2u128, 0xaa82d7c29b41a368f6b20888eefcbf8au128).calculate_p2pkh_address(false).iter().zip([49, 80, 75, 88, 100, 77, 117, 74, 112, 120, 97, 113, 121, 113, 106, 105, 72, 107, 82, 82, 69, 118, 82, 86, 56, 104, 120, 107, 107, 52, 122, 88, 68, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x36cde8b5c2b6ae27552f23504cec7d4u128, 0x9ee0f810d56f715ad61debe73dd76d30u128).calculate_p2pkh_address(false).iter().zip([49, 66, 118, 54, 70, 114, 83, 121, 116, 77, 51, 112, 110, 84, 86, 76, 77, 71, 111, 112, 97, 110, 52, 102, 83, 97, 112, 68, 82, 52, 50, 114, 116, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x88453bdf68e66b53491ab98c6c1c7f2u128, 0x7621fbbaf4ed93195fe24d5beaa9e2c4u128).calculate_p2pkh_address(false).iter().zip([49, 52, 89, 69, 106, 57, 50, 49, 50, 69, 101, 69, 78, 110, 104, 67, 111, 56, 118, 97, 78, 112, 51, 56, 65, 72, 86, 76, 117, 105, 90, 53, 89, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xac8f87ace5d603587bf6b09d56c8e21eu128, 0x7dcea67abb9a569c3d709443b2681c4eu128).calculate_p2pkh_address(false).iter().zip([49, 50, 111, 70, 56, 85, 76, 69, 71, 75, 71, 72, 65, 90, 107, 120, 90, 111, 87, 49, 84, 100, 67, 99, 116, 118, 86, 65, 110, 49, 113, 76, 117, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcf6613e6d5fed0d0d548d6dc11339ad9u128, 0xc5da1ed7d29d0985338112a8613bf81du128).calculate_p2pkh_address(false).iter().zip([0, 49, 113, 86, 50, 106, 89, 100, 104, 89, 107, 71, 103, 112, 57, 107, 56, 102, 113, 103, 80, 98, 105, 49, 100, 72, 122, 51, 74, 71, 110, 97, 50, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x47d3d008276fb5f3c503aac1f050305bu128, 0x2e09f07711bb599a7ab0624b13d55ab2u128).calculate_p2pkh_address(false).iter().zip([49, 56, 99, 81, 113, 103, 103, 56, 98, 112, 83, 66, 74, 83, 97, 88, 66, 84, 114, 50, 72, 70, 81, 52, 86, 97, 84, 77, 101, 71, 87, 81, 83, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x238d2f65d7ee5b037781a9b091cb24bcu128, 0x481cb6255b44ebe7a69769e46c556f17u128).calculate_p2pkh_address(false).iter().zip([49, 57, 51, 65, 52, 109, 76, 66, 98, 103, 71, 82, 85, 55, 105, 107, 115, 120, 117, 51, 51, 101, 89, 98, 76, 99, 57, 72, 81, 85, 106, 122, 117, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb26c95014bdda4be45c7cc4a05674a82u128, 0x76e471930004dd754c8c8ef1d55e63d2u128).calculate_p2pkh_address(false).iter().zip([49, 66, 54, 82, 100, 66, 68, 103, 97, 107, 51, 83, 107, 55, 78, 112, 112, 113, 101, 70, 49, 106, 57, 53, 103, 75, 119, 51, 90, 69, 107, 120, 109, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x71fb18c7b6481fc21353a1031032cf8fu128, 0x38735d3cf65fb658be36e6cf26122de7u128).calculate_p2pkh_address(false).iter().zip([49, 53, 51, 100, 66, 109, 49, 90, 52, 117, 84, 119, 69, 77, 122, 66, 122, 119, 75, 89, 110, 111, 115, 82, 69, 86, 54, 119, 122, 70, 83, 113, 102, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2b9eba0913426eaa837a5fc70f55c00cu128, 0xb0dbc64348a7d5238cfde156c2b519a1u128).calculate_p2pkh_address(false).iter().zip([49, 51, 52, 69, 51, 87, 50, 89, 113, 98, 71, 85, 50, 56, 74, 82, 82, 109, 103, 77, 72, 83, 113, 102, 110, 57, 49, 70, 101, 85, 90, 71, 77, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1ef4bbc6a64ebaa4821d181643ba11c4u128, 0x7fbba0ea8eae44cd92bc9325ba3131dfu128).calculate_p2pkh_address(false).iter().zip([49, 55, 89, 99, 110, 78, 72, 102, 51, 98, 87, 90, 90, 76, 107, 69, 100, 55, 75, 78, 68, 115, 110, 83, 54, 70, 114, 115, 71, 66, 112, 71, 118, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc1e3f672d616622decf8fc994ebfa9aau128, 0xf031b97b6d71f716fdfbd7ce2422a43cu128).calculate_p2pkh_address(false).iter().zip([49, 81, 57, 57, 54, 89, 119, 65, 54, 104, 112, 65, 119, 76, 116, 113, 57, 56, 77, 105, 97, 115, 83, 82, 100, 74, 103, 114, 100, 49, 57, 78, 78, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7225528a98d0f61ba061232e72051565u128, 0x5fd8fd812b273ba1470f43f550aa7de0u128).calculate_p2pkh_address(false).iter().zip([49, 65, 82, 113, 90, 105, 86, 76, 121, 107, 119, 100, 89, 101, 116, 65, 113, 84, 122, 121, 57, 56, 50, 116, 114, 69, 117, 68, 87, 65, 76, 105, 101, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2f03fb0a577354c835e16cfa3fb07b82u128, 0xc8f56fea9803b49f0a4d760f379b063bu128).calculate_p2pkh_address(false).iter().zip([49, 56, 86, 87, 76, 82, 116, 119, 70, 57, 77, 69, 56, 81, 49, 113, 111, 85, 115, 67, 77, 120, 84, 122, 85, 78, 71, 65, 53, 50, 114, 65, 106, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x738555e7df86b291ee1304fe75dff67u128, 0x4c440f660c03055e096ddb468cb844b4u128).calculate_p2pkh_address(false).iter().zip([49, 72, 85, 51, 107, 99, 51, 49, 85, 51, 85, 103, 102, 98, 70, 121, 101, 98, 109, 65, 118, 117, 85, 105, 110, 74, 111, 71, 71, 67, 116, 114, 110, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3d11cac3a49ca8483bb4a74fd016fa9du128, 0x35b4e056937fe45ae8f2895b0d99a87fu128).calculate_p2pkh_address(false).iter().zip([49, 72, 70, 56, 88, 50, 122, 66, 113, 114, 71, 75, 71, 88, 51, 86, 101, 70, 74, 71, 116, 85, 89, 55, 105, 55, 97, 52, 109, 116, 82, 98, 87, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x209a742de01aab3cb23e6c83ed9dd232u128, 0x3df86cb0bf12ce0ddb19666f77a5cbcfu128).calculate_p2pkh_address(false).iter().zip([49, 70, 55, 52, 55, 112, 113, 81, 78, 115, 111, 88, 76, 56, 114, 105, 68, 112, 76, 71, 118, 118, 55, 65, 54, 106, 107, 51, 122, 83, 66, 122, 105, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd6d6da06b29a3dcb5d573e3218447989u128, 0x1780c8a259fb2d15b3aa534e11bc036fu128).calculate_p2pkh_address(false).iter().zip([49, 69, 53, 99, 114, 113, 115, 107, 65, 105, 106, 53, 83, 115, 111, 78, 54, 81, 122, 103, 107, 107, 83, 117, 81, 76, 97, 51, 71, 103, 78, 54, 107, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x86f161a04f0447ca100a6d3d4eade258u128, 0xdb222fa060089af2144a3cee9562d2deu128).calculate_p2pkh_address(false).iter().zip([49, 78, 111, 90, 100, 101, 51, 111, 122, 121, 87, 109, 121, 110, 116, 122, 77, 120, 115, 82, 105, 74, 110, 104, 82, 76, 86, 51, 65, 76, 49, 89, 118, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd9a862dcba9b0b48b4d3b63eefcd353fu128, 0x28dee69cb5012186c5881fe66bcc90f6u128).calculate_p2pkh_address(false).iter().zip([49, 74, 51, 76, 53, 122, 68, 74, 85, 121, 115, 54, 112, 112, 111, 49, 121, 66, 49, 101, 65, 55, 82, 56, 105, 68, 122, 101, 67, 53, 53, 117, 111, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x54bdbe23ef2ae8ddb98c0dc13b2bc15du128, 0xaf7d1123614ae016dc5db8cde2d39921u128).calculate_p2pkh_address(false).iter().zip([49, 78, 101, 105, 57, 71, 55, 53, 113, 102, 113, 121, 54, 114, 52, 76, 74, 57, 97, 111, 102, 70, 120, 50, 65, 104, 66, 98, 112, 110, 122, 117, 109, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc0c90a341b732e0260a8eb8503fc31c7u128, 0xbae8dc41f19848f2e7cc5e4cd8b2a3fdu128).calculate_p2pkh_address(false).iter().zip([49, 66, 54, 121, 104, 122, 74, 65, 57, 68, 105, 54, 49, 98, 56, 105, 115, 97, 100, 53, 70, 97, 83, 109, 85, 119, 51, 84, 85, 98, 80, 57, 105, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb3e5a9c5cecd245cb2bdbac1c1d0be0cu128, 0x203f797a2ea85f83723bd1c6dc977806u128).calculate_p2pkh_address(false).iter().zip([49, 57, 83, 65, 82, 86, 75, 54, 53, 49, 83, 121, 72, 85, 86, 74, 53, 88, 90, 65, 82, 80, 121, 85, 52, 50, 70, 100, 71, 85, 67, 57, 76, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x215d3744e35ba06a3b495d1966884cf5u128, 0x933c37861fe9d24e1d5841107232efa1u128).calculate_p2pkh_address(false).iter().zip([49, 68, 81, 57, 121, 90, 65, 53, 120, 78, 69, 69, 107, 88, 111, 115, 69, 90, 101, 75, 49, 71, 71, 83, 68, 82, 74, 82, 111, 67, 85, 69, 53, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7f93ca2db3d9839b8c919bb47b138abcu128, 0xb732fcd9f15d33c7b7178644197aa515u128).calculate_p2pkh_address(false).iter().zip([49, 76, 121, 76, 115, 52, 114, 67, 70, 109, 87, 67, 118, 103, 86, 65, 77, 81, 81, 110, 98, 83, 66, 70, 97, 57, 88, 56, 121, 117, 104, 102, 82, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe8b01ca58ebb1cbe75bc19480f3c8adu128, 0x4e4bab0fc762439d83329bcd7a0213cdu128).calculate_p2pkh_address(false).iter().zip([49, 53, 54, 117, 54, 67, 115, 102, 115, 90, 82, 57, 81, 76, 111, 53, 117, 50, 55, 78, 56, 69, 55, 78, 119, 98, 70, 85, 110, 116, 83, 49, 52, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3e0738c85b81818ec2b215f876872b3fu128, 0x22dcc9f7b02a49250af93295bceb475cu128).calculate_p2pkh_address(false).iter().zip([0, 49, 83, 115, 107, 111, 52, 75, 101, 86, 70, 122, 52, 115, 65, 103, 50, 70, 57, 105, 112, 114, 112, 55, 81, 90, 78, 109, 115, 104, 56, 68, 97, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x92a1877bc4ee052b4c181deb846ade85u128, 0xb5dd37cf8fda7b9aebd0d2223fae9a0cu128).calculate_p2pkh_address(false).iter().zip([49, 67, 109, 107, 104, 82, 74, 66, 78, 114, 116, 78, 68, 70, 116, 71, 56, 97, 119, 78, 51, 66, 70, 86, 84, 71, 83, 88, 80, 109, 120, 103, 71, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa4bf8cfd0c2357b54c0df226a3c8866du128, 0x4f50571ea0a7e9fed691524911dc4d8du128).calculate_p2pkh_address(false).iter().zip([49, 53, 56, 54, 90, 98, 112, 74, 98, 66, 88, 111, 83, 51, 49, 120, 54, 52, 66, 119, 97, 89, 78, 70, 76, 66, 85, 87, 50, 104, 109, 55, 85, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7a3a5aebc03171f843e79feb1c4b72acu128, 0x55a1c3991ed8ee8af8f2d5994b5abf65u128).calculate_p2pkh_address(false).iter().zip([49, 77, 100, 56, 54, 116, 52, 122, 53, 90, 54, 81, 66, 98, 67, 52, 122, 107, 97, 57, 116, 54, 52, 90, 119, 113, 65, 67, 113, 72, 101, 51, 76, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x59dc4fc5410af6832b040b3464ca955eu128, 0x1100a3b6ec8f1d9b99f3cee10a9a644u128).calculate_p2pkh_address(false).iter().zip([49, 53, 117, 50, 56, 50, 68, 120, 118, 97, 76, 107, 70, 72, 67, 75, 55, 103, 104, 109, 101, 100, 115, 100, 99, 116, 51, 89, 66, 110, 107, 112, 90, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x565e2d5cbb4af67617406a23bb9b76a5u128, 0xbec65f9da3cfe31e15323e219885ddbdu128).calculate_p2pkh_address(false).iter().zip([49, 80, 88, 97, 55, 77, 104, 110, 100, 76, 75, 122, 52, 86, 121, 54, 122, 54, 49, 100, 50, 54, 76, 71, 49, 100, 65, 57, 97, 105, 76, 72, 112, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbe44b350df409fa716095d4cedb16516u128, 0x6182d53c1eac27ab49679a4e311ca7a3u128).calculate_p2pkh_address(false).iter().zip([49, 51, 75, 87, 68, 106, 105, 120, 78, 105, 112, 97, 97, 56, 54, 53, 68, 80, 87, 112, 109, 53, 106, 68, 72, 116, 68, 105, 120, 68, 106, 78, 77, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x24879ba85e1e9d1b3ede8926b5b33b18u128, 0xe74c3bb13bb51120e83532690be66c26u128).calculate_p2pkh_address(false).iter().zip([49, 80, 100, 49, 104, 100, 103, 50, 80, 114, 57, 98, 86, 87, 106, 72, 68, 57, 70, 72, 120, 117, 71, 85, 75, 56, 87, 99, 86, 56, 84, 51, 87, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4d34ca9ac81d7f37e3c8336f5208df58u128, 0xcfb9c59b130d7d514ec8a431efa0f45eu128).calculate_p2pkh_address(false).iter().zip([49, 71, 55, 122, 51, 118, 110, 103, 85, 86, 111, 87, 122, 76, 101, 105, 97, 76, 121, 83, 71, 101, 119, 120, 100, 71, 81, 97, 115, 119, 111, 102, 120, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x99e34aa92fff0b78b8c891bda2e8aedau128, 0xd42df9325c5aa385036a8c4593b59d03u128).calculate_p2pkh_address(false).iter().zip([0, 49, 99, 80, 71, 117, 80, 103, 116, 104, 72, 52, 106, 80, 82, 98, 99, 80, 53, 107, 88, 86, 122, 114, 106, 118, 119, 111, 107, 114, 74, 78, 119, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x403983253d638d17d248268493957dc0u128, 0xdd11c54b68cbdf092616655336d8f241u128).calculate_p2pkh_address(false).iter().zip([49, 57, 102, 85, 52, 76, 122, 72, 84, 112, 106, 74, 89, 82, 81, 116, 110, 107, 104, 67, 113, 115, 122, 52, 112, 50, 109, 55, 100, 55, 103, 111, 70, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe182b51b63f4085feb09aea023fb71b2u128, 0x1978e4b4eb4818c911abfcd549cd6febu128).calculate_p2pkh_address(false).iter().zip([49, 65, 111, 101, 53, 51, 90, 88, 53, 68, 55, 70, 80, 88, 57, 116, 71, 70, 56, 117, 114, 113, 85, 100, 103, 121, 78, 105, 105, 115, 68, 89, 86, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x436e74b853abe220511e2a61808969c6u128, 0xd312a554dde2f4865f685b1d82b21c18u128).calculate_p2pkh_address(false).iter().zip([49, 70, 116, 65, 67, 53, 86, 52, 52, 104, 50, 116, 90, 86, 107, 110, 89, 102, 74, 67, 119, 99, 51, 120, 115, 70, 100, 105, 81, 51, 105, 67, 83, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb6810ddcc92f00ca868a9be5955d3153u128, 0xd4f66f7f63d99d4f9570bb1a997d3eceu128).calculate_p2pkh_address(false).iter().zip([0, 49, 115, 118, 89, 49, 116, 89, 103, 89, 115, 114, 117, 78, 88, 80, 70, 55, 65, 97, 89, 89, 52, 87, 118, 114, 115, 117, 118, 87, 69, 57, 103, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x17db4fa36d512a8e286b110ec18cd4afu128, 0xd366bc247b188c8284fbcdc3bc3cfd62u128).calculate_p2pkh_address(false).iter().zip([49, 55, 69, 107, 49, 65, 80, 65, 54, 85, 84, 75, 100, 51, 97, 83, 66, 78, 101, 66, 109, 56, 77, 113, 118, 106, 68, 89, 76, 104, 114, 103, 101, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7eb7eee2cb9c2e732412c51ab867fed4u128, 0x24c58601a28fd7fbeaa7e33a0e52fc4fu128).calculate_p2pkh_address(false).iter().zip([49, 78, 120, 82, 117, 113, 81, 104, 53, 78, 55, 89, 98, 114, 57, 115, 69, 100, 83, 111, 56, 115, 78, 71, 82, 121, 57, 99, 52, 50, 89, 90, 81, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xafb55a003fbab28e0b3a698e7fec0668u128, 0xc93776444a4865d602874c91fe28123u128).calculate_p2pkh_address(false).iter().zip([49, 51, 115, 53, 97, 82, 86, 97, 68, 120, 57, 51, 81, 113, 105, 121, 88, 109, 107, 89, 87, 65, 89, 80, 56, 109, 90, 65, 72, 85, 70, 78, 121, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x38ccfb0e078d923b4e0bd21fadfd0197u128, 0xa427efc45fac800beba98805fac2df65u128).calculate_p2pkh_address(false).iter().zip([49, 71, 110, 72, 50, 52, 85, 118, 51, 55, 118, 111, 109, 49, 90, 51, 111, 74, 112, 81, 118, 80, 52, 118, 84, 117, 89, 69, 69, 50, 72, 117, 69, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xee248df5cb588f687f92216759d6ba41u128, 0x6e6fd663aac2a4df663248dde03a5e03u128).calculate_p2pkh_address(false).iter().zip([0, 49, 122, 84, 70, 100, 51, 54, 120, 107, 57, 54, 72, 88, 104, 65, 103, 72, 86, 69, 67, 57, 119, 53, 119, 50, 76, 87, 120, 97, 120, 86, 100, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1c5b08bf8885ee158fb1c72ca37a6eefu128, 0xe566c0cbb88293b69c2fd00758cfc129u128).calculate_p2pkh_address(false).iter().zip([49, 76, 86, 98, 80, 86, 81, 88, 90, 85, 102, 65, 110, 80, 71, 77, 88, 102, 107, 77, 82, 53, 85, 104, 85, 116, 81, 113, 86, 112, 107, 71, 98, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c054fc4442c75e925e19aa97e6dc696u128, 0x7b86e11238495e44597ad42e8121396au128).calculate_p2pkh_address(false).iter().zip([49, 77, 116, 70, 120, 114, 54, 120, 87, 51, 103, 78, 102, 78, 116, 99, 72, 56, 121, 86, 69, 68, 122, 52, 68, 111, 104, 66, 66, 112, 54, 121, 120, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xab28c22ea382468247355ba7adfbb9aeu128, 0x7e1fa937224b7ecf8b58dba0bf3d84ceu128).calculate_p2pkh_address(false).iter().zip([49, 70, 66, 68, 89, 90, 115, 120, 71, 121, 69, 66, 75, 65, 70, 85, 105, 71, 103, 114, 102, 90, 68, 121, 112, 80, 77, 114, 87, 85, 121, 76, 101, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf81703998891cc450a8727d878b51920u128, 0xbeb3d58cae1a1a48dca038b5a4f50efau128).calculate_p2pkh_address(false).iter().zip([49, 72, 54, 81, 69, 51, 74, 81, 105, 119, 75, 110, 50, 109, 120, 118, 102, 118, 84, 49, 122, 113, 67, 75, 70, 117, 84, 56, 99, 71, 112, 74, 70, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb654838f1931c35941164a1555056183u128, 0x81f5e7cece0d14742e51626c834af006u128).calculate_p2pkh_address(false).iter().zip([49, 53, 71, 118, 98, 53, 55, 69, 117, 87, 57, 122, 85, 53, 117, 50, 116, 52, 56, 98, 76, 52, 71, 99, 89, 71, 119, 49, 83, 53, 80, 114, 103, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb145d6203bb62c48d47f0acaaa991ef8u128, 0x9fe2638a7a850b6dd6b71f0ce60eefebu128).calculate_p2pkh_address(false).iter().zip([49, 67, 119, 57, 56, 75, 56, 118, 111, 55, 89, 69, 77, 69, 56, 50, 49, 102, 84, 118, 118, 87, 116, 115, 117, 78, 86, 114, 81, 106, 71, 69, 50, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4278f21f5dbd30f5e73ca70ef0a9d33bu128, 0xe55551a30506d11c3ef8facb028f730u128).calculate_p2pkh_address(false).iter().zip([49, 75, 117, 116, 86, 104, 84, 103, 100, 66, 86, 70, 74, 53, 112, 90, 110, 103, 78, 120, 74, 82, 83, 116, 97, 114, 74, 120, 82, 70, 65, 112, 68, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x67b860f5e11ca503452fed8d5237b96du128, 0x38cbb2200ac7cff24250bf3f01ac13b5u128).calculate_p2pkh_address(false).iter().zip([49, 52, 77, 70, 121, 87, 121, 99, 78, 120, 55, 114, 54, 50, 116, 75, 102, 51, 101, 122, 102, 97, 98, 72, 87, 69, 54, 114, 77, 68, 53, 75, 53, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb3457543509fc709ecaff0312d077aa8u128, 0xc83f00b50a4501b04d81ff6e3797c8b7u128).calculate_p2pkh_address(false).iter().zip([49, 49, 53, 52, 109, 69, 112, 119, 119, 84, 119, 81, 53, 87, 99, 81, 114, 117, 101, 66, 83, 74, 57, 104, 105, 98, 75, 49, 68, 97, 84, 76, 121, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7d3ef6530d774f14da18b398a95244fbu128, 0x1b120cc6dca61c7ee34fade5c96a582u128).calculate_p2pkh_address(false).iter().zip([49, 55, 55, 76, 106, 86, 107, 80, 76, 116, 99, 70, 56, 120, 119, 76, 117, 70, 114, 118, 110, 52, 65, 52, 74, 77, 72, 66, 88, 55, 102, 86, 84, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb2aa99f847b7a2b3c58566b73124da08u128, 0xce7f069aaed9f4ad8cca64eb62f58c6eu128).calculate_p2pkh_address(false).iter().zip([49, 69, 77, 84, 85, 69, 55, 89, 56, 82, 83, 99, 76, 53, 104, 57, 65, 52, 106, 117, 89, 119, 100, 84, 80, 72, 71, 103, 82, 122, 107, 74, 106, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa7c4cb7094d7c529d3280fe9e2c493f8u128, 0x3d0e7a5cb0d730349ebc3efe8a51517au128).calculate_p2pkh_address(false).iter().zip([49, 76, 85, 53, 89, 107, 68, 116, 76, 98, 122, 83, 97, 74, 54, 101, 86, 85, 117, 88, 77, 119, 110, 99, 110, 70, 90, 116, 89, 115, 90, 121, 66, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcbc9632c71f907615c5b5f326db19b6fu128, 0xb44695678a9b7e57685b8688142eea2du128).calculate_p2pkh_address(false).iter().zip([49, 52, 83, 77, 89, 89, 107, 104, 53, 53, 71, 50, 77, 89, 87, 85, 81, 71, 56, 104, 117, 97, 89, 77, 105, 89, 97, 70, 51, 97, 85, 71, 88, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x472213f66a1d64c288589441e41b1a5du128, 0x70dcc8d1bde2ee333ed01ea1345a2d40u128).calculate_p2pkh_address(false).iter().zip([49, 77, 82, 98, 69, 103, 51, 89, 121, 50, 82, 121, 72, 52, 68, 85, 84, 116, 118, 114, 75, 86, 109, 122, 107, 98, 110, 102, 51, 98, 86, 119, 66, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4549b7c0585d3678f1a1d91faa7812e4u128, 0x9111a7893da6cf5a516708f06b7b317au128).calculate_p2pkh_address(false).iter().zip([49, 76, 103, 68, 112, 85, 80, 116, 116, 120, 67, 86, 87, 98, 53, 84, 116, 67, 113, 57, 107, 103, 76, 103, 66, 107, 109, 55, 74, 55, 51, 104, 65, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x51fb56f215cc1ed36fe3ed523936e8cdu128, 0xe9ae9abe74b4a450426c3fca78dbf806u128).calculate_p2pkh_address(false).iter().zip([49, 78, 53, 117, 121, 74, 97, 118, 50, 77, 71, 87, 82, 99, 99, 85, 88, 66, 57, 121, 111, 90, 74, 115, 114, 80, 118, 50, 88, 65, 116, 71, 98, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe8e258c1277415448d4085382003c7fau128, 0x9ef6d8dabf4b35be9a45ddf6d975d3aau128).calculate_p2pkh_address(false).iter().zip([49, 54, 76, 75, 54, 119, 81, 101, 89, 105, 49, 75, 120, 75, 101, 102, 81, 75, 77, 72, 113, 122, 77, 106, 106, 87, 86, 55, 67, 114, 103, 117, 52, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc90cf448887560a4d1b769d58912698au128, 0x57d470de4c2361032b5358dbe37529d7u128).calculate_p2pkh_address(false).iter().zip([49, 55, 106, 115, 103, 65, 65, 122, 90, 107, 89, 101, 120, 117, 103, 114, 105, 98, 55, 55, 76, 72, 105, 110, 89, 107, 81, 49, 77, 122, 121, 109, 77, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9f979513d41ba381e4b6556e9d3363bbu128, 0xec36f2289bf0db7a04eb0a1393c6fa43u128).calculate_p2pkh_address(false).iter().zip([49, 71, 82, 114, 116, 75, 52, 110, 82, 71, 70, 83, 78, 87, 104, 77, 86, 101, 120, 54, 115, 89, 85, 86, 105, 89, 104, 65, 70, 97, 103, 84, 105, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xda6aa13b6214e8eb3288f2aa65a2d646u128, 0x2920e579bea8e8f19b34a1e0a1290393u128).calculate_p2pkh_address(false).iter().zip([49, 75, 114, 72, 55, 72, 78, 117, 103, 114, 118, 55, 114, 106, 107, 104, 118, 50, 90, 65, 80, 99, 109, 112, 114, 110, 85, 83, 77, 71, 114, 98, 57, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4403ab4e328963bc1991f5d86d2f7f43u128, 0x73331b2ccb2012b0fc5c4304f367dfe0u128).calculate_p2pkh_address(false).iter().zip([49, 68, 67, 65, 55, 86, 50, 98, 55, 57, 88, 103, 55, 116, 89, 56, 90, 74, 68, 78, 87, 80, 112, 116, 119, 87, 55, 70, 103, 105, 88, 98, 72, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2f8743da54b8c34263dd885327cf659eu128, 0xee2b0413096a48e5f9187932ae569918u128).calculate_p2pkh_address(false).iter().zip([49, 65, 72, 89, 55, 102, 103, 49, 83, 69, 75, 87, 114, 67, 86, 119, 115, 70, 89, 70, 117, 105, 105, 68, 84, 90, 77, 89, 116, 122, 69, 70, 113, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xccb21b2aadebe02ef9505f6d61afb97au128, 0x1d03e5d901a777749c57b4bd93c8f8ccu128).calculate_p2pkh_address(false).iter().zip([49, 52, 85, 122, 72, 106, 102, 106, 104, 112, 80, 52, 77, 97, 120, 71, 88, 75, 74, 118, 65, 102, 99, 65, 82, 90, 103, 104, 90, 54, 112, 105, 74, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x587f9f0629049f19fbe13a5d61698595u128, 0xc80e513277d8af2e573986a6030017dau128).calculate_p2pkh_address(false).iter().zip([49, 77, 85, 109, 53, 101, 112, 107, 97, 106, 113, 116, 122, 107, 50, 115, 54, 81, 51, 84, 68, 49, 86, 89, 121, 74, 113, 78, 82, 121, 69, 115, 50, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x645ea4e7b5360b56e2a0212771299e50u128, 0x7670175ed3a4882f85e0891940b6147au128).calculate_p2pkh_address(false).iter().zip([49, 72, 120, 76, 68, 109, 50, 65, 49, 53, 75, 49, 102, 122, 57, 53, 65, 104, 100, 75, 53, 109, 107, 112, 109, 103, 116, 83, 55, 78, 50, 66, 114, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb6f98913fe4bb78208ba3ade5b4428beu128, 0x6b4b5d804d580e3b0d77d685e8060133u128).calculate_p2pkh_address(false).iter().zip([0, 49, 89, 65, 117, 53, 113, 115, 68, 115, 111, 66, 81, 107, 106, 103, 88, 99, 78, 50, 67, 71, 118, 56, 112, 67, 74, 56, 89, 99, 82, 55, 88, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5e7a729ba907d521685e95f9612c0eedu128, 0x39351cb1d1c7d84138736646bfcc908fu128).calculate_p2pkh_address(false).iter().zip([49, 78, 53, 101, 122, 109, 112, 98, 66, 83, 82, 87, 57, 102, 66, 70, 77, 81, 49, 50, 102, 90, 122, 51, 105, 69, 54, 71, 102, 90, 67, 115, 102, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xda7a67c815fdadbe41a5ec76cd9961fdu128, 0x357ed6af5d3e31677a3e9e586f5fe468u128).calculate_p2pkh_address(false).iter().zip([49, 77, 76, 90, 106, 114, 49, 65, 77, 90, 106, 89, 71, 72, 54, 116, 55, 57, 97, 69, 67, 57, 102, 118, 75, 67, 111, 119, 77, 76, 103, 110, 81, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2bcee9a474302cfe18b685816667df0eu128, 0xb33aba92d5b1dd6272a440daa3575353u128).calculate_p2pkh_address(false).iter().zip([49, 52, 84, 119, 55, 109, 114, 105, 89, 110, 50, 83, 100, 67, 81, 83, 111, 118, 99, 84, 102, 111, 65, 87, 99, 101, 75, 105, 106, 116, 118, 116, 103, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7b3c83167167b8c56b393e4a61570146u128, 0xa9111f4db94f5253646172542d1eb515u128).calculate_p2pkh_address(false).iter().zip([49, 77, 82, 86, 101, 107, 106, 118, 97, 85, 103, 105, 52, 72, 103, 53, 97, 50, 99, 80, 70, 54, 102, 81, 115, 74, 88, 103, 118, 117, 111, 107, 76, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbc7b2e97a8ebb97b3c17d7cf91b52312u128, 0x28ecc6e3761b36421a11c01a300a6ab2u128).calculate_p2pkh_address(false).iter().zip([0, 49, 98, 85, 70, 50, 102, 101, 52, 69, 51, 51, 110, 90, 112, 97, 69, 120, 86, 84, 70, 86, 109, 82, 100, 76, 114, 50, 66, 122, 90, 103, 74, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2574718cd5a4a74a4c67e225c2da360bu128, 0xf7f8559bef1a023a4c89306240c9203au128).calculate_p2pkh_address(false).iter().zip([49, 68, 65, 77, 52, 100, 118, 106, 76, 77, 49, 67, 69, 55, 115, 53, 53, 56, 52, 57, 78, 111, 53, 106, 101, 115, 112, 118, 85, 110, 115, 49, 50, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf54e26cbda379d5a99c102627dcfec13u128, 0xaef3b630dc9e4972f59e45a44688c732u128).calculate_p2pkh_address(false).iter().zip([49, 55, 116, 86, 101, 107, 66, 98, 114, 101, 86, 89, 50, 97, 111, 52, 118, 90, 87, 102, 88, 74, 89, 112, 52, 81, 110, 89, 80, 55, 115, 83, 97, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf1f3884002a3843bd3a9a3746e26e262u128, 0xf0d29ae2ac70767e318567a852ce1d71u128).calculate_p2pkh_address(false).iter().zip([49, 51, 82, 71, 53, 100, 89, 82, 102, 49, 56, 119, 104, 115, 111, 111, 81, 102, 57, 69, 100, 101, 76, 105, 80, 71, 121, 117, 84, 77, 117, 75, 74, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6111d7ab05d52cd23ce7a8c8607b7df0u128, 0xd501418074a035c41689a5471fd41a59u128).calculate_p2pkh_address(false).iter().zip([49, 68, 53, 106, 54, 101, 55, 117, 116, 121, 77, 98, 118, 89, 70, 74, 115, 117, 110, 113, 104, 83, 51, 82, 112, 110, 90, 114, 122, 69, 122, 76, 107, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd3683c766333d1939c87e73bb92aa58u128, 0x9a2b0bbc611c055ffba1c6e39d3f9c1fu128).calculate_p2pkh_address(false).iter().zip([49, 69, 56, 101, 86, 102, 102, 115, 67, 104, 115, 118, 116, 65, 100, 90, 65, 70, 90, 80, 99, 107, 119, 97, 49, 49, 82, 78, 113, 117, 102, 117, 118, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x37e96db3bf2c1fbf9ba2c4d6e2d89b88u128, 0xa3faff7a5a7a860856987d16117f059fu128).calculate_p2pkh_address(false).iter().zip([49, 66, 55, 78, 114, 81, 114, 112, 83, 54, 50, 122, 57, 51, 70, 57, 101, 88, 83, 55, 121, 98, 70, 89, 90, 82, 89, 67, 85, 52, 121, 99, 78, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x946c001ebadf33c8057b95b53bd1dfe0u128, 0x7f17b221bc022902ad04fb3701fa8109u128).calculate_p2pkh_address(false).iter().zip([49, 76, 89, 74, 100, 66, 102, 113, 77, 106, 52, 84, 115, 67, 98, 121, 52, 77, 103, 104, 120, 81, 55, 84, 122, 72, 86, 100, 117, 67, 97, 111, 90, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x36c9b43b541bbdfd22c401bea75636c5u128, 0xf8114879f5baa181ac05b4b298a451cdu128).calculate_p2pkh_address(false).iter().zip([49, 77, 103, 90, 84, 87, 106, 71, 75, 112, 71, 57, 89, 115, 83, 104, 52, 71, 49, 122, 106, 56, 115, 89, 101, 117, 57, 67, 107, 76, 83, 90, 86, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa3457cd32926585cf219feb2a158ff2fu128, 0xcd4df15a1bcce9308062a05d31d91e89u128).calculate_p2pkh_address(false).iter().zip([49, 76, 99, 89, 83, 116, 67, 89, 66, 86, 49, 78, 49, 69, 56, 54, 51, 119, 106, 78, 118, 89, 71, 51, 65, 53, 90, 113, 118, 82, 114, 102, 84, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x46f76e06b8b97b5cbf4d9846d7c1fe7au128, 0xed6b2551d7e4e9ed507d12f00b300386u128).calculate_p2pkh_address(false).iter().zip([49, 68, 57, 66, 107, 105, 86, 51, 90, 100, 121, 120, 86, 97, 85, 105, 83, 71, 81, 87, 66, 76, 80, 116, 84, 113, 70, 113, 113, 67, 55, 50, 55, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x12dd2723f51ab2f5ca5d2bbdab2369bfu128, 0x270ed9dd8df7467aa51da67fc12d9907u128).calculate_p2pkh_address(false).iter().zip([49, 78, 118, 89, 86, 72, 114, 84, 74, 100, 121, 83, 65, 116, 78, 51, 117, 97, 52, 101, 100, 75, 104, 85, 121, 50, 88, 52, 71, 77, 65, 109, 66, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9e36e49eac901c5734d1e4ba40cb821eu128, 0x28524155a67736907ebec2ef82064fa2u128).calculate_p2pkh_address(false).iter().zip([49, 76, 101, 98, 65, 72, 70, 97, 117, 111, 67, 99, 68, 72, 121, 119, 114, 69, 51, 72, 84, 102, 84, 99, 121, 82, 55, 67, 110, 76, 118, 120, 120, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x781f36540f3d14aed266a9bf67db7be6u128, 0x38cea016e9a0d7316ad350e87a3815f5u128).calculate_p2pkh_address(false).iter().zip([49, 76, 56, 100, 74, 111, 86, 104, 122, 85, 69, 118, 56, 88, 101, 57, 83, 57, 76, 97, 80, 82, 99, 81, 67, 77, 121, 50, 82, 115, 117, 121, 83, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeabcb1304160d9f38e77af6c62f71c80u128, 0x72990513ff09177ce30ec5c67007e7bau128).calculate_p2pkh_address(false).iter().zip([49, 66, 111, 71, 71, 86, 74, 89, 113, 69, 74, 70, 69, 110, 98, 81, 71, 83, 72, 120, 113, 115, 84, 115, 68, 72, 116, 104, 98, 112, 105, 88, 105, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x90e76a103e84ed4bc52a0296ce24a99du128, 0xe04cd4eb7ef6e0f6166fd9b63b120c37u128).calculate_p2pkh_address(false).iter().zip([49, 78, 83, 109, 65, 77, 55, 112, 49, 114, 88, 110, 81, 107, 54, 117, 104, 52, 111, 120, 67, 122, 101, 57, 118, 54, 65, 50, 116, 82, 114, 69, 109, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x889ce4d442e0c431ac4be6576673c2f4u128, 0x5d4fea56d5010860d1b9ba584ab4d05bu128).calculate_p2pkh_address(false).iter().zip([49, 75, 70, 55, 120, 57, 50, 88, 83, 101, 54, 98, 80, 50, 110, 54, 105, 85, 121, 99, 122, 74, 90, 113, 85, 52, 109, 110, 98, 55, 111, 111, 71, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4b506c36d20700b1c611f93488b6b672u128, 0x818bc4e35d7d431b5dd7175df9b80eaau128).calculate_p2pkh_address(false).iter().zip([49, 78, 106, 101, 122, 86, 104, 50, 111, 117, 56, 116, 85, 66, 100, 90, 90, 80, 76, 101, 89, 119, 121, 54, 111, 75, 82, 89, 86, 118, 87, 74, 84, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc784b77a09e2a69bcf80ffa61fdc47b5u128, 0x98ea864f3dde828b42a5d48c7600c3fbu128).calculate_p2pkh_address(false).iter().zip([49, 71, 71, 74, 71, 50, 80, 85, 116, 49, 121, 74, 51, 52, 109, 68, 112, 52, 100, 120, 122, 112, 120, 121, 101, 49, 103, 103, 78, 112, 102, 98, 82, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc8191deba6ac08f7dc837882769e7bd5u128, 0x2cbf3848a996d04c4c985c9cf7256e61u128).calculate_p2pkh_address(false).iter().zip([49, 78, 86, 67, 55, 105, 112, 107, 75, 70, 104, 71, 74, 114, 74, 70, 87, 53, 67, 67, 83, 84, 77, 102, 120, 75, 98, 56, 110, 118, 103, 68, 113, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x91d79f27cab6eb2d4de4c0db7eb8b43cu128, 0x985374afe7aa92b93400eb5051abd21cu128).calculate_p2pkh_address(false).iter().zip([49, 56, 72, 102, 111, 117, 117, 74, 102, 89, 118, 86, 82, 104, 101, 75, 121, 122, 80, 106, 67, 77, 72, 90, 88, 76, 71, 80, 107, 51, 57, 81, 114, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf82b12ce36f41ecbb885437525fbc349u128, 0x810a93617336b53679647d3c6d55cedbu128).calculate_p2pkh_address(false).iter().zip([49, 56, 72, 119, 87, 120, 120, 56, 84, 65, 116, 49, 57, 111, 71, 75, 97, 78, 67, 98, 72, 56, 117, 115, 72, 70, 121, 57, 49, 66, 110, 121, 103, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1052c6cda45ef1474587939929632f3cu128, 0x2f467c555c2e2fc6af7380686161362u128).calculate_p2pkh_address(false).iter().zip([49, 52, 89, 66, 56, 101, 97, 71, 50, 69, 101, 84, 66, 105, 65, 67, 90, 82, 112, 102, 67, 97, 119, 110, 107, 117, 105, 77, 80, 112, 104, 101, 87, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb91222314a903b776bfd9c0925e5d57u128, 0x2ad346c48848ead5c4287a33df47487au128).calculate_p2pkh_address(false).iter().zip([49, 57, 110, 56, 101, 86, 87, 75, 113, 68, 69, 51, 56, 74, 88, 51, 88, 72, 100, 72, 68, 57, 98, 88, 54, 101, 57, 106, 117, 88, 85, 97, 71, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x39a5d79ec01abe79e016a093e3766090u128, 0xf8a10081844e354a36354f9e7bb68d4bu128).calculate_p2pkh_address(false).iter().zip([49, 77, 115, 57, 54, 80, 86, 74, 118, 82, 121, 68, 113, 54, 100, 77, 88, 75, 103, 52, 117, 90, 53, 65, 54, 110, 70, 77, 68, 86, 90, 100, 89, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb3b6bbe9263e88a86aae3bfde9096822u128, 0x93918067c17745eb57c43d8c5566f95au128).calculate_p2pkh_address(false).iter().zip([49, 65, 89, 80, 106, 57, 88, 104, 113, 117, 49, 77, 104, 115, 54, 107, 81, 109, 71, 49, 88, 65, 111, 109, 81, 105, 52, 103, 121, 68, 121, 71, 57, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9922c1bae75d818b9e1cfb9e28e77a26u128, 0x94c1d494c563cca3ae0c0498fbcf2506u128).calculate_p2pkh_address(false).iter().zip([49, 75, 101, 99, 71, 102, 109, 86, 50, 51, 86, 70, 105, 80, 102, 105, 115, 55, 51, 90, 69, 80, 114, 85, 90, 87, 118, 51, 120, 104, 105, 54, 117, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x30cd62c63d4880ffae072c3e7f3f8ccbu128, 0xdb3b5ea07e65244d163702fec520f22du128).calculate_p2pkh_address(false).iter().zip([49, 75, 109, 66, 99, 74, 104, 86, 88, 70, 119, 75, 102, 51, 85, 99, 77, 72, 109, 55, 78, 120, 77, 100, 55, 75, 78, 70, 50, 112, 119, 49, 121, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8e13894822295d66c67d40aa2c4e212cu128, 0xabedbc43d6967172d45799eb411a0902u128).calculate_p2pkh_address(false).iter().zip([49, 68, 81, 66, 82, 81, 97, 77, 65, 104, 76, 122, 80, 116, 70, 120, 51, 99, 70, 70, 104, 107, 118, 89, 82, 120, 101, 109, 107, 75, 122, 112, 102, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa2cc3d3df0fc6af76bb3b1274b55763fu128, 0xdde06cf6bcbacb4eb3a031b7e23b5091u128).calculate_p2pkh_address(false).iter().zip([49, 77, 106, 67, 89, 82, 83, 102, 89, 107, 52, 78, 104, 86, 82, 71, 106, 56, 114, 99, 49, 109, 67, 110, 116, 102, 105, 104, 120, 97, 97, 115, 105, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf4d0436051e70cdc1bf2b3e83126bff5u128, 0xfe62d307843b2dca18d2a121d457508bu128).calculate_p2pkh_address(false).iter().zip([49, 71, 80, 121, 89, 68, 72, 83, 77, 87, 89, 57, 85, 52, 52, 68, 110, 90, 117, 83, 56, 104, 52, 119, 115, 112, 119, 111, 88, 105, 56, 50, 53, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa04dcbe12dc6de8769dce00b143d225du128, 0x8f6d7896cf8e3a9ea1b1369011b8cacau128).calculate_p2pkh_address(false).iter().zip([49, 77, 103, 50, 102, 82, 75, 122, 110, 53, 50, 81, 51, 49, 119, 105, 98, 49, 101, 65, 70, 116, 89, 106, 99, 88, 83, 102, 87, 116, 89, 118, 68, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa94e870a4e02a97b420230df81940389u128, 0xac1ce1f45537564927f8b4f3d04b9f1eu128).calculate_p2pkh_address(false).iter().zip([49, 71, 110, 114, 118, 115, 99, 86, 65, 88, 71, 66, 112, 121, 56, 80, 69, 51, 52, 50, 82, 77, 72, 89, 90, 68, 112, 51, 103, 87, 110, 77, 110, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1ad71ac73c34b72b47096ffad3069170u128, 0x77f1f99aadcedc63084cb708b08802d7u128).calculate_p2pkh_address(false).iter().zip([49, 66, 89, 120, 68, 67, 51, 120, 69, 105, 89, 116, 53, 69, 106, 51, 105, 88, 67, 80, 81, 71, 80, 117, 100, 52, 69, 83, 115, 53, 113, 113, 85, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe4d8c5f8d37f86c2ecb0b3f68461998u128, 0x1178997f64537dc18a47bab217ca1105u128).calculate_p2pkh_address(false).iter().zip([49, 72, 110, 84, 122, 117, 118, 121, 65, 118, 110, 99, 101, 120, 107, 74, 122, 122, 113, 119, 99, 99, 68, 78, 114, 102, 80, 110, 121, 67, 110, 113, 76, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x69d5e9ce2a37f9497c42a5a0ee637609u128, 0x53ebf3794700976e3b722ea85779c362u128).calculate_p2pkh_address(false).iter().zip([49, 67, 53, 69, 82, 122, 57, 120, 57, 88, 84, 83, 101, 71, 115, 89, 66, 109, 69, 116, 104, 70, 114, 52, 122, 114, 107, 120, 109, 110, 120, 85, 117, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x71c9093978d2a14d4f2aef6bcc793eecu128, 0x8f0e3e2c015d9f8e6b92f3e05fdddefu128).calculate_p2pkh_address(false).iter().zip([49, 72, 113, 104, 118, 71, 80, 67, 57, 110, 71, 106, 86, 107, 115, 89, 84, 121, 107, 68, 78, 118, 113, 104, 99, 118, 83, 76, 85, 103, 119, 72, 76, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xddd94578bd17012e3743ddc2d5a9f5a1u128, 0xf09b3fb43fa7a553f3fb4c4cd777f29au128).calculate_p2pkh_address(false).iter().zip([0, 49, 57, 49, 101, 66, 65, 71, 52, 107, 99, 56, 83, 122, 104, 49, 83, 104, 52, 55, 80, 107, 98, 78, 103, 84, 52, 114, 77, 111, 55, 56, 53, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x79f2f7cdb22490aab965a687605a00feu128, 0xf8f3b10f1a7d98c1b350f501f763bc63u128).calculate_p2pkh_address(false).iter().zip([49, 55, 103, 85, 104, 74, 50, 118, 121, 90, 52, 72, 71, 54, 107, 116, 110, 110, 56, 88, 121, 122, 117, 82, 101, 53, 66, 102, 71, 103, 115, 122, 117, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8a7c6e6ddafd92bd8ab7b74d64e34fc2u128, 0xf8ec52a549896057eb38e1e1aea99fd4u128).calculate_p2pkh_address(false).iter().zip([49, 70, 80, 111, 112, 72, 105, 117, 97, 107, 54, 78, 120, 53, 100, 109, 51, 116, 107, 49, 119, 80, 120, 117, 72, 117, 72, 109, 112, 122, 106, 113, 97, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1e2da6fd74656c2552fd2b6301520fa5u128, 0x73609e5d4f2179a95deaad0470c021ccu128).calculate_p2pkh_address(false).iter().zip([0, 49, 120, 117, 115, 116, 80, 115, 118, 120, 69, 88, 110, 78, 103, 114, 112, 86, 56, 97, 74, 115, 74, 77, 86, 111, 75, 109, 114, 98, 88, 98, 110, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2d4be14a9cb183f8ff2acc3f76089404u128, 0xd75fe35e39bc34fdbbac05e7c41eef2au128).calculate_p2pkh_address(false).iter().zip([49, 78, 75, 120, 66, 118, 85, 65, 122, 118, 106, 117, 97, 75, 110, 55, 97, 115, 118, 84, 118, 71, 122, 105, 121, 109, 66, 98, 71, 107, 109, 98, 102, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5c5f96156cd48fbe063eb03161b0898au128, 0x913781bddcbe22dda742656487b5e268u128).calculate_p2pkh_address(false).iter().zip([49, 68, 68, 115, 67, 107, 85, 66, 97, 56, 110, 97, 111, 86, 52, 53, 55, 119, 74, 106, 51, 80, 104, 120, 117, 52, 105, 115, 113, 70, 106, 103, 97, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3ddbbe4fd8b99ff52922196e35d519d2u128, 0xe342ac0c0a80d00170c58db81e9d6068u128).calculate_p2pkh_address(false).iter().zip([49, 52, 86, 49, 99, 52, 112, 115, 53, 82, 76, 98, 103, 89, 78, 98, 71, 88, 72, 105, 70, 106, 111, 89, 116, 116, 77, 75, 89, 115, 110, 75, 121, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5cd14eb82e6aaab166f00fd6afd01304u128, 0xf281d23976a3d81966e285b76a305410u128).calculate_p2pkh_address(false).iter().zip([49, 55, 109, 113, 76, 56, 83, 121, 51, 86, 67, 74, 67, 56, 121, 101, 84, 120, 116, 53, 119, 120, 110, 66, 121, 80, 55, 55, 107, 84, 52, 50, 66, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfdd55bc9f26839ad5f959058d5478590u128, 0x602060c5dc4d5bc04f97d1d6a5ba17c3u128).calculate_p2pkh_address(false).iter().zip([49, 57, 118, 49, 54, 80, 111, 54, 98, 51, 77, 116, 118, 121, 52, 89, 81, 54, 87, 83, 52, 84, 80, 57, 49, 77, 74, 107, 113, 117, 80, 55, 50, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xed784f8e8a18d837a9bfbff803d41a4u128, 0x9f5b819095daa9b2785ecc9ee48c3124u128).calculate_p2pkh_address(false).iter().zip([49, 76, 97, 104, 119, 90, 65, 76, 82, 116, 114, 65, 107, 118, 67, 110, 70, 68, 53, 110, 56, 51, 85, 53, 87, 102, 71, 49, 118, 99, 57, 113, 57, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x869a3d90dd8042399ef23b83562c90f9u128, 0x43691868f1a2f546b8ef21663e824a47u128).calculate_p2pkh_address(false).iter().zip([49, 76, 51, 56, 120, 89, 54, 57, 69, 118, 50, 104, 56, 67, 67, 115, 88, 82, 54, 84, 77, 81, 81, 82, 72, 78, 85, 105, 69, 100, 68, 89, 122, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa5fd93b5b2dcb19809489752894fd32au128, 0x829ae988fcf3ddd143320adb6a2defafu128).calculate_p2pkh_address(false).iter().zip([49, 53, 71, 121, 77, 68, 106, 72, 53, 107, 122, 51, 81, 65, 80, 75, 84, 114, 122, 113, 54, 69, 121, 119, 82, 102, 87, 54, 104, 99, 107, 83, 70, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd05f4be05639178f6ed76df6f90f15c7u128, 0x89dfaf76f0557137a65898f4517a6f8du128).calculate_p2pkh_address(false).iter().zip([0, 49, 110, 104, 110, 56, 81, 110, 110, 113, 115, 53, 77, 111, 90, 50, 117, 107, 86, 50, 50, 68, 88, 53, 57, 117, 119, 121, 50, 88, 110, 78, 120, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe0ef0a3516632f926946172528a8406du128, 0x1a7fc910e02736dc2054950d9c5e6b78u128).calculate_p2pkh_address(false).iter().zip([49, 80, 119, 85, 65, 97, 67, 80, 110, 82, 84, 77, 69, 66, 67, 112, 67, 83, 74, 103, 88, 116, 89, 84, 74, 102, 67, 97, 103, 71, 77, 87, 111, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x97e26f5ab6f9d655f22107f9f685756u128, 0x79935640e82ed88bbc3d4b71a36f3de4u128).calculate_p2pkh_address(false).iter().zip([49, 78, 50, 52, 68, 113, 110, 102, 100, 74, 84, 87, 100, 49, 77, 109, 122, 121, 52, 106, 81, 57, 116, 69, 112, 55, 112, 69, 72, 55, 80, 113, 71, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4ac939cbbced421f446457c374b7b35fu128, 0x6ccbd73c00a85abd80cae8946f26c213u128).calculate_p2pkh_address(false).iter().zip([49, 80, 56, 99, 89, 70, 102, 57, 90, 49, 52, 114, 54, 115, 98, 51, 104, 117, 67, 49, 97, 88, 118, 57, 82, 72, 100, 54, 99, 98, 99, 121, 81, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3bfca8cb338abc50070d6c67df54d502u128, 0xc3675375401f2200f9fe9eaf2f78db11u128).calculate_p2pkh_address(false).iter().zip([49, 68, 65, 112, 88, 115, 51, 110, 80, 110, 51, 87, 114, 77, 116, 83, 57, 56, 107, 82, 97, 56, 97, 97, 107, 122, 99, 67, 76, 76, 67, 72, 52, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2cd3d20d917271b1ad56f4aa3b07abb3u128, 0x7ab59690d87aded49217f460c7316fb8u128).calculate_p2pkh_address(false).iter().zip([49, 67, 77, 78, 53, 105, 82, 74, 51, 97, 67, 68, 119, 65, 82, 114, 69, 53, 74, 83, 55, 71, 74, 76, 65, 103, 69, 50, 69, 52, 85, 117, 67, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdf0012ed12a934899c57d62af46bf58au128, 0x1aa16b3ddea90ad1b043d764d17ef753u128).calculate_p2pkh_address(false).iter().zip([49, 68, 72, 51, 85, 49, 83, 122, 84, 77, 66, 117, 81, 102, 75, 98, 111, 52, 119, 103, 105, 90, 78, 52, 109, 104, 106, 105, 53, 104, 66, 98, 51, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5fcc6d5fb8b6a5958828c6caa969f2e0u128, 0xb729d43a36b903cf8b7244a16e2b3efbu128).calculate_p2pkh_address(false).iter().zip([49, 80, 113, 70, 122, 107, 81, 106, 85, 50, 83, 78, 54, 67, 104, 56, 71, 101, 71, 77, 49, 84, 70, 118, 53, 83, 78, 117, 107, 113, 54, 57, 50, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8dfc4c756457a65c091ca50a7bc104a0u128, 0x6c614d902e64cc4c4d7b76a8f4948d30u128).calculate_p2pkh_address(false).iter().zip([49, 80, 72, 78, 121, 86, 71, 56, 114, 52, 113, 105, 83, 122, 67, 86, 51, 99, 90, 83, 89, 65, 85, 119, 77, 102, 90, 117, 65, 113, 76, 86, 84, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4167639201d3e2c2070d8128a9ea864du128, 0xa972c1ebb862c0543b610614eaf53393u128).calculate_p2pkh_address(false).iter().zip([49, 77, 67, 77, 70, 50, 72, 72, 81, 113, 69, 110, 102, 77, 84, 57, 66, 110, 70, 119, 106, 107, 65, 110, 115, 74, 51, 66, 118, 112, 77, 54, 109, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1c46cb19ff08c0c635c7244b23776370u128, 0x2b7f34d6ee0dcfd1a5894acebab2e350u128).calculate_p2pkh_address(false).iter().zip([49, 51, 104, 86, 106, 118, 55, 105, 80, 115, 52, 56, 68, 103, 115, 55, 120, 52, 51, 84, 65, 80, 69, 70, 97, 103, 86, 67, 72, 51, 119, 119, 118, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x75e3ee76f29d2b3b25037742484e020cu128, 0x1c7c999bec8199695baaa46d21b1cc96u128).calculate_p2pkh_address(false).iter().zip([49, 54, 49, 81, 113, 83, 54, 116, 50, 120, 99, 117, 113, 75, 55, 83, 97, 75, 86, 105, 111, 50, 56, 110, 53, 80, 88, 103, 83, 116, 82, 51, 75, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf19fb04d95adcd9208cb7b401a15dd75u128, 0xd9c628a0ce61cd32b91384da697757c8u128).calculate_p2pkh_address(false).iter().zip([49, 77, 53, 116, 51, 121, 68, 71, 82, 119, 86, 82, 120, 122, 71, 55, 71, 119, 74, 52, 82, 65, 121, 83, 87, 109, 75, 87, 109, 113, 66, 70, 69, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa40000d8ff88550a9c24ea2b7c65dd08u128, 0xd6b821e4ef56b7010d9c22d16a18e2aau128).calculate_p2pkh_address(false).iter().zip([49, 78, 86, 99, 83, 86, 87, 81, 89, 75, 117, 98, 65, 78, 84, 103, 55, 65, 112, 121, 118, 84, 74, 88, 118, 101, 119, 110, 120, 72, 111, 84, 115, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd1b34a52cbf6cea954313679543d6f1u128, 0xb8f57e886f1fd1215052eecb81749671u128).calculate_p2pkh_address(false).iter().zip([49, 72, 76, 112, 71, 52, 109, 115, 67, 54, 68, 68, 70, 117, 65, 110, 102, 118, 103, 86, 117, 80, 77, 57, 57, 88, 71, 67, 72, 90, 74, 72, 106, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb1143cfb17aa1c419289c753c9a6ba84u128, 0x7d3258a1bcd20fb5eb115d36eb9cd16du128).calculate_p2pkh_address(false).iter().zip([49, 51, 109, 110, 76, 86, 115, 56, 70, 49, 87, 97, 52, 68, 98, 52, 102, 74, 110, 120, 54, 115, 54, 111, 69, 118, 74, 68, 109, 51, 101, 109, 122, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf0136a5ff8eaab249536f7a2f88e8c4du128, 0xbb1dbde7346b42043b9cfd12d9424236u128).calculate_p2pkh_address(false).iter().zip([49, 67, 51, 105, 121, 121, 98, 76, 119, 117, 89, 111, 119, 121, 78, 54, 80, 85, 104, 117, 75, 80, 70, 52, 55, 81, 120, 65, 53, 56, 109, 78, 84, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfe7733909a7a981fe4b96df3d5c9ea46u128, 0x750f23439d615884b533c92d3b3be641u128).calculate_p2pkh_address(false).iter().zip([49, 51, 89, 90, 82, 109, 74, 76, 49, 69, 97, 56, 109, 110, 110, 83, 99, 71, 112, 99, 49, 104, 101, 88, 83, 50, 110, 112, 85, 113, 119, 75, 116, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x71fcd759cdce89342cfa18bc10d97554u128, 0xd41c7a27d04cc67a6a8364a7ec594c57u128).calculate_p2pkh_address(false).iter().zip([49, 57, 70, 114, 102, 74, 115, 77, 52, 100, 70, 110, 99, 104, 101, 74, 90, 56, 76, 55, 119, 117, 87, 120, 66, 109, 67, 65, 57, 69, 80, 86, 74, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x62679a27a915b12e54a5580e04b0fac5u128, 0x18c789c9b3c24ebb3e69a7a480407a70u128).calculate_p2pkh_address(false).iter().zip([49, 76, 115, 107, 104, 101, 117, 117, 75, 74, 85, 112, 98, 53, 68, 103, 109, 90, 53, 78, 50, 84, 90, 55, 70, 80, 106, 71, 117, 84, 88, 119, 77, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbb9bc4ff91527a0048d95a92c95bf808u128, 0x6ce59f2b2d01a4f36627402a5064557fu128).calculate_p2pkh_address(false).iter().zip([49, 77, 71, 100, 122, 77, 107, 101, 113, 118, 120, 74, 56, 107, 69, 70, 68, 111, 51, 70, 115, 100, 51, 97, 53, 102, 68, 57, 72, 90, 69, 120, 65, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x57cdfb4443a7434a3fc8da7f2ee2cd3u128, 0xa4418b14ac5e34039e7088cf51994647u128).calculate_p2pkh_address(false).iter().zip([49, 65, 98, 69, 111, 111, 80, 83, 71, 66, 117, 111, 100, 117, 85, 107, 72, 119, 75, 116, 102, 57, 117, 71, 109, 112, 122, 100, 70, 89, 98, 84, 83, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x60ccee368454c04cb22ee086318bc3b0u128, 0x66af9723d4b06c1902cddecc68a11a8u128).calculate_p2pkh_address(false).iter().zip([49, 53, 99, 111, 90, 122, 106, 70, 55, 104, 115, 83, 117, 71, 66, 111, 66, 78, 65, 112, 104, 76, 86, 55, 85, 90, 84, 84, 104, 110, 65, 50, 104, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8b8a9e421eaf1e8398730129df4e3392u128, 0x53c09fe131065dd06738dff6c27f9a80u128).calculate_p2pkh_address(false).iter().zip([49, 51, 51, 81, 76, 68, 116, 89, 109, 54, 121, 51, 52, 57, 74, 76, 88, 113, 87, 51, 51, 99, 69, 49, 97, 122, 107, 51, 50, 89, 68, 118, 65, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3b86bc9e08c274a2f2ce90689e74c5d6u128, 0xe7dcf4e47f3764218c4a208658cf9eb5u128).calculate_p2pkh_address(false).iter().zip([49, 65, 77, 69, 105, 53, 90, 56, 89, 102, 114, 86, 121, 103, 117, 85, 83, 89, 87, 74, 51, 69, 75, 65, 83, 49, 120, 69, 87, 74, 56, 54, 54, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xce45e025dee7c23d4b74ece05f352e7au128, 0x39f4f1e0c1ed35f09635daa28172074cu128).calculate_p2pkh_address(false).iter().zip([49, 69, 78, 120, 119, 52, 105, 112, 86, 97, 66, 50, 103, 105, 86, 90, 113, 82, 71, 65, 101, 77, 116, 85, 83, 87, 90, 66, 103, 121, 87, 107, 98, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7f38d843e1eaf57fd5e3259c55ae5c4u128, 0x1f32efa616794662cebe9f109a499660u128).calculate_p2pkh_address(false).iter().zip([49, 65, 105, 80, 115, 75, 99, 121, 85, 76, 53, 101, 69, 76, 88, 88, 51, 69, 68, 111, 75, 52, 51, 80, 49, 53, 49, 52, 51, 50, 82, 53, 105, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x67b176753690c0e14a08415f8367c751u128, 0xb054eaf390aa6632d1b461fab9e620bfu128).calculate_p2pkh_address(false).iter().zip([49, 55, 83, 65, 53, 56, 101, 116, 120, 119, 81, 50, 56, 104, 102, 104, 106, 84, 50, 70, 116, 71, 86, 113, 89, 71, 74, 97, 85, 78, 110, 70, 118, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5539f4db75d85f924673abf0f76aeab3u128, 0x2f904d37a0f2bd7ba2e90b959b63577eu128).calculate_p2pkh_address(false).iter().zip([49, 56, 90, 116, 101, 111, 55, 82, 120, 99, 100, 88, 118, 66, 88, 114, 98, 111, 67, 76, 88, 82, 78, 81, 109, 82, 82, 110, 110, 115, 103, 105, 110, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xef533cde1d7ddd1d0ce2b40db1956d98u128, 0x24e67caa3b8d03cda87d0425a057344u128).calculate_p2pkh_address(false).iter().zip([49, 66, 107, 100, 88, 88, 104, 110, 88, 81, 51, 102, 70, 107, 99, 110, 105, 55, 120, 99, 68, 103, 57, 116, 57, 70, 52, 83, 49, 80, 105, 88, 107, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbfeaa23b176ec9791b485e0e2c0722u128, 0x3f38c1a62487e31495516ea06902d694u128).calculate_p2pkh_address(false).iter().zip([49, 70, 122, 85, 109, 122, 66, 117, 72, 117, 90, 90, 104, 116, 111, 110, 85, 113, 54, 97, 71, 107, 57, 67, 116, 120, 121, 70, 80, 87, 57, 54, 109, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8dbd2c354f45635a61eb178facf9a058u128, 0x48eebf1882037ea553a7a93d5b80e8bfu128).calculate_p2pkh_address(false).iter().zip([49, 68, 117, 50, 115, 120, 102, 75, 84, 74, 118, 122, 71, 116, 54, 86, 120, 51, 66, 118, 66, 49, 70, 56, 71, 103, 103, 87, 76, 83, 74, 99, 115, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcf12638cdeac5650d782c16e9de8fcacu128, 0xc72e1078b475608f47870af4830b56f5u128).calculate_p2pkh_address(false).iter().zip([49, 72, 112, 118, 71, 113, 97, 98, 90, 76, 65, 105, 53, 74, 83, 72, 77, 55, 113, 57, 109, 57, 100, 106, 71, 52, 106, 118, 122, 68, 101, 109, 113, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2da9f2f99ef1c4fff4fb0ae7577f9fcbu128, 0x42e585ba6dc3e26d9be9bb3e5840b286u128).calculate_p2pkh_address(false).iter().zip([49, 53, 97, 112, 115, 72, 97, 104, 101, 103, 65, 110, 82, 111, 101, 112, 101, 84, 76, 109, 118, 74, 113, 53, 106, 87, 80, 86, 76, 69, 83, 84, 84, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x136c3cab3675d584f71d97b6a0a7cb1du128, 0x27b570f6f496ea4ebc6de5330aec0181u128).calculate_p2pkh_address(false).iter().zip([49, 67, 70, 106, 52, 103, 98, 74, 83, 72, 77, 77, 113, 51, 122, 106, 120, 110, 109, 75, 85, 122, 100, 112, 113, 90, 106, 114, 65, 67, 75, 72, 75, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9369c11b2bdd73636c2210535b5e0c35u128, 0xdebddb88fa741172bd4172b87c3df668u128).calculate_p2pkh_address(false).iter().zip([49, 50, 100, 77, 87, 77, 71, 83, 89, 111, 77, 72, 99, 109, 121, 116, 65, 87, 111, 101, 53, 89, 66, 121, 70, 111, 102, 103, 65, 68, 65, 110, 83, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa825a7e25d4e3219f443dcf3be914daeu128, 0x73d6d42352d4c1ebe677b1a441df810cu128).calculate_p2pkh_address(false).iter().zip([49, 66, 113, 118, 121, 66, 85, 121, 55, 72, 103, 71, 107, 75, 78, 49, 115, 77, 105, 75, 89, 116, 113, 89, 90, 119, 117, 103, 88, 86, 89, 122, 84, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc6fcdc7e5e1460b6fe3ecc37e1cf80b1u128, 0x49d850d0186e3a267ad6230257cfe4eeu128).calculate_p2pkh_address(false).iter().zip([49, 68, 111, 102, 114, 114, 83, 81, 77, 121, 117, 49, 117, 115, 101, 113, 70, 121, 68, 78, 120, 70, 68, 54, 105, 76, 122, 49, 68, 105, 118, 109, 114, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcfaf086383126105158c28328eb8ac18u128, 0x332dacc25e1bbf77a67db0e1b85f768u128).calculate_p2pkh_address(false).iter().zip([0, 49, 112, 112, 69, 75, 70, 72, 82, 116, 118, 50, 104, 118, 122, 109, 115, 107, 70, 54, 75, 102, 55, 85, 89, 99, 111, 81, 87, 106, 67, 99, 57, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x316c4cabc4f15ca548814650559eec23u128, 0x408c84d5c4b687a914cd913def0f5d07u128).calculate_p2pkh_address(false).iter().zip([49, 56, 102, 75, 66, 65, 116, 107, 86, 114, 86, 84, 72, 54, 69, 85, 101, 98, 117, 113, 107, 66, 78, 89, 67, 51, 122, 87, 120, 83, 109, 109, 105, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe5dcbdd6bd9dc57c3dbd2f956b7f7454u128, 0x3abc4a08b491b3a519a7c2b62e3c2b58u128).calculate_p2pkh_address(false).iter().zip([49, 54, 109, 119, 109, 70, 83, 56, 105, 102, 65, 90, 71, 98, 121, 98, 65, 51, 122, 88, 103, 89, 81, 87, 98, 55, 101, 65, 99, 51, 85, 66, 71, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaf2f90a710d8c07ca1d51691112865f2u128, 0xe34bd5a1f6ab31294b92c19231b19ef7u128).calculate_p2pkh_address(false).iter().zip([49, 56, 51, 67, 118, 122, 89, 113, 49, 97, 68, 104, 56, 97, 53, 122, 55, 78, 106, 66, 98, 104, 109, 87, 119, 105, 101, 81, 103, 74, 100, 100, 71, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb801b9f5002cf057b906c21e498aefaeu128, 0x409ac64bde43b5537976765927d274f8u128).calculate_p2pkh_address(false).iter().zip([49, 74, 103, 68, 70, 107, 87, 103, 99, 77, 54, 77, 122, 57, 84, 117, 86, 99, 55, 68, 115, 89, 55, 102, 77, 106, 99, 75, 107, 67, 110, 101, 72, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x88cbb766c7bca344ea30361860aca5e1u128, 0x8a7a664abfe70cc94d44cd4bd8671fecu128).calculate_p2pkh_address(false).iter().zip([49, 67, 57, 56, 52, 118, 103, 67, 81, 69, 110, 57, 75, 107, 118, 103, 104, 55, 74, 51, 77, 89, 54, 101, 112, 74, 97, 78, 110, 101, 86, 99, 120, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2e06305d4e73daa113f6d75f94236f5au128, 0x40e0f91deca3b4a331a4cfee608ae9ccu128).calculate_p2pkh_address(false).iter().zip([49, 57, 116, 119, 78, 57, 107, 69, 50, 121, 107, 56, 110, 116, 107, 51, 101, 66, 71, 87, 118, 113, 100, 118, 117, 116, 57, 71, 106, 116, 113, 107, 65, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x83b303f3fe157e3c5196d4f4f22a9a40u128, 0x60b845158c803ff081f7b6ba0012cd39u128).calculate_p2pkh_address(false).iter().zip([49, 77, 78, 112, 120, 85, 89, 105, 88, 99, 118, 89, 53, 86, 83, 86, 103, 81, 109, 75, 104, 52, 112, 102, 74, 50, 101, 75, 74, 118, 97, 77, 55, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x31b72ef25e418a0832cb68c3c885847eu128, 0x9a68fb7df022c2054342c03aa2452111u128).calculate_p2pkh_address(false).iter().zip([49, 74, 85, 86, 97, 69, 97, 83, 111, 87, 50, 85, 98, 76, 82, 51, 99, 84, 56, 106, 89, 70, 84, 97, 54, 116, 121, 80, 106, 121, 109, 98, 106, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x619df7132d49c3270b64ff6a3e4d0547u128, 0xba6991122b34ac918629757a6016159cu128).calculate_p2pkh_address(false).iter().zip([49, 55, 74, 101, 49, 89, 54, 56, 100, 122, 101, 115, 114, 100, 81, 120, 50, 100, 55, 72, 84, 105, 110, 68, 77, 122, 55, 74, 120, 102, 107, 111, 101, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3b733a39c255af781e5aed8b2f849d13u128, 0xfcf751e2ed768cd9647cd720d087325bu128).calculate_p2pkh_address(false).iter().zip([0, 49, 56, 52, 51, 104, 53, 53, 86, 117, 71, 57, 56, 71, 71, 89, 54, 66, 57, 70, 75, 71, 77, 49, 117, 69, 89, 122, 97, 122, 71, 105, 54, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf605a6ae584c3d3eab873935c9ca9c70u128, 0xd393578c9ed1bd79c7714ee180e50fb5u128).calculate_p2pkh_address(false).iter().zip([49, 77, 98, 85, 110, 50, 65, 75, 68, 67, 52, 99, 53, 90, 115, 116, 54, 103, 106, 97, 115, 115, 89, 87, 66, 69, 104, 72, 80, 70, 99, 72, 99, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa769e6bbe9c465fba3eba01b40e6df3du128, 0x690f27db55962f96f2f084f27847f3bbu128).calculate_p2pkh_address(false).iter().zip([49, 69, 87, 67, 88, 67, 110, 71, 115, 104, 102, 103, 100, 81, 104, 102, 99, 56, 110, 90, 56, 77, 74, 98, 49, 50, 78, 118, 105, 70, 90, 103, 99, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x91ff1133eea24cea99f03de67f8f7f3u128, 0x9ad89252bf35633d5134efd231268890u128).calculate_p2pkh_address(false).iter().zip([49, 70, 109, 115, 50, 101, 100, 83, 77, 114, 118, 107, 82, 54, 100, 80, 75, 53, 66, 117, 113, 104, 105, 122, 65, 52, 114, 102, 78, 107, 69, 78, 86, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xace13c69f27d702f6446e4f3116b0970u128, 0x9fdd36d85375124581d84cfdc8695cf3u128).calculate_p2pkh_address(false).iter().zip([49, 76, 51, 100, 99, 121, 68, 65, 55, 54, 104, 90, 54, 68, 109, 110, 68, 86, 100, 88, 87, 115, 56, 54, 120, 111, 97, 90, 122, 65, 83, 114, 85, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc7f38bc331ee97942b1f75b3b2e1ba5cu128, 0x81d5cf4a2163f87a10714ce2c407cd5au128).calculate_p2pkh_address(false).iter().zip([49, 69, 114, 51, 105, 116, 109, 90, 70, 57, 72, 115, 76, 69, 122, 74, 77, 72, 119, 55, 110, 85, 52, 74, 77, 85, 110, 111, 77, 112, 85, 81, 99, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5012102c2140eab85e00a8665a24ff1du128, 0xb4d52cf7dfc536c405b923b18b1e20cdu128).calculate_p2pkh_address(false).iter().zip([49, 55, 111, 57, 88, 81, 70, 66, 51, 97, 122, 88, 117, 98, 99, 119, 88, 118, 53, 50, 52, 89, 54, 115, 116, 66, 71, 68, 99, 112, 119, 85, 121, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe1411263669e0571b423a63e8d9c3cbcu128, 0xa558ba5ff59220ce6a711871c3064e82u128).calculate_p2pkh_address(false).iter().zip([49, 52, 54, 53, 90, 78, 67, 68, 56, 113, 54, 122, 103, 86, 80, 57, 87, 117, 72, 113, 55, 68, 80, 121, 84, 119, 106, 68, 118, 76, 88, 104, 89, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x40f34fbe21c9e49bda55ad44810fcd73u128, 0x55df87320601f7fd70ac52456586c7bu128).calculate_p2pkh_address(false).iter().zip([49, 65, 80, 87, 117, 105, 105, 117, 78, 85, 114, 86, 80, 107, 118, 87, 103, 82, 111, 88, 117, 68, 117, 100, 111, 80, 116, 114, 105, 90, 74, 81, 106, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1c4fd721d1d4b74ae712c7a9d4b40614u128, 0xa962a20b40d316fd516e61141318801cu128).calculate_p2pkh_address(false).iter().zip([49, 72, 66, 67, 109, 104, 75, 100, 77, 51, 89, 82, 103, 65, 81, 106, 85, 114, 82, 113, 72, 53, 117, 106, 51, 78, 103, 85, 122, 52, 50, 104, 74, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdeeae45c8e2f86a484d9d0672ed5102du128, 0x1ac040918d57bd515390a496b96de201u128).calculate_p2pkh_address(false).iter().zip([49, 81, 68, 78, 98, 52, 102, 87, 57, 111, 77, 82, 81, 67, 113, 98, 118, 65, 103, 51, 89, 112, 82, 121, 71, 113, 80, 116, 49, 110, 113, 57, 78, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe126fd7d77919aedaa5bf1a19c6c500cu128, 0xc7112e0c21599154a6b1fec2cbc75223u128).calculate_p2pkh_address(false).iter().zip([49, 67, 84, 52, 111, 68, 56, 50, 56, 106, 81, 68, 118, 77, 76, 113, 109, 116, 102, 105, 68, 107, 74, 121, 107, 86, 109, 68, 78, 49, 103, 87, 100, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8f666c89e04494db5d534dbdf25e47bcu128, 0x2c51ba0a19970090831d29b26f04a64au128).calculate_p2pkh_address(false).iter().zip([49, 72, 87, 103, 71, 68, 77, 52, 114, 70, 90, 49, 104, 78, 78, 75, 120, 75, 118, 101, 83, 71, 97, 72, 66, 122, 106, 97, 112, 74, 65, 104, 101, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe6836cc79d6345fea29b454fc7a25c8au128, 0x10241d206dd5e7cd81aea112c6da2fb7u128).calculate_p2pkh_address(false).iter().zip([49, 53, 98, 106, 53, 56, 88, 110, 120, 52, 65, 101, 72, 115, 106, 99, 66, 88, 52, 74, 103, 116, 69, 82, 103, 116, 51, 52, 110, 90, 83, 97, 75, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5d383688b010c7a6d87061ad7d60b325u128, 0xdee32a1a2ab7cdc45d3d1ecd0ea90a3eu128).calculate_p2pkh_address(false).iter().zip([49, 53, 110, 102, 106, 97, 115, 68, 68, 54, 82, 86, 68, 121, 69, 55, 77, 54, 107, 101, 106, 119, 97, 70, 113, 101, 89, 56, 85, 102, 86, 87, 72, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe1efe4c78c1fac8f484db82c931a2d61u128, 0x522169221275cf746876b067185b9dffu128).calculate_p2pkh_address(false).iter().zip([49, 70, 67, 83, 68, 88, 56, 117, 105, 53, 116, 80, 51, 119, 118, 109, 121, 77, 114, 72, 84, 89, 97, 112, 74, 103, 122, 70, 49, 83, 102, 72, 106, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd4f64836c3ff987d5ad19e41ed57177du128, 0x815053a7fadbbd3f219bce6c1f89d4cau128).calculate_p2pkh_address(false).iter().zip([49, 72, 88, 121, 115, 72, 71, 57, 119, 81, 89, 81, 90, 86, 67, 98, 121, 55, 85, 67, 57, 85, 56, 69, 90, 114, 50, 54, 107, 67, 69, 90, 97, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa3950244886c9ad8ec2ef1832c4e95fdu128, 0x241ad72b5f109f4026cc500e6fb4800fu128).calculate_p2pkh_address(false).iter().zip([49, 75, 71, 112, 100, 51, 114, 88, 80, 113, 111, 101, 99, 101, 82, 116, 68, 76, 78, 66, 65, 87, 55, 70, 85, 100, 78, 50, 50, 116, 97, 67, 85, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6a52cc765a10a14a3cb012569fa5dbbeu128, 0x7e091eaef0d2e1f51c1989e89b2f41aau128).calculate_p2pkh_address(false).iter().zip([49, 56, 118, 51, 110, 102, 51, 49, 98, 88, 49, 88, 56, 55, 122, 53, 56, 75, 89, 112, 88, 104, 77, 120, 122, 80, 101, 117, 69, 82, 51, 85, 110, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x83af1e1085e38d16d5d6f52079b7aec5u128, 0xab0fad3a3cbf4ab7154b9e3c313b18b5u128).calculate_p2pkh_address(false).iter().zip([49, 51, 72, 83, 101, 89, 104, 54, 49, 57, 102, 49, 119, 119, 117, 109, 53, 74, 86, 74, 86, 67, 75, 110, 86, 111, 86, 85, 110, 122, 57, 102, 89, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcbb7ead1db7bbdc97818874f5ffbb498u128, 0x47a1a6c2eae2bccec2af1c210f7653fau128).calculate_p2pkh_address(false).iter().zip([49, 78, 85, 103, 76, 65, 55, 81, 54, 97, 105, 101, 65, 104, 52, 65, 119, 101, 102, 117, 120, 50, 89, 114, 76, 111, 89, 50, 77, 85, 120, 103, 80, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa4840ecf8b304284981b0a523f44e300u128, 0x5cbede0c62fa0954490f752843af70aeu128).calculate_p2pkh_address(false).iter().zip([49, 70, 110, 54, 107, 57, 109, 71, 76, 119, 56, 121, 90, 118, 75, 121, 88, 49, 69, 111, 118, 90, 69, 65, 104, 99, 121, 90, 120, 119, 81, 119, 51, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2f49569cda8911c33c91bfc4a27e6421u128, 0x6f8543aeae8fae821678f81d699fa54cu128).calculate_p2pkh_address(false).iter().zip([49, 69, 99, 105, 116, 89, 81, 111, 107, 54, 52, 85, 106, 66, 107, 84, 52, 114, 121, 76, 105, 116, 75, 69, 50, 116, 103, 105, 109, 112, 104, 83, 112, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x89937d89a9223bd4f55a81aa0c113d08u128, 0xaa79e7513b91e2a0ed106828059f332bu128).calculate_p2pkh_address(false).iter().zip([0, 49, 115, 65, 118, 55, 101, 116, 117, 83, 111, 72, 56, 101, 67, 88, 106, 78, 72, 78, 89, 89, 109, 74, 103, 71, 102, 99, 52, 98, 50, 117, 98, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x671451d9a7b974174e26c96645fc92ebu128, 0xc59e9653f4f7d70706ecf2000ec552e8u128).calculate_p2pkh_address(false).iter().zip([49, 67, 98, 119, 115, 85, 78, 78, 84, 97, 55, 100, 119, 67, 105, 90, 101, 84, 52, 122, 68, 86, 67, 70, 72, 52, 115, 88, 78, 89, 84, 103, 114, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x84c344a5066c442fe64d1d165550456fu128, 0x2a5b329aa7c7346891b643c8cce35a14u128).calculate_p2pkh_address(false).iter().zip([49, 55, 86, 107, 68, 120, 109, 120, 115, 55, 56, 66, 88, 70, 111, 112, 98, 120, 70, 71, 111, 81, 51, 112, 103, 88, 89, 103, 106, 57, 51, 117, 99, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x78908db8f8af7c927f438e86988d7857u128, 0xf1f12895cb07e9b1004de3039926fe48u128).calculate_p2pkh_address(false).iter().zip([49, 68, 86, 67, 65, 53, 103, 55, 102, 50, 74, 71, 51, 89, 65, 51, 71, 67, 75, 89, 68, 50, 122, 116, 51, 78, 118, 84, 50, 80, 51, 119, 114, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xffd721881bb2d00e6240cc0b45f2a42u128, 0xc70f690926411ec21a837d960e3c004u128).calculate_p2pkh_address(false).iter().zip([49, 54, 88, 110, 103, 97, 81, 49, 81, 75, 69, 52, 118, 101, 77, 84, 72, 67, 76, 111, 68, 54, 118, 117, 98, 112, 56, 83, 75, 109, 71, 51, 78, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa1a30d0800e2b835c8251e28874d197au128, 0xd4f52d7e79c88c9699f41656141bdf12u128).calculate_p2pkh_address(false).iter().zip([49, 51, 115, 90, 84, 85, 105, 74, 113, 122, 84, 102, 76, 65, 84, 115, 54, 100, 80, 113, 68, 90, 119, 87, 89, 121, 102, 53, 74, 104, 119, 88, 77, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5681d28b7ea0446c8a534a47896a82aeu128, 0x24e6a249305ac0ad512ab6d8be14ed53u128).calculate_p2pkh_address(false).iter().zip([49, 53, 112, 67, 121, 53, 110, 56, 121, 81, 50, 50, 90, 67, 104, 102, 97, 109, 50, 70, 78, 82, 101, 110, 66, 83, 76, 70, 103, 110, 81, 114, 52, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7d9d1addb1d7f3d606054f7b025b3339u128, 0x3e7b16f67ecff715c23cf5b3b054eab9u128).calculate_p2pkh_address(false).iter().zip([49, 80, 120, 115, 69, 53, 104, 99, 71, 90, 117, 53, 75, 97, 101, 78, 69, 89, 50, 89, 72, 105, 67, 74, 116, 90, 77, 97, 68, 110, 106, 71, 117, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x429a19f44cf1ea16accef246dd189763u128, 0xbe31bfb69d8d4e05f9ef269246ef93d6u128).calculate_p2pkh_address(false).iter().zip([49, 74, 117, 88, 117, 77, 54, 84, 109, 54, 98, 89, 89, 109, 69, 106, 117, 121, 103, 77, 120, 68, 87, 121, 119, 78, 115, 70, 99, 65, 75, 66, 57, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf3e1688979a0e1c2a1fba40dea41539u128, 0xdafc4110d8dabd393fe2a085a1dcae71u128).calculate_p2pkh_address(false).iter().zip([49, 56, 104, 77, 80, 117, 84, 57, 72, 115, 112, 111, 98, 97, 72, 85, 103, 74, 50, 102, 110, 111, 114, 82, 102, 69, 80, 103, 51, 54, 66, 50, 85, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x429b2aace830e986130e0b73e827651au128, 0x425e3a25c7fe7c9cbc183828b7f47a7u128).calculate_p2pkh_address(false).iter().zip([49, 65, 86, 52, 71, 102, 66, 107, 50, 71, 84, 55, 100, 101, 118, 72, 74, 74, 105, 55, 84, 85, 55, 111, 115, 81, 57, 85, 105, 113, 100, 107, 110, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x183c88e8cc99b9b76043b8b5ee1cc68au128, 0x497ea1b718e964d3e2a7cecc92743f81u128).calculate_p2pkh_address(false).iter().zip([49, 56, 105, 121, 103, 90, 106, 113, 115, 51, 106, 52, 81, 85, 113, 69, 82, 65, 71, 69, 100, 76, 112, 76, 71, 53, 80, 110, 107, 120, 117, 98, 99, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7d0df557ab00ec5cfa0585d4830d1011u128, 0x3f61ffa2287fe76961206b0cde927970u128).calculate_p2pkh_address(false).iter().zip([49, 75, 113, 109, 77, 113, 98, 99, 75, 110, 114, 104, 57, 49, 118, 50, 117, 118, 52, 83, 90, 112, 110, 110, 86, 78, 53, 70, 68, 70, 69, 67, 111, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xea19ec073b53596f1df37583f3c45948u128, 0x47747d31f9b9329e699ce4cc8bbd0963u128).calculate_p2pkh_address(false).iter().zip([49, 75, 106, 51, 117, 110, 89, 85, 87, 82, 72, 75, 72, 51, 121, 101, 82, 65, 101, 109, 98, 111, 81, 107, 120, 104, 76, 118, 98, 51, 83, 57, 117, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdd5cac6d27384082a91e055269e5f81fu128, 0xed7daa11ba61f1e2338f5f7ade69a235u128).calculate_p2pkh_address(false).iter().zip([49, 49, 52, 116, 99, 78, 101, 72, 53, 75, 111, 57, 57, 107, 80, 102, 97, 110, 104, 85, 112, 67, 77, 57, 80, 107, 80, 110, 80, 120, 104, 82, 115, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2cecddb4f7640cfd7251f83dcbb07531u128, 0x59834312f95f65218364400537423cc6u128).calculate_p2pkh_address(false).iter().zip([49, 54, 106, 74, 75, 84, 70, 111, 107, 104, 50, 117, 105, 103, 122, 119, 111, 76, 78, 120, 97, 99, 101, 85, 99, 90, 54, 97, 83, 57, 104, 105, 66, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa9ba4687afc5085579755b8479771186u128, 0xfa52f0d4f384d71c56add6a26fcd8a8du128).calculate_p2pkh_address(false).iter().zip([49, 81, 57, 89, 80, 116, 116, 53, 99, 98, 55, 74, 122, 65, 75, 114, 70, 80, 66, 81, 109, 105, 74, 100, 122, 78, 109, 106, 87, 65, 82, 75, 56, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x955d55c827c8dee825b7e4532430d864u128, 0x850c605ed3949bdc57e37c58eb21ec60u128).calculate_p2pkh_address(false).iter().zip([49, 57, 68, 112, 65, 52, 53, 90, 111, 101, 97, 78, 113, 97, 49, 85, 98, 117, 117, 98, 105, 87, 84, 72, 52, 84, 75, 121, 114, 103, 81, 57, 122, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x45a69f81bbb35a8b5839d1313662e629u128, 0xf0280fc43bd4faae6da3838fe84f3879u128).calculate_p2pkh_address(false).iter().zip([49, 57, 53, 75, 53, 66, 49, 55, 54, 77, 118, 75, 109, 51, 78, 101, 55, 77, 67, 67, 65, 106, 53, 98, 51, 100, 115, 101, 106, 54, 75, 50, 122, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xacc827101951002a9de0dd64bc86c69au128, 0xeda5a30586ce6ffc1c86671be4cda415u128).calculate_p2pkh_address(false).iter().zip([49, 80, 65, 112, 100, 101, 80, 85, 87, 116, 51, 86, 80, 56, 103, 101, 74, 99, 55, 115, 122, 104, 51, 83, 78, 83, 77, 109, 85, 66, 67, 76, 76, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x351683bd321f11c1e99bfcfb2a895b80u128, 0x214556f07b2c25a873bb516fdb5cc974u128).calculate_p2pkh_address(false).iter().zip([49, 56, 121, 78, 114, 89, 106, 116, 78, 109, 112, 99, 66, 119, 117, 103, 121, 102, 84, 116, 121, 120, 114, 53, 67, 77, 109, 121, 107, 53, 83, 74, 88, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x77db249bf1358c8f0f3d62e4b1ef5caau128, 0x5727a238943789e237535eaf74b3dfbcu128).calculate_p2pkh_address(false).iter().zip([49, 71, 119, 56, 103, 101, 116, 90, 100, 53, 69, 81, 107, 67, 69, 98, 114, 116, 77, 71, 69, 69, 85, 53, 121, 100, 82, 65, 77, 68, 121, 90, 90, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3ea967be507a3aa5d8b82ff6cd9cc762u128, 0xaa73390145de16caaba94721b1aabeafu128).calculate_p2pkh_address(false).iter().zip([49, 50, 110, 53, 102, 110, 104, 85, 76, 118, 115, 57, 55, 119, 77, 76, 106, 100, 104, 116, 82, 105, 67, 80, 75, 114, 100, 102, 89, 115, 76, 103, 113, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb674f104a55b62dec1d537f21e5bf9cfu128, 0xa1810fb6593bbd7f3686576dd0f5da0fu128).calculate_p2pkh_address(false).iter().zip([49, 68, 112, 88, 56, 111, 118, 84, 57, 117, 52, 102, 51, 70, 102, 56, 49, 74, 50, 117, 114, 71, 52, 83, 109, 115, 75, 106, 65, 117, 52, 82, 50, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xab9b51ae7f38ea38f808249a2c222f48u128, 0x7ae0a8d9a2c0b41bde109fed8e1621c6u128).calculate_p2pkh_address(false).iter().zip([49, 77, 115, 100, 88, 114, 110, 84, 52, 70, 101, 80, 115, 120, 66, 49, 113, 86, 76, 98, 118, 100, 67, 114, 101, 90, 119, 101, 69, 97, 106, 107, 74, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x16c193e69b2cbdf226613644302a49c1u128, 0x9bdd43a8e324bcebabedc7e1ff546143u128).calculate_p2pkh_address(false).iter().zip([49, 57, 119, 82, 67, 55, 104, 86, 83, 116, 102, 98, 122, 50, 86, 106, 50, 66, 66, 57, 97, 67, 118, 85, 78, 75, 113, 85, 90, 121, 106, 78, 101, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x42b85005a9580faa1b02a25f5116bc7du128, 0xdb7aa66650dda2bec352ba2639434e86u128).calculate_p2pkh_address(false).iter().zip([49, 65, 80, 81, 84, 55, 106, 89, 53, 100, 76, 56, 71, 52, 52, 70, 84, 117, 106, 57, 55, 67, 116, 105, 50, 77, 67, 85, 118, 99, 101, 118, 49, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6225002e6ae693ba2bb9b5e519a0a3f0u128, 0x41cd5ff7ff050bef9a61088075650055u128).calculate_p2pkh_address(false).iter().zip([49, 52, 113, 76, 50, 65, 68, 75, 56, 66, 102, 120, 55, 114, 101, 66, 116, 88, 102, 114, 49, 78, 50, 110, 97, 119, 68, 119, 57, 114, 52, 76, 75, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x249c27ae739da69d22589acf32558c1cu128, 0xdcffc00e1bd75ef07e217263ba486852u128).calculate_p2pkh_address(false).iter().zip([49, 51, 69, 77, 54, 55, 103, 56, 80, 107, 68, 98, 104, 86, 81, 75, 99, 107, 82, 85, 112, 88, 85, 102, 107, 116, 50, 75, 120, 118, 106, 84, 114, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x47a3b7fab8d9d34094f1cbea0850b6e9u128, 0x3bceccc322bbc67e5269c50fa58065e6u128).calculate_p2pkh_address(false).iter().zip([49, 74, 121, 49, 55, 86, 74, 106, 103, 71, 50, 50, 72, 120, 100, 101, 98, 103, 104, 54, 84, 114, 68, 113, 114, 66, 69, 121, 71, 53, 116, 101, 76, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x857341edb40c635f758d11272112913bu128, 0x7cdc447b0355bc481e8e36d22e86be52u128).calculate_p2pkh_address(false).iter().zip([49, 70, 100, 82, 88, 80, 119, 120, 71, 78, 116, 85, 50, 90, 118, 56, 105, 113, 83, 89, 77, 103, 57, 55, 109, 104, 100, 56, 105, 116, 118, 55, 74, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5c2fcbbe94588049d78af15bb8e48f84u128, 0x16749c792dd4b9e0d854b75784d5617au128).calculate_p2pkh_address(false).iter().zip([49, 71, 90, 52, 111, 53, 65, 89, 84, 52, 100, 103, 69, 83, 101, 86, 90, 74, 49, 120, 103, 105, 76, 80, 89, 118, 72, 88, 50, 74, 90, 119, 75, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7d27fce55c57664382968e1235aab5ceu128, 0x8f81ff8e1d75ae4fc0a665dc8932254du128).calculate_p2pkh_address(false).iter().zip([49, 74, 78, 49, 87, 50, 118, 121, 107, 98, 69, 114, 101, 98, 72, 81, 55, 121, 78, 74, 111, 99, 77, 114, 119, 122, 103, 87, 85, 102, 112, 52, 50, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaddaf0754baad0958dc400b450906308u128, 0x207a9cc3ac01e31bb5a2fcf8242bb295u128).calculate_p2pkh_address(false).iter().zip([49, 54, 89, 67, 77, 104, 114, 78, 85, 99, 115, 98, 72, 87, 49, 119, 51, 116, 106, 81, 80, 76, 118, 99, 77, 103, 98, 54, 67, 116, 81, 50, 110, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x38327fabc397bd509639fed71b13d8f8u128, 0x72f50d9e6c84621d923ab49818a6348u128).calculate_p2pkh_address(false).iter().zip([49, 65, 68, 56, 54, 102, 83, 76, 120, 83, 77, 121, 57, 101, 51, 81, 72, 121, 112, 82, 50, 120, 100, 114, 51, 50, 101, 49, 57, 99, 74, 74, 90, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8a68f297bcfa83dcdc0ac7d635ae0c61u128, 0x2441dc480f35f34fd02054afa276b819u128).calculate_p2pkh_address(false).iter().zip([49, 71, 80, 54, 56, 51, 104, 55, 112, 75, 77, 89, 55, 111, 76, 72, 71, 89, 111, 98, 51, 57, 69, 70, 110, 74, 113, 67, 70, 119, 84, 113, 86, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x221efbc8c6cfb7c59b41b217452b3f79u128, 0xb2105357dc36755b23459f9bec9e9e6cu128).calculate_p2pkh_address(false).iter().zip([49, 50, 69, 67, 121, 72, 119, 117, 78, 70, 98, 110, 81, 113, 65, 102, 102, 55, 110, 68, 120, 106, 56, 115, 67, 106, 109, 103, 57, 67, 57, 51, 50, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x670371bf6faf4d0b1dc83d7b50fb144fu128, 0xb2eaa0a8bfa38cc7461530f5e5d6edb3u128).calculate_p2pkh_address(false).iter().zip([49, 53, 87, 110, 72, 65, 86, 67, 87, 107, 67, 77, 112, 87, 109, 77, 53, 88, 89, 75, 82, 84, 52, 56, 74, 113, 52, 55, 84, 101, 112, 53, 78, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4bf80e7f152ae1851b3a9bd4109b6feeu128, 0x2468f051a924d416c7109c6c375b16fbu128).calculate_p2pkh_address(false).iter().zip([49, 77, 110, 84, 84, 98, 119, 76, 112, 97, 56, 88, 71, 101, 51, 86, 65, 119, 70, 78, 114, 88, 50, 106, 49, 77, 110, 56, 105, 109, 86, 72, 118, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8861a8de3567869595cb2ba63c3877e5u128, 0x9d58f1685ae870a9baf3ea36d452d26eu128).calculate_p2pkh_address(false).iter().zip([49, 50, 109, 57, 67, 120, 49, 117, 66, 69, 118, 100, 83, 70, 117, 75, 88, 100, 115, 90, 101, 106, 113, 117, 53, 105, 114, 106, 71, 89, 105, 89, 80, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcaa09a2ef874a327c3675cce826e493au128, 0x658a97bc4e36372b6c40dd063e3bc580u128).calculate_p2pkh_address(false).iter().zip([49, 52, 52, 51, 102, 112, 75, 88, 85, 67, 111, 82, 112, 114, 114, 51, 116, 51, 49, 65, 65, 69, 87, 78, 75, 53, 100, 54, 65, 100, 76, 85, 106, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7db9f7a49acc4a67d93a27bbd02423dau128, 0xe25baf80d39106bd133c046fe1016e01u128).calculate_p2pkh_address(false).iter().zip([49, 65, 104, 97, 72, 77, 69, 106, 101, 69, 83, 76, 104, 111, 85, 83, 66, 74, 82, 115, 84, 106, 81, 82, 77, 115, 107, 101, 80, 82, 81, 99, 113, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf5fe6b642846ecb62f3fd836eb401824u128, 0x43a365ff592c1f19e10221cc05ee7039u128).calculate_p2pkh_address(false).iter().zip([49, 77, 74, 80, 82, 50, 112, 119, 88, 72, 56, 89, 114, 101, 76, 66, 55, 120, 75, 51, 109, 83, 97, 85, 80, 69, 82, 81, 74, 69, 115, 89, 54, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xafad8ad4c440d1f5fafdbf1f10a21e6u128, 0xb152acc7c0e72fa118b0a50671040e41u128).calculate_p2pkh_address(false).iter().zip([49, 66, 111, 55, 88, 116, 113, 102, 65, 88, 66, 98, 81, 113, 71, 101, 97, 114, 112, 121, 82, 65, 110, 84, 88, 52, 85, 101, 118, 114, 50, 51, 70, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdaa581f6ab36c22d5d557eb8bfa12c74u128, 0x256fa18d9869f846985bf12561d5afc7u128).calculate_p2pkh_address(false).iter().zip([49, 77, 109, 86, 86, 111, 101, 113, 57, 74, 90, 84, 120, 81, 110, 57, 85, 55, 50, 107, 103, 100, 105, 54, 114, 51, 102, 98, 88, 51, 122, 112, 83, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xea81bce39b619a01baadf132bd3b2406u128, 0x1b2afa39410ec4e3cce31d52cd0c04d8u128).calculate_p2pkh_address(false).iter().zip([49, 51, 89, 119, 115, 97, 53, 70, 97, 50, 65, 119, 84, 53, 105, 69, 99, 74, 82, 76, 51, 89, 109, 87, 114, 103, 98, 117, 78, 77, 53, 97, 80, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7011f21ef3b2135aa79a2f31d7f71b22u128, 0x4cace9aa52d1c699609d60368127d3b9u128).calculate_p2pkh_address(false).iter().zip([49, 70, 83, 119, 75, 116, 56, 122, 80, 110, 68, 104, 113, 52, 72, 119, 83, 51, 100, 111, 101, 80, 81, 50, 107, 81, 101, 56, 111, 51, 57, 83, 107, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf1121872a4dc2e02c16eafd9aab33322u128, 0x4e8039039d89821988664c37da37061du128).calculate_p2pkh_address(false).iter().zip([49, 77, 101, 97, 119, 113, 89, 83, 99, 52, 81, 75, 70, 50, 72, 81, 80, 65, 90, 107, 89, 76, 84, 106, 67, 80, 86, 51, 69, 116, 69, 57, 67, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x17f32b582fee04a542af8c2499fd18c5u128, 0x67b77a8c01c63150b79576842d4de92u128).calculate_p2pkh_address(false).iter().zip([49, 69, 114, 107, 101, 113, 65, 52, 122, 114, 109, 103, 103, 117, 109, 122, 56, 77, 113, 77, 116, 90, 85, 86, 70, 65, 77, 114, 101, 89, 99, 54, 120, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf9738737712a3d010214c144fc372f99u128, 0xb0fde149706515deef6122769dbbd4f1u128).calculate_p2pkh_address(false).iter().zip([49, 50, 104, 116, 52, 81, 51, 78, 110, 50, 84, 89, 87, 69, 75, 75, 81, 116, 116, 76, 114, 75, 88, 72, 78, 101, 74, 55, 102, 86, 112, 54, 69, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2487291aee2c62f5f4487b3a0d864de0u128, 0x74aea18b2a43249769d5a266a8e9209cu128).calculate_p2pkh_address(false).iter().zip([49, 80, 80, 76, 100, 76, 72, 118, 71, 55, 54, 86, 89, 82, 51, 119, 66, 122, 110, 72, 104, 89, 110, 84, 76, 78, 77, 74, 50, 78, 89, 70, 97, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeefdce38473d5ef72432feaa0eb55830u128, 0xbbada4394b6db254ac7657ea65332097u128).calculate_p2pkh_address(false).iter().zip([49, 51, 53, 102, 116, 56, 87, 72, 71, 50, 102, 106, 87, 72, 75, 117, 70, 111, 76, 77, 55, 109, 65, 97, 57, 120, 80, 75, 97, 101, 98, 107, 69, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x23a51d206e738cfb79fe6e483147c030u128, 0xde44837e7666835d3e257e69f4783573u128).calculate_p2pkh_address(false).iter().zip([49, 69, 103, 57, 104, 90, 103, 112, 51, 85, 53, 106, 116, 116, 98, 86, 89, 107, 102, 80, 53, 54, 51, 113, 83, 52, 67, 90, 80, 83, 49, 81, 74, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8d10f14a99ebd7aa568dee0474047e63u128, 0x65fc7c4f19fc4a04dd829cd0c4697b77u128).calculate_p2pkh_address(false).iter().zip([49, 71, 78, 119, 83, 80, 81, 87, 90, 107, 113, 77, 110, 90, 115, 86, 120, 120, 54, 104, 82, 89, 122, 90, 72, 81, 97, 66, 87, 67, 103, 106, 88, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x35913ae12714e68e37c9b748b8be96c4u128, 0xd0c511c4dd78cb850893df33d3ce481eu128).calculate_p2pkh_address(false).iter().zip([49, 78, 106, 119, 77, 118, 83, 68, 82, 49, 65, 77, 81, 68, 71, 50, 80, 99, 120, 90, 103, 112, 66, 68, 105, 122, 110, 75, 97, 84, 99, 51, 69, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8e7ea588e64a206d7724bf51e77c92c0u128, 0xc76c8e67ef3cd9cb30721322d0cc0f3au128).calculate_p2pkh_address(false).iter().zip([49, 67, 51, 75, 78, 116, 51, 86, 103, 87, 77, 89, 115, 97, 120, 100, 66, 70, 49, 81, 80, 51, 78, 81, 84, 81, 77, 100, 57, 70, 77, 109, 98, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8f2be85f828e73c5747dec856cc05f78u128, 0xc14f2112387cff0c6b854fc41c91bfb8u128).calculate_p2pkh_address(false).iter().zip([49, 54, 51, 111, 74, 117, 70, 55, 112, 56, 55, 84, 119, 99, 68, 69, 84, 118, 54, 70, 81, 98, 80, 65, 119, 106, 122, 68, 118, 55, 52, 84, 98, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa47e040ffc7b7785fa443354a161f20u128, 0x654073542ba5deac352763c3094bddacu128).calculate_p2pkh_address(false).iter().zip([49, 66, 117, 116, 49, 90, 81, 100, 89, 121, 70, 74, 71, 112, 70, 71, 105, 74, 121, 97, 75, 69, 119, 66, 84, 111, 51, 57, 52, 67, 113, 82, 115, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x911c120c4beee51dafa7dfce4f702f78u128, 0x6dce2d8f88dee757ab654dd7efab387au128).calculate_p2pkh_address(false).iter().zip([49, 52, 68, 65, 106, 112, 115, 113, 84, 118, 88, 65, 87, 109, 111, 80, 103, 74, 74, 52, 120, 121, 122, 57, 114, 97, 117, 102, 109, 84, 98, 112, 65, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8b094992fc18590af853d390602a4a70u128, 0xfcaab170b8c4afd7db8adff2ab131005u128).calculate_p2pkh_address(false).iter().zip([49, 75, 99, 107, 105, 100, 68, 114, 50, 113, 75, 110, 82, 71, 100, 101, 68, 119, 52, 122, 101, 52, 87, 88, 105, 117, 89, 56, 106, 80, 122, 88, 119, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x32e5b5988c10dafc6e49a6b75b2974ccu128, 0x185bf3658f3db06cb28eac24b94aa65du128).calculate_p2pkh_address(false).iter().zip([49, 70, 109, 87, 103, 88, 65, 81, 107, 86, 49, 104, 103, 86, 68, 90, 51, 89, 74, 82, 52, 121, 113, 114, 113, 76, 65, 90, 51, 109, 114, 113, 97, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa7d151390bfb9c37aba9ab856bf1ed1fu128, 0x273ea39a0e3d104206a09d2451273e51u128).calculate_p2pkh_address(false).iter().zip([49, 55, 89, 86, 89, 77, 104, 104, 101, 85, 52, 101, 77, 85, 115, 75, 49, 55, 54, 69, 89, 105, 65, 100, 54, 56, 83, 121, 88, 67, 116, 54, 121, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x20cbb09944618938b7866a61842c643u128, 0x82b5ede3ce46c1560591a54e0d426deau128).calculate_p2pkh_address(false).iter().zip([49, 66, 114, 101, 100, 111, 90, 69, 53, 122, 107, 83, 114, 89, 110, 98, 117, 80, 78, 69, 67, 110, 90, 117, 110, 49, 65, 102, 76, 107, 78, 109, 120, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9be184568d45ec018fc33d461104fd4eu128, 0x66d0e6e1d0aff01eeff6c43b81ea6f99u128).calculate_p2pkh_address(false).iter().zip([49, 54, 82, 52, 120, 106, 110, 83, 86, 65, 102, 66, 89, 122, 54, 82, 83, 119, 52, 71, 56, 122, 81, 49, 53, 53, 112, 110, 121, 57, 110, 77, 117, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x94e3f9a687546fd604a16f21006fd127u128, 0x5247114fbbb85b436ba4f0661474beaeu128).calculate_p2pkh_address(false).iter().zip([49, 67, 49, 103, 100, 65, 99, 81, 86, 111, 120, 83, 116, 65, 116, 57, 49, 110, 89, 53, 87, 55, 110, 52, 82, 56, 85, 72, 115, 76, 67, 88, 78, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x26f48d25235e94b62adac7872655a40du128, 0xa915c2062d76f34256cf5dc774e5cd47u128).calculate_p2pkh_address(false).iter().zip([49, 66, 110, 98, 87, 119, 119, 97, 122, 99, 122, 121, 98, 71, 98, 72, 118, 71, 70, 120, 49, 52, 113, 84, 83, 52, 88, 101, 104, 50, 68, 111, 86, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe6cc9937e546ef804d4b9b80894ddae9u128, 0x162840ec3eb998350e61d979f3e1b4c6u128).calculate_p2pkh_address(false).iter().zip([49, 65, 56, 116, 114, 90, 83, 83, 109, 71, 54, 105, 86, 54, 105, 88, 122, 65, 54, 80, 110, 118, 76, 103, 74, 81, 106, 113, 121, 99, 100, 50, 107, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x74589ff47475b88b110fd1fc0ce07286u128, 0x3828696c1e22534fc04c4ae630ab68cau128).calculate_p2pkh_address(false).iter().zip([49, 72, 115, 107, 85, 69, 53, 97, 97, 114, 78, 87, 87, 50, 119, 107, 116, 75, 121, 78, 86, 83, 88, 54, 70, 83, 83, 105, 75, 109, 100, 115, 105, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf40db568d49dbdc35a66aaec2720f423u128, 0x50af655da561c74a661c955e853fc62eu128).calculate_p2pkh_address(false).iter().zip([49, 78, 71, 116, 100, 121, 66, 113, 100, 83, 104, 86, 53, 66, 74, 70, 57, 99, 89, 119, 67, 66, 104, 52, 101, 74, 101, 99, 55, 97, 76, 90, 119, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x36838fc780290336e4d3163c77a7af98u128, 0x7111f432beb4b433e910e9c39f8bafb4u128).calculate_p2pkh_address(false).iter().zip([49, 68, 109, 116, 85, 83, 101, 99, 99, 90, 71, 86, 110, 68, 67, 122, 90, 120, 90, 87, 57, 55, 74, 121, 56, 119, 70, 107, 68, 51, 74, 83, 70, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x53b4978d5c4c741368b9b4b8e0c40c2bu128, 0x31fe9df3ccb31ad6ce4ca593ce75771u128).calculate_p2pkh_address(false).iter().zip([49, 53, 80, 121, 103, 104, 98, 116, 52, 112, 69, 52, 77, 112, 89, 109, 120, 105, 121, 52, 107, 80, 75, 57, 85, 54, 90, 99, 49, 52, 114, 82, 80, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7a8236754e74180255552b4578df6427u128, 0x5c2d9b1f39b5e806883c9065280a3a7eu128).calculate_p2pkh_address(false).iter().zip([49, 69, 99, 75, 122, 106, 66, 78, 116, 67, 69, 90, 66, 66, 57, 56, 54, 87, 69, 57, 115, 81, 52, 67, 54, 105, 109, 109, 82, 52, 102, 54, 57, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbd21326d5010f48bdc15a5f86dce8904u128, 0x46b605a18a5cbed236d776f97df6b2f9u128).calculate_p2pkh_address(false).iter().zip([49, 75, 74, 72, 56, 84, 65, 74, 72, 80, 83, 114, 103, 51, 75, 117, 53, 106, 85, 72, 122, 67, 118, 101, 82, 72, 89, 80, 99, 99, 72, 49, 51, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfc4aa2e7b2c383b221c823fc826a8984u128, 0x12b1f8dc80a05ee1ecc5ed714f0a84d8u128).calculate_p2pkh_address(false).iter().zip([49, 52, 107, 87, 87, 51, 69, 55, 57, 50, 112, 76, 84, 109, 99, 99, 109, 90, 116, 119, 77, 89, 101, 117, 57, 99, 104, 88, 99, 76, 99, 101, 102, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x158d2a6f2602a5f582c33d2a05db2c0du128, 0xdff3e111058a189d5f05b89d8eeb6814u128).calculate_p2pkh_address(false).iter().zip([49, 81, 76, 87, 100, 68, 104, 98, 90, 97, 85, 119, 98, 72, 75, 87, 119, 71, 51, 119, 85, 85, 121, 75, 116, 115, 55, 53, 50, 116, 57, 54, 97, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe272753946730f68bf54ffacd85064deu128, 0xbfb442073aa173a760b9bc6a1d37b75fu128).calculate_p2pkh_address(false).iter().zip([49, 67, 111, 82, 53, 88, 72, 99, 101, 82, 114, 90, 53, 72, 109, 101, 109, 105, 53, 116, 86, 118, 98, 102, 106, 75, 81, 115, 86, 49, 74, 98, 87, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x86c0a85fd8dfff3f549c66117c641cccu128, 0xf68afd52baf228cbe5958d66fb69a53u128).calculate_p2pkh_address(false).iter().zip([49, 50, 100, 76, 51, 54, 53, 87, 57, 110, 116, 83, 90, 109, 120, 102, 88, 49, 106, 101, 90, 102, 65, 90, 66, 89, 97, 111, 83, 51, 56, 113, 53, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfe71a72e0f0a319387ae16951ba62a7eu128, 0x25f424743b72bd9f2786792670c9bebcu128).calculate_p2pkh_address(false).iter().zip([49, 77, 82, 84, 78, 90, 118, 84, 68, 119, 50, 90, 101, 113, 75, 122, 75, 107, 77, 88, 111, 78, 120, 122, 105, 68, 102, 105, 67, 118, 81, 75, 116, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe6e8abd7624387cff1f0aafc6d78157au128, 0x5a7d5776561c1bcb474602f1cd858216u128).calculate_p2pkh_address(false).iter().zip([0, 49, 86, 85, 101, 116, 109, 80, 101, 122, 97, 104, 57, 83, 66, 101, 83, 100, 113, 52, 113, 116, 77, 100, 90, 88, 90, 113, 97, 50, 121, 74, 97, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x465fb79c21af76fe8a10a5feb821f301u128, 0xa6d834a7aded15da5da1b78bf5f59b01u128).calculate_p2pkh_address(false).iter().zip([49, 54, 106, 113, 67, 84, 83, 50, 52, 67, 67, 100, 66, 118, 119, 113, 122, 50, 65, 70, 98, 107, 80, 115, 103, 84, 122, 104, 54, 97, 100, 72, 101, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xab7eaafe9c07b12d8275f18378bd2984u128, 0x99942ad527536155f170b9e88758ace2u128).calculate_p2pkh_address(false).iter().zip([49, 74, 69, 113, 99, 55, 113, 119, 122, 86, 98, 71, 106, 99, 84, 72, 86, 71, 82, 50, 78, 54, 114, 85, 51, 115, 118, 104, 65, 53, 88, 97, 110, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6ca83ce1636993ae31fd9a0e451dac6u128, 0x2ea726b768ea488ecfd9c060aa7b3a68u128).calculate_p2pkh_address(false).iter().zip([49, 75, 86, 75, 70, 99, 83, 90, 118, 68, 98, 57, 114, 67, 111, 106, 88, 54, 111, 78, 65, 119, 65, 89, 113, 119, 121, 121, 52, 107, 89, 76, 111, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b9b934e1ed5163a8ff1d559a70e4b79u128, 0x7074961ab429e4c227c49fdb41a86d9du128).calculate_p2pkh_address(false).iter().zip([49, 75, 77, 116, 85, 72, 84, 122, 78, 88, 102, 70, 74, 66, 66, 121, 70, 83, 68, 106, 115, 118, 110, 83, 81, 75, 85, 119, 88, 121, 114, 81, 75, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9ac28d6b13559410b6148d39e7286f2u128, 0x1848a90fff2661e491e9bb43276b83b5u128).calculate_p2pkh_address(false).iter().zip([49, 68, 81, 70, 87, 84, 76, 81, 109, 114, 56, 80, 51, 117, 87, 76, 100, 104, 118, 69, 57, 107, 82, 118, 78, 111, 83, 85, 76, 74, 53, 83, 55, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x66e317a663f857a36807b7f0395afbdau128, 0x1eb9d2486cab9485a8b1594e79fa1c66u128).calculate_p2pkh_address(false).iter().zip([49, 54, 56, 102, 84, 119, 118, 89, 74, 78, 102, 82, 50, 83, 88, 119, 65, 88, 116, 86, 122, 77, 86, 70, 118, 81, 51, 53, 55, 118, 87, 71, 122, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb5d0d8a7176554c9439463b17b43eba7u128, 0x1918dce6aa9c35869bbd7d13a75ef7d3u128).calculate_p2pkh_address(false).iter().zip([49, 54, 71, 74, 52, 101, 110, 112, 120, 84, 55, 77, 82, 82, 104, 97, 103, 75, 102, 117, 67, 80, 110, 107, 83, 112, 71, 106, 54, 118, 87, 74, 118, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf66096f6dbd2856882dc51c22f32a871u128, 0xb781826bd23b12c2fbcd8e00acf1ebd4u128).calculate_p2pkh_address(false).iter().zip([49, 70, 100, 89, 57, 55, 106, 117, 85, 82, 70, 107, 55, 53, 117, 81, 89, 85, 74, 114, 82, 56, 85, 106, 119, 105, 72, 69, 81, 77, 88, 97, 110, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x399667ea287b2a6ec1ffd8e41b442662u128, 0xa5e2f3b8f884af34abe72c117a7e150fu128).calculate_p2pkh_address(false).iter().zip([49, 65, 115, 75, 51, 113, 86, 114, 82, 71, 76, 105, 118, 87, 74, 78, 99, 112, 98, 117, 52, 72, 105, 107, 81, 72, 114, 76, 110, 71, 74, 117, 107, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2314224d8b439f6f22fa471109b7e932u128, 0xfd9f7c21834bb217c1ea9b9dd14088a4u128).calculate_p2pkh_address(false).iter().zip([49, 69, 117, 77, 119, 97, 116, 119, 122, 75, 75, 106, 53, 105, 111, 57, 88, 53, 109, 87, 76, 116, 87, 84, 102, 57, 119, 100, 104, 89, 118, 83, 69, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4f1ff64e8dfc02d0c7e036748297b072u128, 0x9b0a131cb4cab5e76fc39e75b4248717u128).calculate_p2pkh_address(false).iter().zip([49, 66, 111, 99, 113, 97, 70, 53, 72, 75, 99, 84, 49, 114, 110, 98, 100, 83, 110, 90, 78, 83, 101, 109, 82, 115, 90, 118, 85, 118, 116, 81, 98, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x62af2c3e9a9bceaba65448551ca40be9u128, 0x25271e53c5827859b93b1bbc2d28e287u128).calculate_p2pkh_address(false).iter().zip([49, 54, 53, 83, 83, 75, 82, 83, 112, 120, 100, 97, 65, 81, 85, 97, 52, 50, 83, 57, 90, 70, 81, 100, 89, 117, 51, 50, 115, 90, 90, 51, 65, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x67e6b6a817c411a4806dd67a4c6d9d2bu128, 0x7aa3fa9e0c0262b573a49b138a73c438u128).calculate_p2pkh_address(false).iter().zip([49, 53, 117, 88, 54, 74, 69, 89, 88, 83, 122, 69, 69, 55, 88, 118, 76, 98, 66, 53, 74, 85, 104, 87, 110, 118, 104, 77, 55, 71, 74, 116, 85, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1d945e1b4d8717a228a8df68d3bcacaau128, 0x19688013efa1d528fa0b42efb0b8df14u128).calculate_p2pkh_address(false).iter().zip([49, 71, 74, 80, 80, 56, 71, 112, 97, 116, 67, 55, 51, 77, 97, 55, 100, 52, 117, 119, 53, 118, 52, 70, 112, 72, 67, 52, 116, 121, 116, 107, 107, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9749c83c15ad52e6955a5992ca6055b1u128, 0xbe008950c2fe1a1893249af1573e7ea8u128).calculate_p2pkh_address(false).iter().zip([49, 77, 116, 76, 81, 98, 71, 65, 107, 71, 98, 50, 53, 84, 97, 69, 119, 99, 54, 115, 107, 69, 74, 100, 52, 109, 69, 52, 111, 78, 66, 122, 102, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4342fe77b8d8902d426a7fd33678f49au128, 0xe0b4633e9667d621c11451d349338bf0u128).calculate_p2pkh_address(false).iter().zip([49, 74, 81, 106, 82, 99, 51, 107, 89, 70, 120, 106, 50, 110, 75, 105, 55, 120, 114, 77, 75, 120, 54, 112, 90, 68, 55, 103, 72, 54, 114, 57, 90, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1a903be6166c0a3bd0259a8ad1ff20dcu128, 0x5b8b42b6ead80ab5a1b2c561e38fb9a8u128).calculate_p2pkh_address(false).iter().zip([49, 55, 85, 115, 102, 80, 85, 49, 55, 54, 101, 85, 100, 83, 57, 101, 109, 98, 71, 115, 66, 120, 112, 78, 76, 115, 85, 66, 117, 121, 68, 72, 102, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x232572312dee057952e6ac11c7fae631u128, 0xe798e71f43a22f246dfbf005848af467u128).calculate_p2pkh_address(false).iter().zip([49, 57, 66, 100, 83, 50, 75, 102, 75, 82, 106, 89, 72, 122, 102, 119, 99, 55, 69, 102, 97, 84, 101, 102, 53, 78, 97, 117, 122, 81, 86, 112, 50, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x24538c74f63fdb6811ced41b6fdfb07eu128, 0xd28151a2f16bb44e66a652e388f9a2d6u128).calculate_p2pkh_address(false).iter().zip([49, 66, 105, 80, 85, 114, 90, 117, 68, 81, 105, 102, 75, 50, 113, 53, 55, 102, 86, 84, 65, 72, 83, 84, 120, 122, 88, 114, 74, 98, 74, 98, 65, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa68e0db844028364b7981913ddb40003u128, 0x9ff39fa5f61b18f15fed51b6802b3ccbu128).calculate_p2pkh_address(false).iter().zip([49, 77, 118, 98, 97, 100, 118, 55, 120, 51, 67, 111, 107, 81, 103, 68, 74, 116, 77, 102, 50, 76, 98, 100, 74, 116, 57, 107, 107, 100, 99, 106, 113, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7c833d122bc4b65aa8e8f1f98d7d9c29u128, 0x1dd64e688fab27327f0b663c58dc6ddcu128).calculate_p2pkh_address(false).iter().zip([49, 51, 97, 86, 114, 86, 85, 52, 81, 116, 98, 65, 84, 109, 89, 120, 112, 67, 110, 112, 100, 109, 77, 122, 100, 97, 66, 86, 55, 56, 86, 88, 100, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8dc24a9efe6a4fd5e887bdf960bd1b8fu128, 0xfc861cae74812c3270a18c609c6c2a67u128).calculate_p2pkh_address(false).iter().zip([49, 68, 78, 70, 86, 122, 115, 120, 56, 74, 115, 105, 55, 70, 107, 118, 87, 107, 106, 120, 104, 65, 72, 72, 78, 116, 112, 56, 78, 89, 51, 116, 116, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3226413f589d805bde3859ca13d9c5fcu128, 0x3c1e863825032747d73b6c990cf58da6u128).calculate_p2pkh_address(false).iter().zip([49, 57, 100, 101, 83, 117, 106, 54, 87, 70, 68, 78, 104, 105, 70, 87, 88, 78, 117, 101, 122, 114, 113, 97, 69, 118, 52, 82, 65, 51, 56, 120, 54, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1089f6db403bfe0e60ccd3fe353f8b5fu128, 0xd8727f929502dbc5e7e1d06fc8fa75c4u128).calculate_p2pkh_address(false).iter().zip([49, 55, 90, 117, 51, 107, 82, 57, 104, 99, 70, 111, 72, 120, 80, 106, 82, 66, 57, 52, 83, 112, 88, 74, 89, 107, 74, 100, 50, 52, 87, 50, 52, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xda1cf1a6d2265281d20168532d2190abu128, 0x2adac881f82ed66854f8f3dafa439107u128).calculate_p2pkh_address(false).iter().zip([49, 77, 86, 114, 110, 80, 116, 110, 69, 51, 109, 101, 56, 113, 70, 52, 100, 68, 51, 53, 72, 50, 90, 74, 97, 86, 80, 57, 120, 78, 121, 85, 118, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x31ddc024ef4cbf49583e5196ac1d0bc8u128, 0x700c10e8ce531a6d588206996dbc67a6u128).calculate_p2pkh_address(false).iter().zip([49, 52, 52, 72, 114, 98, 101, 97, 52, 115, 68, 114, 83, 111, 54, 90, 82, 74, 76, 66, 89, 56, 103, 110, 50, 98, 101, 99, 119, 89, 107, 105, 103, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1ca238dffa1a4355806462521a20c90au128, 0x3d9a4e6d2a9290c06f1c415843a2f0d2u128).calculate_p2pkh_address(false).iter().zip([49, 67, 97, 99, 57, 112, 114, 99, 115, 103, 98, 101, 105, 66, 50, 118, 113, 56, 89, 78, 88, 99, 81, 114, 101, 78, 77, 114, 84, 89, 109, 109, 53, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3edb06516d8e98c7142b1fb28d5e4d1bu128, 0xee309fb6bda220027afd74e5245b0514u128).calculate_p2pkh_address(false).iter().zip([49, 78, 112, 49, 81, 120, 106, 80, 82, 72, 100, 97, 100, 90, 52, 103, 100, 89, 89, 98, 51, 77, 70, 66, 98, 100, 75, 75, 54, 67, 50, 87, 77, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1ca6dc190bedc863d0f6a9a7be0998c3u128, 0x4847261a422c3ab7be906393104eea50u128).calculate_p2pkh_address(false).iter().zip([49, 67, 113, 100, 50, 113, 54, 83, 80, 86, 83, 49, 97, 75, 113, 120, 69, 122, 107, 113, 88, 115, 71, 103, 100, 88, 72, 76, 81, 118, 111, 97, 77, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb69e8bebfd0e5aa29ad5a9533f22c817u128, 0xbd2e9300952affe7a90a8fd91e5c315cu128).calculate_p2pkh_address(false).iter().zip([49, 50, 116, 76, 99, 120, 89, 104, 78, 72, 111, 86, 69, 109, 77, 81, 106, 90, 84, 84, 120, 66, 76, 67, 51, 75, 120, 56, 52, 75, 68, 97, 81, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7ac74bea3eb814e317b370376780846au128, 0xa09bf00732c06c2abd77303229a81e1cu128).calculate_p2pkh_address(false).iter().zip([49, 52, 102, 111, 111, 90, 65, 119, 50, 97, 100, 66, 110, 90, 55, 52, 89, 90, 112, 55, 67, 118, 104, 76, 105, 75, 104, 120, 116, 83, 53, 57, 52, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x754b32ae9ef9e0260140f1fa80df39cfu128, 0x40ee189e23eea87926ea050468f18ce1u128).calculate_p2pkh_address(false).iter().zip([49, 68, 81, 113, 122, 72, 52, 88, 82, 78, 100, 85, 103, 68, 98, 116, 97, 71, 76, 78, 120, 97, 103, 98, 112, 86, 87, 57, 114, 114, 119, 52, 122, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2b67c2a251d06361bb81f97bc8b538ffu128, 0x323af4773eb400621ebbd6eccf3b1ceau128).calculate_p2pkh_address(false).iter().zip([49, 66, 106, 113, 112, 66, 98, 97, 51, 109, 69, 115, 117, 89, 114, 57, 121, 67, 67, 117, 118, 67, 104, 87, 117, 107, 71, 115, 101, 121, 66, 105, 109, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xaff8b7306a51be618770f0a0198bececu128, 0x9c53125b7de7d9cdb92f204e4442f5dbu128).calculate_p2pkh_address(false).iter().zip([49, 72, 81, 51, 82, 111, 118, 71, 116, 78, 67, 72, 69, 88, 80, 116, 69, 57, 77, 82, 49, 115, 87, 105, 106, 97, 87, 84, 106, 67, 52, 85, 100, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x916326031d0d94a50ba4a6704daad0b5u128, 0x5b4188d167687c2151bd56ba8a66b6fbu128).calculate_p2pkh_address(false).iter().zip([49, 69, 84, 87, 89, 90, 99, 115, 71, 53, 111, 86, 119, 68, 98, 87, 49, 103, 57, 87, 122, 83, 72, 87, 100, 85, 56, 82, 106, 87, 89, 98, 114, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc210c8daa8f05899542638b7c2bb8eb7u128, 0xc1ba4b5f7331577f66a37c13d2c9098au128).calculate_p2pkh_address(false).iter().zip([49, 71, 88, 86, 107, 68, 105, 109, 76, 56, 57, 72, 109, 90, 106, 55, 109, 103, 87, 70, 103, 70, 83, 66, 56, 120, 75, 66, 106, 57, 99, 111, 113, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xce5121542ac4394fe64e8b5438efe06u128, 0x8c9794cd7ef3f65b9165fadb40d2adf9u128).calculate_p2pkh_address(false).iter().zip([49, 77, 113, 98, 116, 117, 52, 89, 101, 97, 121, 114, 66, 56, 112, 110, 119, 101, 67, 114, 103, 49, 122, 107, 116, 105, 74, 84, 105, 68, 80, 103, 69, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb8f53f1699416b160e0ff2e1d40e41a0u128, 0x3faf76fbf55f8df42d8661fe9865f056u128).calculate_p2pkh_address(false).iter().zip([49, 51, 70, 51, 69, 80, 100, 81, 107, 103, 70, 103, 77, 110, 77, 57, 71, 89, 116, 50, 112, 66, 103, 53, 53, 98, 98, 55, 117, 56, 101, 51, 101, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb1ee8d62ecf62f493d75f6275206f627u128, 0x52d54f579252bdcaee7b91e8ae43a6fau128).calculate_p2pkh_address(false).iter().zip([49, 78, 72, 69, 82, 89, 76, 101, 82, 106, 115, 110, 87, 66, 75, 111, 66, 105, 68, 56, 121, 118, 77, 109, 50, 102, 76, 121, 107, 121, 100, 103, 82, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8b340c55d2475900ede489328d87946u128, 0x10a59174e50dae254b89ddd70d22b706u128).calculate_p2pkh_address(false).iter().zip([49, 56, 72, 51, 71, 101, 113, 77, 98, 71, 53, 120, 56, 56, 86, 110, 76, 50, 86, 72, 102, 86, 114, 86, 86, 53, 70, 70, 120, 75, 80, 83, 51, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x11d5372d0635215e6fdcac61639ccaa7u128, 0x5f0dae4edbf85929c8d0a21cc065acc0u128).calculate_p2pkh_address(false).iter().zip([49, 67, 110, 109, 113, 75, 81, 110, 52, 77, 49, 84, 98, 100, 57, 50, 55, 103, 66, 109, 74, 106, 107, 104, 68, 98, 102, 67, 54, 56, 83, 102, 83, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe83eab4a655b90d29ec466ab8100e991u128, 0x8125ff098465844ae98bab57825fbb30u128).calculate_p2pkh_address(false).iter().zip([49, 80, 77, 115, 54, 80, 74, 57, 77, 115, 76, 74, 84, 52, 49, 117, 55, 75, 57, 76, 52, 75, 105, 116, 65, 99, 85, 100, 65, 100, 75, 56, 74, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x11ded407460c2bd3b39708c5979aac1au128, 0x9c002bb57d66d7e7b6dd17f10f90cfb3u128).calculate_p2pkh_address(false).iter().zip([0, 49, 116, 68, 69, 102, 105, 115, 103, 81, 86, 67, 68, 107, 54, 66, 109, 112, 54, 103, 107, 51, 55, 113, 100, 112, 106, 102, 112, 104, 66, 57, 86, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xae9a8daf970405f4c5768e9558859a01u128, 0xdf499fe93bb6d7a153aeb948b99bd5fbu128).calculate_p2pkh_address(false).iter().zip([49, 80, 102, 87, 57, 104, 57, 68, 106, 116, 49, 74, 109, 98, 115, 105, 77, 111, 98, 118, 118, 53, 52, 69, 114, 82, 52, 83, 66, 101, 110, 80, 103, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8877660f982c54f7e766c3f661658b91u128, 0xed0fbae5359e54306148315076d9fd4au128).calculate_p2pkh_address(false).iter().zip([49, 50, 57, 72, 66, 83, 115, 109, 87, 51, 53, 69, 76, 77, 89, 88, 118, 98, 49, 76, 84, 90, 81, 99, 52, 71, 49, 70, 70, 69, 101, 70, 68, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x49c2acbebf71d7e10784447662dbe566u128, 0xa8967dcf8a4bb7993a25c17ffa650852u128).calculate_p2pkh_address(false).iter().zip([49, 69, 68, 72, 75, 56, 110, 112, 72, 118, 118, 97, 111, 114, 102, 81, 67, 121, 98, 82, 103, 88, 67, 116, 51, 89, 103, 121, 107, 117, 51, 51, 66, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x36413d8322cd722ad018d2c898549757u128, 0x2b5b67792598bb463ec97a849d06a17eu128).calculate_p2pkh_address(false).iter().zip([49, 53, 77, 70, 71, 77, 53, 118, 51, 83, 50, 80, 113, 114, 80, 66, 54, 54, 114, 121, 82, 121, 81, 88, 88, 102, 88, 104, 109, 75, 83, 122, 89, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfcbcb44e212edb099c235050d5e669fau128, 0xbf3c559a9524c3fba16da3b5e41f2e34u128).calculate_p2pkh_address(false).iter().zip([49, 65, 81, 85, 87, 114, 71, 98, 83, 107, 80, 115, 83, 122, 112, 84, 113, 113, 120, 110, 112, 106, 69, 113, 97, 102, 105, 113, 85, 88, 87, 81, 122, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa2edee572b0232e1ea718b68d7117c9au128, 0x8ded2093d48faa03945362531acc0258u128).calculate_p2pkh_address(false).iter().zip([49, 65, 74, 57, 75, 109, 116, 118, 84, 90, 107, 117, 100, 78, 121, 51, 89, 85, 80, 52, 51, 82, 103, 120, 113, 70, 54, 89, 85, 113, 86, 56, 88, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x585508d1dc8e7d388057b571750a7357u128, 0x248af6175c46437399a9f94b3aebf8f9u128).calculate_p2pkh_address(false).iter().zip([49, 81, 74, 81, 98, 77, 102, 97, 67, 57, 75, 117, 88, 82, 97, 83, 111, 116, 120, 118, 77, 77, 50, 101, 116, 98, 117, 67, 74, 115, 90, 106, 69, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf692aef4caef45ecf1c2315d77cab92u128, 0x9007975d0c4a9b152f027f412843ae73u128).calculate_p2pkh_address(false).iter().zip([49, 69, 71, 74, 117, 81, 85, 100, 85, 109, 118, 82, 112, 86, 81, 51, 78, 86, 55, 56, 121, 115, 104, 78, 52, 55, 87, 98, 78, 101, 97, 100, 90, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x259fc648b380bfca9ac26a4696d3d9f8u128, 0x646455da23d2d3bcd7aa08bdde9d4c5au128).calculate_p2pkh_address(false).iter().zip([49, 74, 111, 121, 70, 121, 57, 122, 116, 87, 120, 81, 65, 114, 110, 82, 76, 56, 57, 106, 74, 66, 56, 118, 109, 122, 65, 66, 75, 75, 101, 90, 113, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x137db80abf238578425f741caf72ac62u128, 0xb719eb6033fc55d7391c2ff3f393cef1u128).calculate_p2pkh_address(false).iter().zip([49, 52, 90, 53, 53, 99, 74, 81, 105, 88, 116, 112, 112, 112, 105, 109, 54, 106, 100, 114, 66, 102, 107, 67, 121, 49, 78, 81, 55, 65, 68, 109, 70, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x43f698bf10edd252a8bb04b275a72944u128, 0x5cb6fa186dccc6a12acc061623a7df71u128).calculate_p2pkh_address(false).iter().zip([49, 54, 116, 69, 72, 67, 88, 107, 120, 66, 67, 89, 81, 110, 57, 67, 89, 121, 49, 83, 51, 104, 118, 88, 65, 100, 50, 98, 83, 89, 105, 86, 56, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcc7705d16f583c16b158e70d3005f69bu128, 0xb7f428c141e33bbc87e3d560f2c83934u128).calculate_p2pkh_address(false).iter().zip([49, 78, 106, 83, 101, 112, 98, 102, 102, 69, 54, 83, 112, 102, 70, 118, 122, 76, 118, 99, 120, 118, 100, 115, 106, 80, 70, 101, 55, 106, 109, 118, 70, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8fa30a92f6a5ec50473c6e963e87f9b6u128, 0x65bcf200c595f672894043caba387a5eu128).calculate_p2pkh_address(false).iter().zip([49, 69, 110, 86, 114, 118, 102, 72, 52, 117, 49, 83, 113, 57, 106, 111, 86, 97, 116, 70, 116, 72, 76, 87, 111, 121, 99, 113, 89, 65, 118, 104, 99, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x47ff963fe4673d733c4de12be7f0bfecu128, 0xb9795ac6c5600cbd59e29bf7035a8dabu128).calculate_p2pkh_address(false).iter().zip([49, 56, 57, 110, 78, 110, 76, 80, 87, 103, 98, 98, 116, 70, 118, 120, 66, 115, 107, 119, 103, 69, 106, 86, 49, 87, 80, 67, 119, 106, 122, 114, 106, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc796ae53cf67713ec31ce81919afa56au128, 0x4a48c642aefcd6f198ad034a938a9e36u128).calculate_p2pkh_address(false).iter().zip([49, 75, 53, 51, 68, 75, 114, 111, 57, 103, 76, 71, 117, 112, 56, 100, 107, 120, 117, 103, 115, 50, 104, 77, 49, 90, 75, 118, 90, 55, 66, 122, 105, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x974108d4ee9ed76713dd566b86427c74u128, 0xc06111d37ab23e040a355e1f30396629u128).calculate_p2pkh_address(false).iter().zip([49, 80, 75, 85, 70, 77, 71, 65, 90, 118, 78, 83, 84, 51, 54, 82, 80, 68, 87, 87, 97, 57, 75, 109, 49, 56, 74, 102, 104, 55, 66, 82, 66, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd95d6bea1b316ff007e0a18610626a3du128, 0x1f3c21911206d7a38a6eb8c7993d1217u128).calculate_p2pkh_address(false).iter().zip([49, 70, 98, 102, 53, 74, 77, 110, 117, 103, 52, 116, 100, 97, 57, 107, 53, 53, 111, 53, 118, 77, 71, 120, 78, 117, 57, 76, 90, 89, 105, 116, 83, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2865ce5f73e94925f3cbec19dc818a5cu128, 0x7404445da263670ea1c6374f940bbbeeu128).calculate_p2pkh_address(false).iter().zip([0, 49, 99, 83, 90, 109, 57, 78, 66, 117, 104, 86, 102, 102, 69, 82, 86, 71, 100, 114, 55, 107, 122, 75, 52, 77, 83, 66, 114, 120, 102, 70, 52, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x60848d9e2007000ba3a945560918e736u128, 0x8287908329d1a0611bbdcc1032290184u128).calculate_p2pkh_address(false).iter().zip([49, 74, 106, 49, 72, 115, 87, 57, 71, 84, 67, 74, 89, 53, 54, 119, 112, 114, 69, 71, 70, 119, 111, 102, 57, 87, 110, 113, 99, 86, 72, 104, 98, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x29ded8b11de061ae8bfcf4acef3c0e88u128, 0x398f8746c32873a72f3cb52978df1461u128).calculate_p2pkh_address(false).iter().zip([49, 66, 86, 57, 110, 89, 99, 49, 121, 109, 78, 67, 75, 119, 53, 74, 104, 115, 114, 105, 74, 90, 115, 103, 83, 101, 97, 83, 110, 55, 72, 76, 98, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc82bace5a1934dd38a46bbaaf8f1ccc3u128, 0x8dc4fd892b5d199efe8db8a89ba2739u128).calculate_p2pkh_address(false).iter().zip([49, 71, 115, 98, 113, 118, 75, 117, 51, 87, 117, 70, 76, 111, 86, 114, 115, 67, 81, 109, 90, 112, 69, 65, 67, 104, 54, 109, 80, 65, 52, 122, 71, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2e192cfc9df9f6da4b7158029d39265du128, 0x8671fbd4c6f00d030933fc6fb5deb9f3u128).calculate_p2pkh_address(false).iter().zip([49, 68, 78, 76, 117, 65, 99, 87, 67, 114, 49, 67, 103, 90, 80, 102, 110, 115, 121, 89, 88, 106, 89, 122, 54, 74, 75, 49, 80, 105, 76, 113, 88, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7664360307d009a664f703ff7c625027u128, 0x7f1acc1dbfa845f52eb4d79f24462b0du128).calculate_p2pkh_address(false).iter().zip([49, 53, 75, 69, 56, 98, 83, 52, 105, 113, 120, 68, 85, 121, 70, 100, 85, 72, 82, 74, 65, 104, 101, 109, 87, 70, 84, 102, 78, 103, 68, 99, 84, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9ba69af660a13a3bc3351ed846211ce1u128, 0x1356dce090b85f36d8a940cfbe1efedfu128).calculate_p2pkh_address(false).iter().zip([49, 55, 77, 107, 70, 76, 51, 72, 54, 50, 97, 101, 116, 97, 56, 78, 65, 68, 75, 104, 84, 113, 86, 103, 71, 71, 57, 74, 103, 104, 121, 106, 77, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1465728b23d9615e17586fc2ca9a4ba0u128, 0x847f662de86c7e393538eab3ade25567u128).calculate_p2pkh_address(false).iter().zip([49, 80, 107, 99, 112, 82, 83, 86, 118, 50, 50, 71, 76, 104, 102, 113, 121, 56, 51, 104, 105, 54, 81, 51, 55, 111, 55, 55, 86, 102, 82, 71, 106, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb67d43fb742a893d34e1be7182336720u128, 0x695ad4d5bd368ef7721575edc0f5424u128).calculate_p2pkh_address(false).iter().zip([0, 49, 88, 103, 110, 71, 110, 88, 50, 67, 89, 106, 83, 120, 103, 67, 51, 121, 115, 101, 71, 116, 104, 75, 49, 67, 50, 80, 81, 103, 70, 116, 104, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9088e8cd43d7d6053fcc0e69c48852dcu128, 0x94e6755a937b7243d2bf8ef38a0970edu128).calculate_p2pkh_address(false).iter().zip([49, 52, 99, 109, 101, 106, 120, 98, 55, 70, 56, 83, 109, 118, 118, 89, 57, 104, 114, 51, 71, 112, 80, 98, 99, 90, 56, 121, 67, 87, 113, 119, 86, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfb6555aecc79ebc83d3387fd0479a050u128, 0xfd694a053c908822557682659cb22783u128).calculate_p2pkh_address(false).iter().zip([49, 68, 54, 90, 77, 113, 121, 115, 82, 109, 76, 116, 81, 74, 54, 69, 115, 66, 119, 78, 107, 68, 75, 120, 119, 107, 66, 51, 69, 114, 66, 102, 70, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd8ecb516e0c277d99eef8f70a3a15175u128, 0x9289abc43004d7772586991a0f6fcb5du128).calculate_p2pkh_address(false).iter().zip([49, 66, 57, 99, 87, 52, 101, 113, 88, 105, 72, 54, 88, 52, 100, 50, 70, 89, 72, 120, 113, 55, 77, 107, 97, 66, 56, 112, 101, 71, 82, 100, 111, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2c6481cf7aa58cb5911dea116540915cu128, 0x8f03d2330a6393e0aff1f1a486b3b00du128).calculate_p2pkh_address(false).iter().zip([49, 53, 105, 101, 113, 89, 84, 104, 77, 83, 117, 120, 81, 106, 67, 49, 105, 100, 116, 103, 99, 54, 89, 121, 51, 65, 76, 117, 119, 97, 100, 82, 100, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa1a4093037cc59d6d8fdc84e6525e9bbu128, 0x74c914cd4080734d5c91e1ae9154899du128).calculate_p2pkh_address(false).iter().zip([49, 80, 106, 102, 115, 51, 122, 113, 105, 99, 52, 111, 104, 65, 115, 119, 105, 116, 55, 111, 116, 74, 57, 86, 121, 74, 77, 109, 122, 78, 56, 114, 83, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa5cd602729d9084bb781f8f3af470a9bu128, 0xaa4eb5497172ece7586a316031f98acbu128).calculate_p2pkh_address(false).iter().zip([49, 57, 53, 120, 89, 105, 55, 57, 104, 115, 83, 75, 99, 122, 112, 112, 53, 67, 112, 120, 101, 78, 57, 102, 51, 74, 78, 97, 110, 106, 116, 90, 86, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x22d3a4f0d61752e75ef1558a367ef26au128, 0x8f9fb537551987dbb7c9fa9811bbdc49u128).calculate_p2pkh_address(false).iter().zip([49, 50, 71, 57, 81, 68, 120, 116, 53, 54, 119, 68, 117, 65, 121, 75, 102, 54, 88, 71, 82, 104, 53, 110, 70, 101, 97, 74, 85, 104, 107, 66, 103, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe8390362cf1c05bf6f017cc1f3493daau128, 0xb367eef0e9cb129e4e6fe9b84c194dfdu128).calculate_p2pkh_address(false).iter().zip([49, 54, 90, 111, 84, 103, 109, 101, 121, 51, 119, 102, 83, 67, 71, 70, 101, 97, 82, 102, 100, 117, 114, 111, 87, 65, 106, 85, 85, 87, 71, 67, 99, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa54a5c300cc78c72af0f10876341acb1u128, 0x5954ee04897cc94e3190f72a06cd249eu128).calculate_p2pkh_address(false).iter().zip([0, 49, 55, 74, 76, 122, 104, 87, 67, 75, 49, 90, 75, 72, 70, 70, 121, 55, 89, 106, 111, 49, 110, 97, 118, 84, 90, 116, 85, 80, 103, 83, 116, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x23f79d2a29d04aed2cbdfc6b076e6a67u128, 0x82790a3982b081e90452dc1fbcc772e4u128).calculate_p2pkh_address(false).iter().zip([49, 66, 99, 117, 105, 67, 68, 114, 66, 86, 114, 117, 118, 117, 54, 104, 105, 110, 105, 72, 78, 104, 57, 121, 100, 89, 80, 98, 119, 102, 118, 70, 89, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb134b73246b2d89a97033024c7a560fu128, 0x1cabafc2d39d378a46bd42da93b11be4u128).calculate_p2pkh_address(false).iter().zip([49, 56, 76, 55, 112, 87, 110, 119, 113, 119, 78, 80, 81, 116, 81, 116, 78, 71, 55, 121, 102, 90, 86, 80, 65, 75, 70, 104, 77, 55, 55, 119, 120, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x104635ddd1467b8094bfead543ed6d75u128, 0xf3f74b81e794f08cd350a3a4c36be067u128).calculate_p2pkh_address(false).iter().zip([49, 54, 122, 120, 102, 107, 116, 110, 115, 67, 101, 89, 51, 69, 105, 101, 57, 98, 65, 110, 78, 77, 122, 49, 65, 83, 84, 54, 111, 70, 81, 114, 113, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4761c8e7e748d35ba58ef0a0bb22912u128, 0xc05b2f1a45a31c37cf350d99bb4adc85u128).calculate_p2pkh_address(false).iter().zip([49, 74, 97, 67, 56, 71, 113, 112, 49, 113, 76, 111, 88, 113, 70, 107, 99, 90, 105, 120, 69, 72, 66, 66, 102, 103, 82, 78, 75, 104, 54, 66, 67, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x23eb2225d692fdcf6768c998fc869b35u128, 0xb087f5d9cd725c993ef5df82eee663b0u128).calculate_p2pkh_address(false).iter().zip([49, 53, 105, 115, 102, 70, 55, 50, 122, 113, 119, 56, 67, 82, 77, 103, 80, 71, 74, 52, 81, 77, 89, 112, 56, 119, 117, 109, 104, 76, 53, 85, 75, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x29939271400279e0a6f1690c735222bfu128, 0x1b1449d3d3fd44091751794a91580e3cu128).calculate_p2pkh_address(false).iter().zip([49, 80, 80, 101, 85, 87, 119, 87, 66, 101, 103, 109, 53, 106, 104, 82, 55, 122, 50, 107, 86, 56, 82, 72, 66, 76, 75, 66, 122, 120, 74, 106, 110, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xae8875c6ed5ab4ae955921724d3df26au128, 0x58161c03842d4d2181f1965567c5b656u128).calculate_p2pkh_address(false).iter().zip([49, 80, 57, 111, 55, 107, 66, 72, 78, 110, 53, 113, 49, 69, 114, 81, 52, 67, 54, 71, 112, 69, 117, 89, 72, 99, 56, 100, 78, 103, 88, 56, 122, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbeb9382e0713d9232e80ca20bcce4fa8u128, 0x399ea82d9eeae236cef3b5f03e78f056u128).calculate_p2pkh_address(false).iter().zip([49, 74, 112, 57, 71, 109, 121, 103, 86, 120, 90, 119, 72, 113, 113, 104, 87, 75, 69, 104, 56, 70, 85, 98, 57, 56, 116, 57, 116, 83, 52, 51, 101, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x176aee0d0fce82764694687cb71c81d8u128, 0x4a68b16db0723b83e88f80471c5764bfu128).calculate_p2pkh_address(false).iter().zip([49, 75, 70, 76, 70, 66, 104, 104, 121, 84, 109, 112, 117, 65, 68, 106, 80, 76, 80, 67, 80, 80, 86, 110, 99, 72, 72, 117, 120, 77, 99, 72, 67, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7b80f503d38427fb39684e67efe0cfb3u128, 0xea018eb7d25fe9b09d25c6e256e34b17u128).calculate_p2pkh_address(false).iter().zip([49, 65, 97, 51, 103, 72, 89, 112, 89, 120, 115, 111, 90, 99, 85, 72, 53, 84, 99, 77, 84, 104, 51, 98, 116, 76, 57, 70, 55, 104, 69, 66, 76, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd2917937f913d59cf26bff5223077539u128, 0x4c8550665dbaf0f50edb33a0ea1fcc32u128).calculate_p2pkh_address(false).iter().zip([49, 78, 69, 103, 106, 105, 113, 50, 98, 103, 57, 98, 75, 72, 119, 98, 84, 122, 113, 115, 107, 114, 97, 109, 82, 71, 116, 83, 88, 86, 84, 80, 88, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x12a83b88ec751435ba3f51dcbdb7a572u128, 0xa449127c1e3a0cc5e1a6256a653dfa94u128).calculate_p2pkh_address(false).iter().zip([49, 70, 68, 52, 75, 49, 87, 98, 90, 120, 113, 116, 83, 54, 67, 103, 57, 65, 66, 114, 70, 104, 90, 56, 102, 117, 49, 106, 101, 107, 102, 119, 83, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8e1423df425d6f1315d77972ec2a469cu128, 0xccc7f27f05206b6c0abb773e1cb080a4u128).calculate_p2pkh_address(false).iter().zip([49, 76, 110, 90, 100, 107, 50, 89, 111, 52, 103, 88, 119, 57, 53, 87, 52, 81, 121, 74, 88, 106, 103, 56, 111, 111, 72, 71, 100, 101, 120, 68, 70, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x67a5a76503dee96ee99e5df207c4dba0u128, 0xac5f5322be5a8e346b3abb78e0726939u128).calculate_p2pkh_address(false).iter().zip([49, 76, 102, 86, 65, 51, 76, 65, 77, 100, 121, 105, 74, 119, 109, 69, 67, 87, 119, 122, 77, 105, 57, 74, 89, 54, 119, 68, 122, 74, 88, 52, 104, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcf3793008709a1b4ac17fd3c6ca23f20u128, 0xbfe6e0a93ba02226480f6b27766502f7u128).calculate_p2pkh_address(false).iter().zip([49, 66, 117, 114, 102, 86, 85, 49, 49, 57, 52, 87, 57, 77, 113, 52, 100, 107, 76, 114, 56, 97, 89, 103, 50, 82, 56, 82, 85, 115, 75, 54, 105, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd9c21c634160bd10c72df55017944b7au128, 0x12491b0c2e0565b2ac4e6f6b3a09c45eu128).calculate_p2pkh_address(false).iter().zip([0, 49, 119, 72, 71, 115, 89, 86, 120, 86, 90, 104, 57, 72, 121, 52, 101, 110, 84, 71, 77, 88, 99, 83, 88, 51, 82, 98, 53, 98, 78, 77, 51, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x65ac25487cb62af012bc1cbd26e40b6u128, 0x2f968d65453c85ffaeec1b28cc853e25u128).calculate_p2pkh_address(false).iter().zip([49, 76, 113, 84, 53, 54, 83, 110, 83, 117, 87, 111, 88, 74, 104, 115, 99, 52, 56, 49, 86, 86, 67, 120, 106, 101, 52, 52, 70, 82, 78, 113, 87, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc7feb08d12c3c2feac5968b5af466d31u128, 0x95993275ee30dd273cb5007a9b9584fu128).calculate_p2pkh_address(false).iter().zip([49, 70, 50, 112, 112, 68, 105, 74, 99, 116, 117, 115, 88, 114, 100, 87, 119, 104, 88, 121, 115, 105, 53, 104, 84, 105, 122, 115, 68, 54, 78, 82, 72, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x211b0483d083d731211d9cef0fe1ec13u128, 0x806ad6b9017585ce4ec3bb12e34ef2abu128).calculate_p2pkh_address(false).iter().zip([49, 69, 110, 75, 54, 97, 102, 83, 76, 84, 101, 72, 89, 85, 51, 99, 99, 113, 49, 103, 49, 110, 104, 71, 117, 54, 102, 70, 72, 85, 113, 75, 85, 87].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdb94302eb5e29e9ffddb39d95956ab33u128, 0x809a307e17ad56aad76d9bde951e0468u128).calculate_p2pkh_address(false).iter().zip([49, 52, 122, 97, 118, 87, 112, 121, 56, 118, 74, 113, 78, 89, 56, 104, 113, 106, 52, 97, 49, 76, 107, 68, 55, 84, 90, 67, 67, 103, 116, 100, 87, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7140e6a04fe4fb3f2030d99f3c58a50fu128, 0xae63a90c477b49b66321bd1da0aee8ceu128).calculate_p2pkh_address(false).iter().zip([49, 65, 67, 90, 49, 56, 52, 103, 65, 101, 75, 107, 82, 56, 111, 69, 83, 71, 52, 78, 77, 77, 65, 86, 82, 78, 111, 109, 75, 113, 109, 83, 74, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x669da3b7181c115f8af0f02d95c6d7afu128, 0xb496d93ab9c71501de7533424a4b4207u128).calculate_p2pkh_address(false).iter().zip([49, 52, 120, 119, 101, 81, 110, 85, 106, 116, 89, 76, 104, 57, 107, 50, 72, 86, 77, 88, 98, 99, 51, 77, 50, 75, 71, 89, 118, 66, 119, 102, 89, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7ad1c9c5f6ff87172a084dc4e9691369u128, 0x92b8c043a51c83357b98e7cc4abd630fu128).calculate_p2pkh_address(false).iter().zip([49, 80, 74, 118, 120, 111, 49, 97, 67, 105, 84, 111, 102, 87, 102, 110, 98, 104, 57, 90, 89, 112, 121, 82, 104, 103, 51, 86, 77, 97, 103, 78, 65, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x37c36f097d99f3a5c1b8714ad7e4f7d5u128, 0x8e6749598e2939520120391f9dba5833u128).calculate_p2pkh_address(false).iter().zip([49, 70, 113, 88, 118, 82, 51, 97, 78, 77, 119, 110, 102, 116, 90, 67, 57, 66, 52, 106, 49, 51, 113, 117, 120, 117, 86, 112, 114, 53, 107, 84, 81, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe23ce2a808ff437cc4f1f2838283683au128, 0xe4bcffe23624600b9f313f18a2809ca3u128).calculate_p2pkh_address(false).iter().zip([49, 75, 88, 88, 122, 83, 109, 121, 103, 106, 66, 77, 72, 82, 86, 89, 88, 117, 88, 75, 88, 90, 77, 117, 121, 86, 114, 78, 55, 99, 76, 88, 87, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa5381fca180b91062ebeceaff6a8f3cu128, 0xd1d46df5ba36ac252a5ec0164c64c216u128).calculate_p2pkh_address(false).iter().zip([49, 70, 78, 118, 117, 119, 112, 99, 56, 69, 51, 84, 66, 77, 83, 104, 85, 82, 106, 70, 74, 77, 72, 50, 85, 110, 98, 109, 88, 69, 84, 115, 74, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf6aeba52f046694a89afb5e70215eb43u128, 0x644340aa35413418f06ada0390979bd5u128).calculate_p2pkh_address(false).iter().zip([49, 77, 106, 99, 50, 80, 74, 69, 65, 85, 104, 105, 69, 88, 102, 50, 77, 81, 113, 87, 105, 71, 113, 110, 121, 100, 84, 67, 98, 104, 71, 86, 104, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd313120dafd20e9630b51aa7af3371deu128, 0xc3f933f5d64552600198bc629321e264u128).calculate_p2pkh_address(false).iter().zip([49, 77, 55, 54, 76, 107, 119, 78, 83, 106, 119, 49, 97, 119, 49, 52, 71, 66, 116, 110, 77, 56, 69, 52, 101, 56, 82, 120, 67, 121, 121, 71, 67, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf2b789fd8003fe76acdf9e77b7600fd7u128, 0x39642d25dbb1f94bdc497506250039dfu128).calculate_p2pkh_address(false).iter().zip([49, 68, 122, 113, 107, 104, 102, 120, 90, 103, 90, 89, 77, 76, 69, 54, 89, 54, 112, 107, 111, 86, 112, 88, 83, 65, 72, 114, 78, 75, 72, 121, 118, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x54eb47904145fa9fccaa5af75b132e8bu128, 0xe3fd31d87c9ae4149b41d71641f4f134u128).calculate_p2pkh_address(false).iter().zip([49, 81, 65, 88, 110, 50, 103, 72, 109, 75, 118, 105, 118, 54, 87, 116, 81, 74, 82, 103, 72, 113, 89, 83, 104, 50, 68, 88, 115, 115, 100, 81, 121, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc40f47ea2650a08594d390bb79756700u128, 0x82f9de46c8f4bfdaa66719c7b48f1743u128).calculate_p2pkh_address(false).iter().zip([49, 52, 86, 112, 116, 84, 76, 113, 52, 102, 117, 74, 72, 111, 112, 112, 119, 120, 122, 84, 85, 53, 67, 84, 103, 49, 100, 67, 104, 55, 75, 87, 122, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfb3b1eeba2d6080e7bdb9465b2dd02b6u128, 0xac0cfce1349231facb690dca3ba23f84u128).calculate_p2pkh_address(false).iter().zip([49, 56, 87, 69, 98, 102, 86, 76, 107, 66, 87, 117, 52, 67, 121, 103, 49, 57, 103, 105, 118, 121, 112, 70, 121, 115, 85, 72, 87, 78, 78, 112, 109, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x71e80f825645c1ddc99f036806697ea8u128, 0xd0caddd2e36a903c26da1870cdf54ac0u128).calculate_p2pkh_address(false).iter().zip([49, 77, 118, 121, 55, 72, 86, 56, 109, 76, 115, 80, 107, 76, 112, 57, 66, 49, 67, 72, 101, 115, 71, 76, 107, 118, 52, 80, 99, 102, 89, 110, 90, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x511eadd47e24fa3198474c94854bbd3bu128, 0xd35eca7a9a13e73c39ec084afd644959u128).calculate_p2pkh_address(false).iter().zip([49, 71, 103, 84, 98, 81, 111, 51, 89, 67, 101, 56, 51, 100, 51, 51, 107, 68, 103, 67, 84, 72, 71, 50, 121, 52, 104, 69, 76, 65, 85, 122, 65, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5c5f24ae8f7b9c35cf653ac99a27c6acu128, 0x2ccd90bbe9969879be55fd01471ae55cu128).calculate_p2pkh_address(false).iter().zip([49, 55, 119, 106, 114, 67, 89, 80, 100, 90, 72, 115, 80, 78, 75, 122, 103, 50, 118, 114, 104, 70, 71, 83, 83, 83, 103, 104, 121, 54, 101, 70, 76, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3e2c60b6b2763631ec341bda591feb54u128, 0xd59b31e277d31248cb2b81624bf4e8c4u128).calculate_p2pkh_address(false).iter().zip([49, 78, 115, 115, 84, 72, 67, 115, 102, 114, 121, 56, 55, 74, 98, 57, 86, 90, 74, 84, 116, 117, 85, 75, 67, 77, 71, 54, 102, 122, 78, 50, 78, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf14f4aab468ca68b1ffe817689136fffu128, 0xc79ce93676f57c80cbb9473a0ae7d9b1u128).calculate_p2pkh_address(false).iter().zip([49, 57, 115, 103, 90, 75, 75, 82, 83, 82, 66, 118, 100, 51, 82, 117, 75, 57, 75, 101, 72, 80, 55, 72, 114, 111, 54, 110, 100, 122, 70, 80, 82, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x22b6af4822b74e8b7ac07efedda7aecu128, 0x371461fb88bce439043e8552a53fb550u128).calculate_p2pkh_address(false).iter().zip([49, 65, 78, 103, 109, 119, 90, 84, 119, 112, 86, 80, 56, 49, 57, 90, 80, 86, 116, 89, 121, 113, 122, 70, 81, 77, 99, 77, 76, 82, 83, 107, 90, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe67f0fc0acce5cb80edb265e33179ceeu128, 0xb64a56bd1417eede224a02a799baaee8u128).calculate_p2pkh_address(false).iter().zip([49, 51, 55, 81, 84, 67, 102, 86, 74, 81, 52, 49, 88, 56, 102, 57, 88, 82, 54, 104, 101, 107, 69, 89, 52, 67, 83, 83, 55, 113, 103, 81, 50, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x108b54116ba898b0769c33c0025a7107u128, 0xafd278de0869252ea0fc51d464805032u128).calculate_p2pkh_address(false).iter().zip([49, 80, 55, 121, 122, 83, 112, 81, 100, 55, 110, 81, 89, 122, 57, 67, 105, 121, 104, 115, 77, 76, 56, 50, 121, 110, 118, 71, 55, 57, 114, 88, 70, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4bc6eb740ab6db069556cbd892006f5bu128, 0xf046c2b9beba584334fe403c71e8f674u128).calculate_p2pkh_address(false).iter().zip([49, 51, 114, 116, 56, 76, 82, 113, 49, 86, 56, 68, 97, 111, 55, 110, 77, 99, 98, 120, 119, 69, 65, 118, 90, 70, 117, 90, 86, 88, 103, 115, 106, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdf63be624b6e864555fbc4573c931fd6u128, 0x3573b9988a23483bf71be42bfb303258u128).calculate_p2pkh_address(false).iter().zip([49, 75, 57, 83, 78, 65, 117, 90, 75, 66, 51, 103, 98, 70, 78, 121, 50, 109, 56, 106, 85, 53, 53, 82, 97, 85, 76, 67, 102, 70, 107, 116, 98, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe46770d680224e296037e8a29e4cc4a7u128, 0xc33f165fc61d5158d2354182a2bbc398u128).calculate_p2pkh_address(false).iter().zip([49, 69, 86, 103, 68, 117, 53, 88, 66, 80, 54, 75, 83, 69, 103, 68, 99, 71, 100, 98, 70, 77, 121, 74, 106, 110, 76, 117, 110, 65, 71, 113, 121, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3ffd8c1e302bb599d205b2a117f0bb29u128, 0x6efeca3a807aad47dbfe5e66c79d2c86u128).calculate_p2pkh_address(false).iter().zip([49, 50, 89, 117, 117, 122, 120, 76, 50, 113, 107, 66, 54, 56, 119, 87, 86, 88, 71, 72, 67, 118, 84, 118, 49, 114, 52, 114, 57, 51, 83, 106, 116, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x13a32e29d6eec0fb73905963ae239a85u128, 0xd627816924035f092168fc79c8cba2a8u128).calculate_p2pkh_address(false).iter().zip([49, 54, 97, 119, 57, 77, 105, 111, 54, 97, 51, 81, 77, 101, 113, 55, 84, 71, 68, 117, 120, 97, 111, 71, 86, 89, 105, 119, 77, 99, 97, 119, 105, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdfafca9d51f43ea2f1e32205d37c1f21u128, 0xd1c519f1806665e7331ee5dfb07e77e5u128).calculate_p2pkh_address(false).iter().zip([49, 56, 81, 52, 106, 116, 114, 67, 117, 81, 57, 85, 56, 52, 87, 81, 98, 83, 120, 49, 85, 83, 54, 88, 99, 55, 100, 71, 105, 70, 97, 100, 110, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe2a5e552471e5bad8f251f56db1109c8u128, 0x26931eb4aea855cf0e2794d7e5ff588eu128).calculate_p2pkh_address(false).iter().zip([49, 68, 82, 102, 72, 72, 116, 113, 56, 76, 109, 116, 86, 50, 81, 56, 66, 107, 119, 55, 90, 116, 113, 101, 106, 106, 54, 68, 49, 74, 97, 66, 101, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa6c75b2bd6fe1817bac244d0ece87a93u128, 0xa91725eb68821e8fe9ca53f32667f40fu128).calculate_p2pkh_address(false).iter().zip([49, 56, 105, 105, 68, 68, 55, 120, 56, 49, 98, 106, 87, 78, 110, 119, 67, 117, 89, 66, 81, 50, 65, 77, 120, 67, 51, 55, 68, 69, 71, 56, 85, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe5cd588b631440271b686ae2340c0d2cu128, 0xfe6e77ab152d36b4398f1d81b3bd202u128).calculate_p2pkh_address(false).iter().zip([49, 65, 118, 68, 98, 111, 68, 100, 104, 76, 52, 102, 100, 65, 101, 83, 81, 83, 68, 84, 99, 122, 100, 120, 83, 109, 55, 90, 103, 109, 75, 119, 102, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x93173cea6c188432024e3a2edd68757eu128, 0xad49698d9eaacf8096882a9c9fce71b0u128).calculate_p2pkh_address(false).iter().zip([49, 71, 84, 104, 103, 85, 105, 99, 115, 56, 54, 111, 53, 69, 85, 120, 89, 86, 86, 109, 115, 51, 71, 102, 78, 99, 99, 107, 102, 87, 116, 120, 69, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x19871aa55484dd5fce79425f39f51ef7u128, 0x42afca240a3b3430f15d938517c9ed63u128).calculate_p2pkh_address(false).iter().zip([0, 49, 110, 122, 51, 67, 86, 83, 111, 66, 109, 84, 110, 88, 88, 83, 65, 66, 114, 71, 109, 106, 118, 113, 53, 88, 86, 80, 111, 55, 77, 57, 121, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8c1fe828294beec57289076feb39cd2bu128, 0xd468a5619499c4f6c9acb567220224adu128).calculate_p2pkh_address(false).iter().zip([49, 67, 80, 89, 90, 74, 122, 65, 113, 74, 72, 106, 112, 84, 78, 76, 83, 70, 72, 103, 55, 69, 105, 98, 101, 52, 103, 109, 99, 107, 69, 114, 56, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc94b204d6f0d1624702388d2de794886u128, 0xd0ecae67569968c5c77db9889c9cce90u128).calculate_p2pkh_address(false).iter().zip([49, 54, 120, 98, 121, 77, 99, 111, 75, 100, 114, 109, 113, 99, 82, 100, 109, 84, 110, 86, 103, 82, 97, 100, 76, 114, 81, 104, 87, 120, 66, 78, 57, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x647fcabae8cd371238685fc6e2b44062u128, 0x44b9a63e34c0cccd3ac880d151bcd8c2u128).calculate_p2pkh_address(false).iter().zip([49, 54, 53, 106, 54, 114, 75, 51, 98, 74, 81, 107, 77, 70, 104, 68, 88, 119, 80, 80, 101, 113, 85, 106, 119, 85, 80, 52, 86, 80, 57, 87, 106, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xabba0a0984c9d2ee64dd439f3a3f2cb2u128, 0x85d347491b3b1f711a55a64eb8960439u128).calculate_p2pkh_address(false).iter().zip([49, 51, 100, 98, 69, 52, 109, 72, 117, 68, 70, 109, 77, 87, 105, 56, 101, 81, 111, 113, 99, 88, 106, 86, 69, 97, 88, 49, 85, 118, 51, 119, 54, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6ab6ae085e7109e30303d38d1108f3aau128, 0x6f10d6ea311b87c85b761084f26bff5bu128).calculate_p2pkh_address(false).iter().zip([49, 72, 49, 103, 71, 90, 86, 68, 49, 107, 89, 111, 68, 80, 107, 119, 114, 74, 52, 84, 106, 65, 71, 71, 122, 67, 77, 77, 52, 54, 50, 81, 110, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x29324029b503bddc4ddd932c4959ab5eu128, 0xba4b8c4c5483ada5e84958c2fc872eacu128).calculate_p2pkh_address(false).iter().zip([49, 70, 119, 65, 119, 98, 102, 68, 90, 56, 72, 121, 104, 111, 101, 67, 49, 121, 87, 85, 90, 101, 80, 53, 81, 116, 105, 55, 118, 67, 99, 100, 120, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xde44930df2e917c63e479959b5808549u128, 0x580c93c3cd97d85d3606fcd0ff0eb53au128).calculate_p2pkh_address(false).iter().zip([49, 78, 102, 120, 67, 119, 74, 100, 120, 101, 78, 65, 88, 75, 71, 107, 71, 54, 90, 54, 71, 89, 90, 107, 70, 56, 90, 80, 57, 90, 80, 84, 107, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb3efdb8a7052356e7d31d4cbb9a49279u128, 0x7092a4ffaf2c6c0ddd33309fc9d6d161u128).calculate_p2pkh_address(false).iter().zip([49, 55, 68, 102, 57, 97, 82, 78, 121, 66, 74, 119, 120, 106, 74, 119, 107, 57, 56, 80, 89, 56, 110, 86, 114, 116, 109, 65, 107, 102, 71, 83, 119, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6243c0e7b19d181bbf8a3feb676bbe3cu128, 0x28ffad44fd463b31aa38ea84e4bfe33u128).calculate_p2pkh_address(false).iter().zip([49, 53, 119, 53, 54, 51, 105, 116, 74, 117, 115, 77, 55, 99, 119, 54, 65, 118, 102, 70, 118, 117, 98, 117, 84, 121, 115, 105, 89, 80, 109, 49, 65, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3a96d963716c2cfdb74b45dfa700aa6u128, 0x3b0d2189c6b9bd6c7e97281c9cffefb3u128).calculate_p2pkh_address(false).iter().zip([49, 67, 51, 101, 76, 97, 117, 110, 122, 87, 67, 75, 88, 107, 116, 84, 51, 104, 71, 97, 118, 105, 103, 72, 51, 102, 121, 52, 77, 114, 122, 121, 50, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa5eb25b8d151cde6b545bd25821ffd68u128, 0xfd45b4d394bcd3b6705e88e75810199u128).calculate_p2pkh_address(false).iter().zip([49, 69, 87, 51, 107, 70, 109, 75, 72, 71, 50, 87, 55, 57, 105, 85, 97, 51, 99, 80, 88, 80, 114, 111, 103, 72, 86, 121, 69, 109, 65, 66, 80, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc8b8702965ebda11b50b89b5f0cfb14eu128, 0x2b424060296a1e1bd82e5e0c1d8a0b14u128).calculate_p2pkh_address(false).iter().zip([49, 50, 110, 99, 86, 51, 55, 106, 85, 120, 89, 114, 84, 83, 68, 81, 112, 55, 102, 90, 111, 122, 51, 98, 55, 115, 67, 99, 77, 81, 103, 113, 54, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8669b7cb91da230c8fefd35c07694766u128, 0x1a4ecd5c254245de7d141734803a906fu128).calculate_p2pkh_address(false).iter().zip([49, 75, 70, 66, 74, 68, 68, 53, 109, 120, 55, 54, 57, 80, 49, 97, 57, 69, 90, 55, 50, 50, 119, 49, 120, 111, 68, 74, 83, 113, 112, 102, 74, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7b229234b7dc3a1b8e08c36d0ef933ccu128, 0xdab8dca6f32eaed21f610eebb547da57u128).calculate_p2pkh_address(false).iter().zip([49, 77, 100, 82, 112, 98, 87, 115, 99, 50, 122, 55, 103, 121, 74, 52, 70, 100, 52, 68, 87, 88, 85, 114, 77, 115, 120, 49, 122, 99, 111, 122, 109, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8c695e2c19cfce495012c2bb4220fc7du128, 0x815e235ee11e73924117b7a2a44d184au128).calculate_p2pkh_address(false).iter().zip([49, 52, 83, 102, 106, 81, 68, 72, 65, 99, 120, 70, 104, 120, 114, 69, 106, 67, 106, 110, 76, 111, 113, 53, 53, 110, 55, 104, 67, 76, 88, 69, 87, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x57b64a40b2662c79d484be7a89cf9a0cu128, 0x94b8535c77b8e3834efeeb18ddc1bf46u128).calculate_p2pkh_address(false).iter().zip([49, 50, 85, 67, 122, 117, 77, 118, 68, 83, 81, 100, 100, 53, 115, 53, 70, 110, 88, 107, 117, 85, 49, 84, 78, 88, 110, 57, 69, 76, 53, 52, 99, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xab0b56495c8c9b405f303965e24f7172u128, 0x289e1fa390b024da33fa09c735a1780u128).calculate_p2pkh_address(false).iter().zip([49, 80, 110, 114, 116, 87, 118, 102, 111, 80, 100, 81, 119, 98, 89, 81, 111, 75, 77, 109, 114, 116, 67, 75, 101, 103, 117, 87, 114, 85, 86, 106, 111, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x36d203d12f635b42fecdfacc19bee288u128, 0xa9c7dfe040d3ae737018d0d84a63bc34u128).calculate_p2pkh_address(false).iter().zip([49, 50, 85, 66, 114, 98, 81, 104, 83, 122, 53, 83, 87, 85, 119, 105, 72, 83, 106, 67, 75, 110, 84, 102, 120, 72, 82, 66, 82, 122, 102, 97, 53, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2123112dcff32dc63244b95a0889bf82u128, 0x8486b483cc75da69ea2198648539d2a4u128).calculate_p2pkh_address(false).iter().zip([49, 56, 72, 106, 113, 66, 85, 115, 107, 110, 82, 80, 102, 98, 106, 104, 66, 104, 78, 112, 100, 103, 107, 120, 78, 65, 109, 55, 82, 75, 56, 72, 118, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf1a7cfd7245532b785f14d01e3b550b3u128, 0xad799406829a6673314f9acef7733e20u128).calculate_p2pkh_address(false).iter().zip([49, 52, 107, 90, 71, 101, 72, 57, 102, 115, 77, 68, 51, 72, 78, 52, 88, 76, 111, 52, 76, 114, 81, 105, 67, 109, 99, 77, 51, 51, 120, 122, 118, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2029364fb6b9d4fdcea9c147934b88eeu128, 0x40e5219ffed73d00d8c0bd63029751beu128).calculate_p2pkh_address(false).iter().zip([49, 74, 84, 98, 54, 67, 102, 75, 77, 55, 113, 53, 102, 112, 80, 117, 78, 103, 114, 74, 49, 55, 66, 88, 90, 69, 109, 51, 78, 50, 113, 69, 115, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf9047ce1f0dd2d7519749c5a8b0ef102u128, 0x6a48cf0e5ea03070b429d56c49c36d7cu128).calculate_p2pkh_address(false).iter().zip([49, 75, 77, 88, 74, 66, 111, 99, 66, 115, 76, 114, 75, 52, 83, 78, 72, 121, 50, 52, 86, 72, 98, 113, 98, 90, 55, 101, 68, 53, 90, 104, 54, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x73122c691d9c9b425889508e21d1f75du128, 0x3b374487c7a0c216bf3047336807510au128).calculate_p2pkh_address(false).iter().zip([49, 53, 78, 105, 51, 72, 75, 89, 49, 106, 56, 85, 113, 102, 103, 118, 100, 90, 114, 83, 70, 99, 104, 105, 80, 65, 109, 111, 116, 109, 118, 82, 103, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x842fdbd4dc62d1a22959d86d9f1ceb99u128, 0x380b7a9f9bc135a20806890a148d812au128).calculate_p2pkh_address(false).iter().zip([49, 78, 82, 56, 113, 88, 120, 112, 57, 82, 71, 112, 75, 77, 71, 74, 106, 68, 85, 53, 82, 78, 87, 66, 57, 102, 68, 83, 51, 54, 56, 88, 116, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbc0d085eedddf3fbf059d3883c701f4fu128, 0x49c7cd5dc461c6c2be97a9c105265baau128).calculate_p2pkh_address(false).iter().zip([49, 66, 49, 66, 76, 121, 69, 83, 112, 103, 51, 119, 99, 114, 89, 72, 57, 113, 70, 81, 72, 49, 103, 50, 90, 115, 122, 80, 118, 118, 90, 68, 77, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8f7bd8276366eca5d2d0ccb7b287cb16u128, 0x630cc5fab9d495bb1837539a29806098u128).calculate_p2pkh_address(false).iter().zip([49, 69, 120, 90, 80, 53, 86, 76, 88, 86, 104, 82, 54, 114, 83, 101, 109, 112, 106, 78, 54, 116, 98, 52, 115, 98, 122, 86, 68, 68, 67, 110, 90, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7fb4a66327a3fc4f1aa48cab9f133111u128, 0xbe5e9ba477dee12ef113a0274b448787u128).calculate_p2pkh_address(false).iter().zip([49, 65, 103, 114, 112, 52, 85, 76, 110, 101, 84, 67, 88, 120, 106, 68, 77, 115, 86, 122, 90, 56, 102, 98, 78, 74, 101, 74, 99, 85, 97, 74, 89, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa4b0336b800eb0eeb370eb27923221fcu128, 0x55467057df40b36cf7e65666d81ad7b7u128).calculate_p2pkh_address(false).iter().zip([49, 56, 65, 117, 97, 87, 85, 121, 71, 114, 72, 99, 107, 121, 74, 110, 107, 111, 109, 74, 83, 103, 99, 80, 85, 103, 82, 80, 69, 81, 70, 89, 85, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe586fed3ca819e8974dfbf272553d777u128, 0x20b362c98740d160afccce326abd6addu128).calculate_p2pkh_address(false).iter().zip([49, 68, 77, 55, 54, 87, 77, 101, 121, 111, 118, 77, 65, 55, 104, 120, 115, 81, 107, 109, 105, 110, 77, 75, 88, 115, 55, 82, 72, 119, 56, 68, 70, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x453922bdfa76cd27448c1fe8e6ec2a91u128, 0xbe9ecc1e2deef3a3e1abc009db92efd8u128).calculate_p2pkh_address(false).iter().zip([49, 57, 78, 87, 115, 97, 122, 119, 53, 120, 57, 51, 106, 57, 117, 50, 122, 100, 105, 102, 99, 109, 49, 54, 97, 117, 114, 82, 78, 75, 101, 53, 100, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6cdabaf42664f4808be2825116e18e15u128, 0xa4928df61deddbe2e303c6482921c1f1u128).calculate_p2pkh_address(false).iter().zip([49, 77, 68, 69, 72, 80, 106, 109, 65, 111, 71, 104, 120, 113, 81, 55, 52, 90, 110, 113, 75, 104, 85, 54, 82, 105, 56, 49, 105, 112, 85, 76, 89, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x66d9363e50c1f2a26a985fec1f060af2u128, 0x4d786e48d3ba77b77bc7757261778c5eu128).calculate_p2pkh_address(false).iter().zip([49, 53, 80, 72, 71, 113, 111, 82, 90, 111, 81, 105, 81, 51, 69, 74, 118, 66, 84, 90, 54, 110, 86, 87, 54, 111, 99, 103, 110, 51, 85, 115, 74, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcca15ad37e663bfdb2b8ebd0d822bc09u128, 0xe18f091eeef8ac1bbc525933098d164du128).calculate_p2pkh_address(false).iter().zip([49, 68, 69, 51, 107, 88, 68, 84, 66, 107, 102, 87, 50, 57, 90, 86, 113, 111, 67, 69, 75, 119, 49, 109, 89, 55, 51, 86, 103, 104, 81, 82, 113, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd8f8559bc8837385b22f7abb0c7b3f95u128, 0x99a77b7fbce14a577faa6a49dec317a9u128).calculate_p2pkh_address(false).iter().zip([49, 53, 82, 65, 101, 107, 51, 122, 115, 78, 69, 65, 83, 55, 104, 81, 78, 88, 103, 68, 65, 121, 98, 66, 55, 86, 122, 111, 84, 51, 121, 116, 117, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x543702ccdff8836fd5af4947fd13b2cu128, 0xc30a5bff77151405c9f7a1278d92a450u128).calculate_p2pkh_address(false).iter().zip([49, 78, 50, 70, 75, 49, 88, 104, 122, 105, 56, 101, 90, 98, 112, 122, 80, 110, 86, 114, 109, 119, 114, 99, 88, 105, 70, 55, 88, 112, 120, 57, 97, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc6262b0e8ef0bb4cf1d5af78e5d88340u128, 0x5f2f871023aa7504f1aa8c50f23cbb3cu128).calculate_p2pkh_address(false).iter().zip([49, 77, 54, 106, 69, 53, 88, 103, 98, 69, 100, 54, 118, 119, 83, 52, 54, 100, 110, 83, 75, 76, 100, 66, 81, 89, 120, 118, 107, 105, 51, 69, 83, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1bf15700228a0aadc25a0ddd8112a51au128, 0x3edba8f2b20df96085015a2019f375eeu128).calculate_p2pkh_address(false).iter().zip([49, 56, 52, 51, 66, 68, 100, 74, 56, 98, 114, 50, 107, 104, 50, 78, 105, 74, 65, 74, 117, 65, 118, 72, 75, 89, 66, 49, 116, 85, 122, 67, 119, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xacbaba39cbac2ae11cb60a03782ab857u128, 0x2ad200c403d7dda8f69c3ed6dcbd6fe4u128).calculate_p2pkh_address(false).iter().zip([49, 72, 87, 52, 113, 90, 84, 122, 122, 118, 89, 77, 50, 105, 117, 119, 117, 76, 74, 49, 97, 81, 110, 118, 88, 107, 55, 84, 104, 109, 65, 85, 82, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x83c00b92975dff37f47321e188d41813u128, 0x28adf61de7c690ba56d1afdb8975ce9cu128).calculate_p2pkh_address(false).iter().zip([49, 53, 55, 88, 71, 68, 88, 56, 74, 50, 66, 90, 118, 67, 49, 110, 76, 80, 118, 112, 100, 109, 90, 115, 76, 102, 52, 77, 84, 83, 107, 88, 74, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa477e5b2e60c679e0af01d76a2910a29u128, 0x8478762351e67cd5b6453d78e02ba3ffu128).calculate_p2pkh_address(false).iter().zip([49, 53, 69, 109, 98, 110, 113, 72, 72, 111, 67, 77, 105, 102, 117, 71, 102, 102, 89, 54, 98, 65, 120, 102, 119, 107, 112, 98, 112, 77, 50, 81, 119, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc510a1cff2870928593b6a4ce46e47e0u128, 0xf569011a6c8f1d371216ffbf80dc6cd2u128).calculate_p2pkh_address(false).iter().zip([49, 52, 115, 86, 67, 122, 84, 49, 81, 104, 56, 54, 119, 86, 49, 100, 50, 86, 74, 57, 121, 85, 56, 120, 114, 106, 99, 104, 66, 70, 104, 90, 121, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1bfae6e229a22146becf6011e5512272u128, 0x8e96c6a7332ca932587936836be4ca85u128).calculate_p2pkh_address(false).iter().zip([49, 68, 122, 115, 75, 77, 103, 76, 99, 118, 103, 86, 77, 98, 122, 99, 56, 99, 89, 81, 49, 117, 57, 65, 98, 66, 55, 67, 51, 120, 101, 122, 75, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfefec1818cfec4b63184411062d559dfu128, 0x9267e2066aeea941fc90b3112c240093u128).calculate_p2pkh_address(false).iter().zip([49, 52, 52, 122, 113, 110, 68, 115, 76, 103, 82, 55, 49, 83, 55, 51, 65, 56, 70, 88, 106, 111, 103, 116, 53, 75, 65, 118, 115, 53, 55, 53, 76, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3d8cf305ad554c46d9d01cf7ecfb6319u128, 0xba7fb5ffb4a5e61610d27f1f729f03d8u128).calculate_p2pkh_address(false).iter().zip([49, 67, 84, 110, 85, 67, 87, 53, 97, 87, 49, 109, 71, 69, 118, 117, 97, 103, 50, 71, 100, 121, 111, 100, 100, 83, 107, 53, 101, 103, 87, 98, 77, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x985616c8e40d112bc3041b203bfcbaf4u128, 0xfb592ef06b26f19cc5dda422b2d61cd4u128).calculate_p2pkh_address(false).iter().zip([49, 52, 56, 82, 66, 87, 55, 106, 72, 72, 88, 106, 75, 80, 85, 104, 65, 66, 69, 97, 52, 80, 74, 99, 49, 76, 72, 115, 99, 82, 105, 112, 104, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc17f78a69c7e90e56ca9e5ec0c19f8c5u128, 0x7bc91f6b4f79c98d41e5cf5ac91c3576u128).calculate_p2pkh_address(false).iter().zip([49, 68, 81, 120, 120, 56, 67, 90, 57, 76, 75, 54, 67, 54, 88, 69, 107, 71, 53, 53, 113, 86, 54, 87, 118, 82, 87, 82, 57, 111, 75, 54, 97, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x554fd1c1f12cba4c08d23e3aabb2d7deu128, 0x1971f285f9132c0d632244fbf5dfdb03u128).calculate_p2pkh_address(false).iter().zip([49, 51, 109, 78, 100, 118, 78, 111, 121, 116, 50, 51, 51, 103, 68, 117, 86, 100, 103, 114, 90, 110, 76, 117, 117, 68, 87, 50, 65, 65, 68, 82, 80, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeeba2bb37c4034794bb4c492450babd6u128, 0x4ff6b404b487d00ee2dc92b9b1d91e17u128).calculate_p2pkh_address(false).iter().zip([49, 80, 112, 121, 68, 81, 118, 67, 76, 110, 104, 83, 115, 77, 109, 109, 69, 88, 109, 78, 88, 105, 102, 104, 70, 109, 55, 72, 89, 81, 122, 99, 52, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa3a2814d031a3d215cd54a2cf7330edeu128, 0x58b90bdacd964a5d8e38d994de391915u128).calculate_p2pkh_address(false).iter().zip([49, 53, 101, 102, 68, 76, 98, 87, 90, 71, 49, 100, 57, 120, 83, 72, 57, 55, 113, 109, 118, 114, 106, 77, 111, 49, 107, 119, 121, 51, 115, 80, 84, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x335495fa39044c25d4d232f15f749d98u128, 0xf8b66c31e8646f6a1cce6290f3882f53u128).calculate_p2pkh_address(false).iter().zip([49, 57, 85, 69, 71, 49, 100, 76, 80, 104, 49, 98, 82, 55, 98, 49, 52, 87, 115, 68, 118, 65, 112, 121, 70, 121, 99, 83, 98, 97, 69, 86, 83, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc07660bc8bfd10c080a9e03c2ff50a90u128, 0xbb53d8801402178929f7a253fcb3cc40u128).calculate_p2pkh_address(false).iter().zip([49, 67, 67, 51, 81, 83, 71, 116, 68, 90, 100, 75, 75, 100, 119, 75, 70, 100, 72, 109, 118, 74, 78, 101, 110, 115, 105, 68, 56, 117, 115, 69, 55, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b4fd3ca1b7e3691747ede2c65b4eb30u128, 0x172a010e4f55515e2ee4c1dd4a2eed4du128).calculate_p2pkh_address(false).iter().zip([49, 55, 121, 105, 106, 75, 122, 120, 81, 106, 119, 88, 102, 90, 88, 116, 114, 81, 90, 69, 104, 99, 111, 98, 57, 105, 49, 57, 55, 76, 56, 102, 107, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6adb200c9d1a1a5fa85ddc3b3c991f7u128, 0xbc4a140224786a482d7651fa6aecad80u128).calculate_p2pkh_address(false).iter().zip([49, 68, 100, 104, 54, 107, 111, 113, 88, 52, 49, 100, 100, 97, 81, 121, 78, 66, 71, 51, 55, 87, 122, 103, 104, 52, 52, 76, 111, 118, 98, 109, 72, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc281c808e2d7fa30a933cfef56ee3fa3u128, 0x4cc9fda9865d13dec17f3477c5c889a0u128).calculate_p2pkh_address(false).iter().zip([49, 56, 104, 111, 86, 72, 72, 98, 55, 53, 85, 65, 65, 71, 118, 80, 78, 89, 78, 77, 118, 80, 88, 76, 69, 105, 98, 51, 109, 76, 86, 68, 50, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x50f61f67067f36882c6068b981a6c286u128, 0xf794d47319df1ccbc7e7ff7461a86a22u128).calculate_p2pkh_address(false).iter().zip([49, 56, 107, 75, 86, 122, 89, 77, 51, 86, 66, 76, 88, 100, 89, 110, 98, 78, 72, 57, 66, 71, 66, 67, 71, 56, 99, 121, 86, 111, 122, 86, 90, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd2e0312ccdb1d8c2be218cc66abe2ed9u128, 0x9efbf6c8699c3a1e17b78b100a02f9c1u128).calculate_p2pkh_address(false).iter().zip([49, 51, 85, 83, 117, 102, 122, 54, 104, 67, 103, 54, 90, 54, 83, 67, 99, 68, 107, 107, 65, 80, 101, 88, 78, 90, 114, 103, 66, 101, 97, 75, 106, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x43019e9ad92edd7bcc36d21353b945c8u128, 0x85effcee1f8a25bffd2a4bf788916cbcu128).calculate_p2pkh_address(false).iter().zip([49, 66, 97, 109, 102, 71, 52, 65, 50, 103, 83, 117, 56, 98, 75, 68, 78, 104, 76, 85, 65, 109, 111, 76, 107, 51, 100, 78, 71, 74, 99, 117, 49, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5abc4433da2176057b6f0382ba949888u128, 0xb8b0ebb74a6bc31dc0b8833449b6e89bu128).calculate_p2pkh_address(false).iter().zip([49, 68, 105, 68, 117, 114, 102, 104, 55, 104, 90, 105, 57, 71, 109, 104, 119, 55, 115, 77, 71, 80, 82, 103, 113, 84, 90, 68, 51, 106, 88, 101, 76, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8b2c58f8af09e30bfefd2af2db2009c9u128, 0x90ca8d8202e8f57170c0c4655e3ec2ccu128).calculate_p2pkh_address(false).iter().zip([49, 57, 113, 82, 78, 109, 51, 83, 107, 114, 56, 71, 82, 100, 111, 101, 78, 90, 98, 99, 72, 112, 88, 72, 102, 56, 86, 82, 112, 68, 65, 90, 65, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5033f77658b81ec488364f3bcd4e74deu128, 0xf1d64dd0fa27b936c9d5e84307ed5d5u128).calculate_p2pkh_address(false).iter().zip([49, 69, 68, 55, 107, 114, 67, 74, 57, 54, 50, 69, 120, 84, 85, 85, 65, 51, 76, 71, 113, 115, 109, 98, 49, 117, 57, 102, 69, 54, 110, 71, 66, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8ef422388d59df6b47794deeecc2f915u128, 0xef050cd210ed5da5c2d38fb3a572434eu128).calculate_p2pkh_address(false).iter().zip([49, 69, 55, 98, 105, 77, 74, 101, 81, 110, 52, 75, 98, 90, 78, 70, 107, 116, 120, 56, 75, 85, 71, 76, 105, 78, 115, 97, 80, 82, 119, 83, 66, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1c30bf92e5b364af1d96e53fae169eaeu128, 0xf2ee10b9014a112444086168fc973411u128).calculate_p2pkh_address(false).iter().zip([49, 76, 97, 70, 106, 117, 113, 83, 122, 112, 81, 113, 103, 65, 90, 68, 70, 75, 109, 119, 112, 86, 74, 65, 90, 55, 121, 118, 90, 72, 83, 98, 101, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1d188e1a63132927150afd9d28889cd3u128, 0x9bf33b819e13322a294a746012bd3602u128).calculate_p2pkh_address(false).iter().zip([49, 67, 69, 114, 85, 57, 75, 52, 86, 55, 74, 111, 111, 66, 56, 76, 90, 53, 66, 66, 89, 106, 122, 102, 68, 49, 67, 110, 57, 88, 85, 86, 97, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x74b04cd573240b6e6ec475cb864a07e5u128, 0x6cd4a3d2520cc89e9a8840358034f16cu128).calculate_p2pkh_address(false).iter().zip([0, 49, 120, 69, 50, 80, 54, 118, 56, 88, 81, 106, 70, 81, 71, 77, 98, 99, 56, 106, 51, 112, 74, 90, 80, 50, 50, 88, 119, 78, 70, 54, 90, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9e1cc71a538ece5169c07d222e43b1bbu128, 0x9af21163fa6ccaca9fd3d98fc1e00152u128).calculate_p2pkh_address(false).iter().zip([49, 71, 49, 100, 122, 117, 121, 87, 57, 65, 67, 56, 52, 101, 67, 55, 114, 81, 67, 86, 102, 69, 50, 112, 122, 80, 114, 102, 75, 109, 87, 119, 78, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc3a323f50b30a653d7d746e45041fd95u128, 0x7b5973811480d5c275c86b19be77efc5u128).calculate_p2pkh_address(false).iter().zip([49, 80, 84, 56, 120, 101, 71, 50, 83, 90, 99, 106, 86, 50, 49, 119, 103, 114, 51, 76, 114, 57, 52, 82, 78, 101, 116, 51, 68, 118, 115, 120, 100, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3e5341350abbaf085b76ea3badccbfefu128, 0x487b571e241c2c4c0f0210193fba66f5u128).calculate_p2pkh_address(false).iter().zip([49, 50, 82, 107, 54, 56, 122, 116, 113, 55, 112, 72, 89, 49, 54, 51, 104, 117, 82, 90, 67, 110, 54, 67, 87, 90, 78, 65, 116, 109, 110, 89, 121, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4c3e12c85b007c7fcff8aa0e217d6eb0u128, 0xf9c201e15cf6be42ebb182ba72599363u128).calculate_p2pkh_address(false).iter().zip([49, 70, 87, 97, 50, 86, 112, 70, 89, 104, 113, 119, 65, 52, 50, 84, 106, 100, 83, 98, 72, 116, 54, 72, 76, 90, 107, 99, 112, 118, 87, 80, 99, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf0532fbd049140700bed6b20db434d3eu128, 0xbef602e87c5738d8147c37d26179676bu128).calculate_p2pkh_address(false).iter().zip([49, 70, 54, 55, 109, 82, 81, 113, 68, 114, 112, 67, 50, 105, 106, 83, 105, 66, 76, 121, 69, 49, 74, 72, 76, 121, 122, 102, 55, 90, 85, 115, 100, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xac85c6f7815e30726cb7a18464bbc824u128, 0xf56804f583a4d263d1f4a45b34ff7f33u128).calculate_p2pkh_address(false).iter().zip([0, 49, 117, 98, 106, 82, 102, 101, 99, 113, 56, 53, 75, 106, 116, 69, 109, 87, 54, 71, 98, 120, 101, 49, 82, 103, 114, 75, 85, 104, 70, 121, 85, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc5649cfe9a06ace733aaf250d2b27389u128, 0xa2db690663830437abb6e666ca8e4d0du128).calculate_p2pkh_address(false).iter().zip([49, 80, 75, 85, 86, 117, 72, 99, 102, 97, 122, 120, 80, 90, 71, 100, 113, 66, 118, 104, 88, 107, 98, 81, 104, 68, 104, 51, 49, 85, 115, 87, 114, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb3bdf0fc1c93cc2dc0fd04e9896b3a72u128, 0x34a87edabee2e6bf73e8a57eef582476u128).calculate_p2pkh_address(false).iter().zip([49, 71, 86, 75, 104, 110, 56, 85, 103, 76, 98, 81, 99, 104, 53, 120, 87, 80, 56, 114, 83, 116, 57, 121, 80, 77, 84, 103, 53, 89, 75, 101, 55, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x44209cf21ee661edc4bbdad4dd2cc529u128, 0x6888cf543c3cf1f158b3d0e437edf99u128).calculate_p2pkh_address(false).iter().zip([49, 51, 76, 111, 90, 104, 69, 105, 77, 71, 71, 121, 72, 51, 112, 106, 116, 57, 88, 85, 81, 81, 97, 109, 89, 71, 49, 102, 120, 75, 71, 83, 100, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9d7a929f9f5241398bbb104125879884u128, 0xb00820fc2b9bf5b3605a364cacf29ef2u128).calculate_p2pkh_address(false).iter().zip([49, 71, 102, 68, 97, 81, 98, 87, 67, 68, 98, 71, 70, 87, 67, 80, 65, 104, 86, 90, 81, 120, 111, 100, 56, 114, 83, 89, 106, 68, 97, 109, 82, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1139f75352fe7dabc549888639d97f75u128, 0xc0458a82207ae2f7bd6a298a3f6a2bbu128).calculate_p2pkh_address(false).iter().zip([49, 67, 82, 114, 69, 112, 113, 56, 74, 106, 118, 51, 54, 115, 114, 107, 98, 69, 80, 49, 87, 76, 103, 54, 89, 88, 121, 66, 68, 115, 109, 98, 114, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x872480bc4b3c79ca496ffb85a176b84fu128, 0xd511fbbb71fb7f24bdf56e6c16630489u128).calculate_p2pkh_address(false).iter().zip([49, 72, 110, 105, 112, 84, 87, 85, 53, 113, 55, 77, 110, 115, 114, 119, 77, 70, 111, 51, 99, 115, 98, 122, 53, 104, 90, 65, 66, 90, 56, 111, 55, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x61c1db6a90e99c196422b7e306b8ebaau128, 0xce03e040dbf44706d570b7e91c284e23u128).calculate_p2pkh_address(false).iter().zip([49, 57, 111, 50, 106, 66, 90, 111, 54, 70, 97, 50, 113, 106, 105, 90, 65, 68, 90, 86, 116, 97, 121, 110, 111, 52, 72, 115, 112, 100, 76, 50, 101, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x40eea5286acef7cda5ced0f6355d551du128, 0xad029034bdb1bf07a56d772a7ab23595u128).calculate_p2pkh_address(false).iter().zip([49, 70, 113, 76, 66, 111, 121, 71, 54, 78, 56, 83, 55, 53, 78, 85, 106, 109, 114, 77, 69, 56, 122, 57, 109, 89, 85, 104, 50, 111, 57, 114, 49, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x357be061ccb7492e62e528f2d6079440u128, 0x6f364a13001cedd5add338b1d22531cau128).calculate_p2pkh_address(false).iter().zip([49, 74, 53, 68, 68, 98, 71, 97, 110, 120, 97, 120, 90, 120, 103, 65, 51, 106, 90, 49, 71, 49, 102, 89, 98, 77, 118, 78, 99, 65, 82, 103, 66, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb6ee65b92452a11f7e2f577af5bedcafu128, 0x4f0c178933270446d3f3c0b205f7e5c9u128).calculate_p2pkh_address(false).iter().zip([49, 66, 120, 55, 99, 55, 90, 106, 101, 106, 53, 118, 88, 120, 87, 54, 80, 117, 114, 90, 66, 80, 75, 116, 84, 71, 107, 102, 87, 97, 97, 113, 81, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5a9a6ee407734f175e934f6b8e6f24d2u128, 0xa65a6643d7376f5c029cd81e8ef74a36u128).calculate_p2pkh_address(false).iter().zip([49, 50, 120, 88, 118, 85, 57, 49, 118, 77, 80, 90, 65, 68, 87, 109, 99, 116, 67, 87, 50, 88, 115, 50, 99, 76, 88, 100, 107, 101, 98, 54, 54, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xebdc7406cdfdd4577734a36a5aa4429cu128, 0xe8ddebf2c9c91f878a34a50acf7cc159u128).calculate_p2pkh_address(false).iter().zip([0, 49, 86, 111, 77, 69, 117, 119, 98, 116, 84, 67, 71, 111, 88, 85, 82, 118, 120, 80, 112, 97, 77, 116, 97, 52, 67, 106, 69, 119, 101, 121, 57, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcd4418389b4e9c5756276883c758b2f4u128, 0x30b3a8d9f9e53c8fc88954e01a14d44au128).calculate_p2pkh_address(false).iter().zip([49, 69, 109, 99, 70, 99, 85, 81, 111, 75, 55, 97, 104, 69, 90, 52, 77, 53, 87, 54, 100, 89, 99, 81, 71, 75, 72, 74, 115, 110, 90, 102, 109, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb4289509d1e9f97ed8172e7b692d605bu128, 0x128c6366cc0edcb6c9220d144c60f5d1u128).calculate_p2pkh_address(false).iter().zip([49, 66, 54, 74, 53, 109, 102, 80, 69, 67, 97, 106, 71, 57, 50, 74, 85, 118, 84, 102, 55, 115, 101, 115, 76, 103, 74, 77, 85, 100, 101, 117, 119, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa670997920d0a2ef14f9efdd2c9184fdu128, 0x9c6b15d6ff69dde7a853ad6f6e11616bu128).calculate_p2pkh_address(false).iter().zip([49, 57, 81, 81, 50, 77, 113, 110, 70, 65, 102, 69, 109, 99, 70, 103, 90, 85, 109, 101, 102, 78, 81, 122, 97, 67, 69, 114, 67, 51, 49, 88, 106, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x242301b504eb4359c284a91be1e4fa29u128, 0x67d56c42111917f8df465bcbd84b0025u128).calculate_p2pkh_address(false).iter().zip([49, 56, 65, 84, 68, 71, 78, 115, 87, 77, 78, 107, 56, 83, 72, 50, 54, 118, 86, 81, 52, 97, 83, 104, 51, 82, 87, 78, 53, 76, 77, 67, 56, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c43201e949388261a23747dd0021158u128, 0xd5a7c668f14b1a20005bc66c90b3e52u128).calculate_p2pkh_address(false).iter().zip([49, 56, 74, 56, 90, 74, 77, 99, 118, 119, 90, 67, 104, 101, 75, 100, 71, 106, 121, 74, 121, 104, 122, 75, 55, 72, 121, 122, 74, 98, 101, 50, 51, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x933724354641487d1b4c8ce4803704eeu128, 0xac9d31390f7f6b80930f1aeb3b12cc15u128).calculate_p2pkh_address(false).iter().zip([49, 70, 67, 54, 76, 52, 109, 100, 115, 76, 100, 113, 110, 75, 104, 97, 72, 99, 53, 86, 90, 51, 120, 88, 89, 55, 104, 70, 78, 82, 66, 89, 49, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x975f29000c9d579cbd9433ebf9c38104u128, 0x713114203a6038f7edb5aa7333423dc8u128).calculate_p2pkh_address(false).iter().zip([49, 80, 65, 107, 106, 71, 89, 72, 72, 104, 81, 105, 81, 122, 98, 104, 81, 119, 115, 66, 72, 103, 117, 54, 106, 85, 97, 80, 56, 120, 106, 75, 122, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x922c2499be6cd6139a57ae968c489cc3u128, 0x81d845f5746cc08fc574f70031a5459au128).calculate_p2pkh_address(false).iter().zip([49, 67, 104, 97, 50, 74, 113, 87, 115, 49, 102, 117, 70, 55, 118, 111, 80, 84, 88, 117, 51, 51, 118, 82, 67, 83, 49, 102, 53, 89, 116, 67, 88, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x634de168c6fbd3ab13a59b330bfb5816u128, 0x82249c7aeac4b608d966b9142b02d0e2u128).calculate_p2pkh_address(false).iter().zip([49, 76, 121, 101, 74, 72, 116, 52, 70, 71, 104, 109, 67, 85, 52, 107, 87, 72, 122, 74, 113, 115, 74, 85, 67, 76, 72, 81, 65, 57, 72, 77, 70, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa278e20549dad1efe7d3971fdcdd3817u128, 0xa99baaf754e93c2ba6a7a04f117bc191u128).calculate_p2pkh_address(false).iter().zip([49, 70, 115, 53, 49, 105, 57, 78, 49, 105, 74, 72, 71, 71, 71, 106, 80, 66, 103, 102, 53, 71, 97, 70, 103, 106, 75, 107, 67, 71, 109, 121, 100, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
    }

    #[test]
    fn calculate_wif () {
        assert_eq!(U256::new(0x3da61b3ae8d53c6c683df46096db4225u128, 0x649b2732be446ec698f1d902b5659319u128).calculate_wif(false).len(), 51);
        assert!(U256::new(0x3da61b3ae8d53c6c683df46096db4225u128, 0x649b2732be446ec698f1d902b5659319u128).calculate_wif(false).iter().zip([53, 74, 72, 83, 75, 83, 82, 72, 71, 116, 121, 53, 101, 84, 49, 102, 111, 65, 106, 57, 70, 99, 68, 121, 52, 118, 57, 55, 98, 56, 87, 87, 101, 51, 122, 71, 119, 107, 111, 76, 51, 115, 55, 116, 80, 118, 82, 53, 81, 103, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7511126f25f7a7916b9a96b19e9295beu128, 0xa2cc3a6b3308a26c44825a2e93f8fa73u128).calculate_wif(false).iter().zip([53, 74, 104, 113, 116, 107, 51, 86, 65, 97, 87, 102, 118, 89, 70, 88, 89, 52, 87, 70, 49, 106, 89, 77, 66, 109, 77, 99, 89, 103, 109, 80, 76, 49, 109, 90, 90, 107, 54, 67, 54, 89, 98, 80, 57, 50, 117, 106, 88, 67, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x257b65bed8822e28fc26bc1f9cc0ee6bu128, 0x8b5e6ca56bb8980854adf2f8b00ecd41u128).calculate_wif(false).iter().zip([53, 74, 54, 111, 49, 86, 122, 109, 118, 77, 99, 52, 121, 109, 104, 118, 52, 69, 71, 53, 50, 90, 51, 69, 106, 115, 78, 69, 110, 100, 106, 66, 70, 68, 104, 113, 83, 107, 82, 84, 50, 120, 84, 81, 88, 75, 119, 101, 102, 117, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x91d9989cb2b0b2e8cf5ac2e5d4a9ddc5u128, 0xbbc33236072233097130faafe5dd4bd5u128).calculate_wif(false).iter().zip([53, 74, 118, 88, 56, 56, 55, 119, 115, 105, 88, 71, 101, 89, 84, 86, 52, 80, 109, 109, 74, 72, 65, 107, 112, 99, 117, 90, 77, 113, 69, 88, 122, 114, 83, 119, 56, 55, 81, 80, 78, 114, 87, 81, 54, 121, 101, 101, 68, 121, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd5d3950121eaa99cf85f069b41e098fbu128, 0xe3d5ae5fdaf2b78a09820cd66a967e8au128).calculate_wif(false).iter().zip([53, 75, 83, 84, 86, 87, 70, 106, 100, 71, 103, 105, 105, 89, 68, 119, 89, 66, 71, 119, 98, 82, 105, 101, 57, 74, 90, 70, 72, 80, 49, 107, 99, 118, 104, 88, 106, 87, 51, 98, 110, 86, 121, 49, 50, 78, 70, 88, 71, 112, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1f3a700a00f605ecc6946fd57c9f60c5u128, 0xc9c6e5d1f2fb9f4e8e2f1ffb63c1f083u128).calculate_wif(false).iter().zip([53, 74, 52, 51, 71, 78, 82, 107, 74, 50, 85, 107, 50, 85, 116, 72, 122, 69, 75, 51, 82, 56, 90, 57, 118, 107, 56, 112, 107, 76, 78, 57, 50, 114, 70, 109, 116, 81, 120, 109, 49, 56, 69, 78, 117, 98, 71, 67, 78, 50, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3655608cb39dbd94ed8ee12810cf10dbu128, 0xbbf41b14450c03760b1d37fc61ce0a0cu128).calculate_wif(false).iter().zip([53, 74, 69, 68, 84, 87, 112, 106, 120, 113, 71, 104, 66, 77, 80, 103, 103, 66, 116, 113, 97, 119, 103, 84, 77, 50, 85, 49, 82, 122, 69, 88, 104, 97, 68, 112, 88, 111, 65, 78, 71, 105, 97, 56, 111, 110, 122, 105, 103, 85, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4396721e92229a1abc0b7cd67020f400u128, 0xc4298a6d6e4eb9a35f41a5236c4ab574u128).calculate_wif(false).iter().zip([53, 74, 76, 52, 49, 122, 121, 118, 99, 116, 121, 89, 109, 77, 122, 114, 116, 71, 80, 102, 65, 66, 104, 103, 75, 76, 115, 72, 102, 67, 120, 83, 52, 74, 114, 78, 67, 76, 111, 120, 109, 84, 69, 117, 112, 70, 76, 107, 74, 122, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeea6aaa6492ed5f93228ceea8837cb6eu128, 0x6605c024763a91deb302b278c244b318u128).calculate_wif(false).iter().zip([53, 75, 100, 80, 98, 115, 97, 85, 69, 80, 105, 100, 111, 75, 52, 118, 57, 83, 66, 120, 113, 75, 102, 119, 113, 71, 98, 69, 107, 51, 49, 81, 55, 90, 88, 84, 118, 83, 106, 107, 117, 78, 107, 87, 103, 86, 99, 56, 119, 69, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3f7aac0683185f06c6cb50806f8e4fd8u128, 0x98d470a2f27e10a92a1c6fa2b65490bdu128).calculate_wif(false).iter().zip([53, 74, 74, 70, 53, 56, 121, 100, 86, 115, 113, 109, 111, 106, 52, 49, 90, 76, 120, 88, 52, 86, 82, 55, 122, 71, 76, 83, 98, 116, 81, 78, 100, 101, 72, 67, 69, 55, 121, 55, 99, 87, 121, 116, 89, 53, 104, 65, 97, 121, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcfe10c3182da55e1e788a46efd4c3e70u128, 0x5186e41e7066f84056d299e5a2155d09u128).calculate_wif(false).iter().zip([53, 75, 80, 113, 97, 69, 118, 56, 105, 72, 75, 86, 117, 103, 102, 65, 57, 105, 101, 112, 122, 52, 103, 69, 50, 81, 98, 67, 110, 54, 109, 66, 114, 104, 78, 78, 104, 83, 101, 90, 83, 50, 75, 80, 83, 113, 88, 70, 50, 104, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf0eeab30480e5b20d7eff7ff3ddb90e4u128, 0xc5dc9431c54358e4535c65cac7d590fdu128).calculate_wif(false).iter().zip([53, 75, 101, 80, 115, 100, 87, 82, 68, 117, 66, 114, 121, 80, 121, 70, 53, 65, 99, 119, 116, 51, 111, 57, 121, 120, 86, 119, 115, 109, 49, 109, 51, 72, 104, 122, 106, 101, 83, 52, 75, 71, 55, 112, 103, 98, 49, 51, 69, 87, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdd44b4df314bc8dc49919078842531ddu128, 0xcdd90f20cdb9539a39ae0eb5f3ea0cbcu128).calculate_wif(false).iter().zip([53, 75, 86, 106, 97, 117, 100, 98, 102, 102, 75, 110, 67, 90, 117, 52, 69, 85, 76, 65, 86, 87, 110, 53, 113, 72, 69, 106, 102, 105, 75, 104, 57, 119, 53, 100, 118, 75, 107, 114, 50, 106, 74, 110, 118, 112, 78, 112, 113, 115, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf6f516d918a6a55966679c4d10f393cau128, 0x82017713ec649dc1a0cfb0dbd746e7f2u128).calculate_wif(false).iter().zip([53, 75, 104, 51, 109, 121, 112, 71, 112, 71, 114, 81, 68, 109, 70, 68, 107, 101, 102, 105, 90, 110, 69, 98, 78, 56, 65, 76, 109, 84, 121, 106, 68, 56, 82, 113, 86, 67, 70, 66, 69, 115, 83, 66, 99, 100, 82, 111, 100, 68, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x43acc5bc9492d47965f783680c9563abu128, 0x9f8268d4c79a65853f080b933d7e2169u128).calculate_wif(false).iter().zip([53, 74, 76, 54, 70, 68, 56, 88, 81, 77, 90, 57, 97, 89, 112, 99, 83, 114, 113, 68, 50, 90, 84, 112, 81, 100, 105, 122, 52, 105, 80, 88, 68, 121, 119, 74, 72, 98, 111, 114, 70, 72, 114, 117, 53, 77, 54, 115, 88, 122, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcc7243558359e094aadf6b51c0bceb1au128, 0x7fdb709f2051cdb355cf02760ec288bau128).calculate_wif(false).iter().zip([53, 75, 78, 75, 116, 87, 81, 70, 105, 76, 86, 98, 104, 111, 82, 122, 84, 87, 76, 110, 119, 121, 120, 69, 50, 83, 49, 112, 115, 121, 115, 106, 66, 112, 87, 53, 87, 121, 102, 85, 98, 49, 113, 81, 112, 54, 67, 90, 49, 55, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x473edc73fac21004cda99126454de598u128, 0x3bced3472b77df6819ff7b11ba3e100du128).calculate_wif(false).iter().zip([53, 74, 77, 102, 84, 70, 112, 75, 65, 118, 99, 87, 89, 85, 78, 100, 70, 54, 103, 84, 50, 112, 103, 82, 116, 101, 97, 54, 121, 100, 51, 51, 113, 89, 107, 81, 118, 84, 107, 68, 81, 102, 121, 57, 51, 118, 52, 51, 69, 89, 81].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb5f4ecbc882aace8ccf4e5f7990870a4u128, 0x440b275e059876944bb96bac4fb6975fu128).calculate_wif(false).iter().zip([53, 75, 67, 82, 82, 83, 78, 98, 97, 81, 71, 69, 111, 56, 68, 66, 109, 56, 57, 100, 98, 68, 53, 77, 109, 72, 109, 106, 53, 80, 116, 120, 109, 122, 98, 75, 112, 56, 69, 105, 83, 65, 86, 120, 67, 77, 115, 71, 56, 50, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xabc89845eea35491d036777e81280b61u128, 0xeb5c43b1bf0a7fb7d1b339c7915eb290u128).calculate_wif(false).iter().zip([53, 75, 55, 119, 90, 90, 120, 70, 83, 107, 99, 103, 55, 80, 78, 118, 55, 114, 84, 52, 105, 80, 121, 120, 78, 66, 57, 112, 54, 105, 83, 105, 117, 120, 78, 103, 69, 81, 115, 53, 56, 115, 110, 83, 120, 70, 83, 113, 50, 100, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2b9c17468ecaf7986fdbed5dda364e74u128, 0x98a979cb41ed75d2eaf711bf8c80e96bu128).calculate_wif(false).iter().zip([53, 74, 57, 86, 88, 117, 52, 115, 78, 89, 70, 49, 119, 69, 50, 118, 102, 66, 66, 116, 84, 85, 53, 67, 69, 119, 54, 69, 81, 70, 106, 104, 118, 85, 75, 76, 109, 100, 107, 88, 98, 112, 56, 121, 75, 78, 102, 112, 100, 77, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1797a6d5520d55743865494fec711389u128, 0x5bff879f2761e39cb436b8ee2944f04eu128).calculate_wif(false).iter().zip([53, 72, 122, 103, 68, 90, 104, 80, 110, 117, 103, 117, 99, 107, 68, 51, 101, 50, 74, 77, 89, 120, 120, 51, 66, 119, 70, 89, 88, 55, 71, 77, 106, 109, 113, 116, 112, 109, 84, 85, 86, 85, 102, 77, 77, 117, 85, 110, 122, 106, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc01a42aecae73e761fc90a9c703aabf7u128, 0x9761458d6c1cf39b657665a74d94e4d1u128).calculate_wif(false).iter().zip([53, 75, 71, 116, 97, 113, 55, 118, 65, 112, 88, 99, 77, 103, 104, 80, 51, 77, 86, 52, 85, 53, 85, 101, 111, 88, 105, 115, 66, 68, 98, 74, 52, 87, 50, 114, 69, 89, 55, 111, 98, 119, 80, 70, 105, 120, 98, 98, 53, 110, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd00516a3b5ca6c276516ff65f110ab4eu128, 0x6cfcdce3a4b792f7ba9b58d7756622cdu128).calculate_wif(false).iter().zip([53, 75, 80, 117, 65, 112, 77, 113, 111, 90, 99, 74, 90, 110, 100, 86, 109, 54, 78, 105, 109, 49, 88, 67, 115, 110, 110, 113, 53, 66, 116, 122, 90, 122, 71, 99, 104, 65, 66, 115, 107, 115, 102, 89, 120, 52, 85, 111, 52, 107, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa91e2d9a0cd73ce70eb8bc914f8f62f9u128, 0x50d63cc5e10554b7425f74501933a291u128).calculate_wif(false).iter().zip([53, 75, 54, 109, 85, 71, 68, 112, 121, 122, 105, 49, 88, 120, 80, 113, 117, 69, 81, 57, 99, 71, 49, 75, 56, 65, 115, 107, 100, 74, 116, 67, 88, 56, 49, 82, 78, 115, 90, 109, 87, 85, 69, 99, 69, 104, 113, 103, 80, 103, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb5c944204efc2ae488a7a71646757181u128, 0xfef37fde409c800d885f9e3fe82da160u128).calculate_wif(false).iter().zip([53, 75, 67, 77, 52, 109, 119, 50, 102, 77, 112, 78, 118, 88, 74, 115, 82, 54, 122, 72, 110, 53, 85, 57, 88, 115, 119, 102, 114, 83, 53, 113, 85, 119, 99, 97, 86, 90, 99, 86, 106, 101, 118, 76, 76, 51, 86, 80, 86, 74, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1c6b598ecf91261b8d7ff109db7e8ac8u128, 0xd7749be2b7963d97b6a3eec2875e26a0u128).calculate_wif(false).iter().zip([53, 74, 50, 111, 87, 113, 103, 70, 75, 55, 83, 110, 117, 99, 105, 83, 69, 56, 51, 118, 121, 104, 110, 55, 103, 71, 50, 77, 50, 98, 68, 110, 56, 116, 82, 57, 106, 50, 77, 85, 85, 111, 90, 67, 120, 50, 110, 111, 77, 122, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb79c783e08473432524d648a23530dc0u128, 0x2f0b68fbdda64b6f94ea1ca17118f045u128).calculate_wif(false).iter().zip([53, 75, 68, 57, 103, 98, 75, 52, 88, 53, 82, 81, 100, 78, 112, 100, 66, 51, 117, 81, 118, 50, 103, 118, 70, 65, 116, 100, 87, 66, 100, 118, 105, 55, 71, 113, 107, 53, 115, 116, 68, 57, 66, 113, 84, 121, 85, 57, 86, 102, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7d2efbd24753ec5741418cdee9bd3948u128, 0x9a22dec28ae0b891a215fe86eb0a488fu128).calculate_wif(false).iter().zip([53, 74, 109, 82, 69, 55, 54, 120, 113, 75, 112, 66, 77, 102, 117, 101, 111, 50, 118, 65, 90, 77, 106, 99, 50, 99, 65, 113, 85, 81, 86, 80, 116, 65, 109, 75, 99, 57, 102, 110, 57, 70, 55, 84, 122, 80, 72, 105, 112, 114, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x96bc01c44cef8ef219a0d2d46c357f72u128, 0xcb3814d019b96da880cb7f3b1e342f8au128).calculate_wif(false).iter().zip([53, 74, 120, 102, 116, 89, 88, 113, 119, 111, 110, 56, 104, 71, 115, 107, 98, 52, 98, 49, 110, 56, 87, 68, 65, 86, 109, 65, 68, 110, 102, 119, 67, 90, 90, 114, 114, 66, 118, 88, 109, 68, 54, 76, 105, 49, 97, 88, 116, 100, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xffb958534d422d11d4537f010b0946cbu128, 0xd04e65e8c17d3e37b2ee688f4b102d40u128).calculate_wif(false).iter().zip([53, 75, 107, 117, 105, 49, 115, 106, 57, 105, 110, 81, 115, 121, 84, 80, 68, 114, 122, 85, 83, 67, 84, 88, 87, 55, 88, 107, 87, 66, 103, 120, 116, 51, 117, 110, 97, 72, 87, 66, 76, 84, 84, 56, 81, 107, 99, 67, 83, 54, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc022695412340a44794ac16ab9da2da2u128, 0x65a93927733ab163eb997b65da60ee33u128).calculate_wif(false).iter().zip([53, 75, 71, 117, 81, 49, 52, 117, 75, 119, 69, 77, 109, 100, 90, 90, 68, 69, 49, 52, 111, 100, 97, 75, 70, 78, 82, 102, 71, 74, 72, 97, 102, 88, 98, 97, 114, 101, 71, 49, 78, 76, 114, 122, 77, 82, 109, 119, 98, 76, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb777c111c74ae78e1af6cf5a4353782cu128, 0x749535e2975f47243779a7a87a2b3f97u128).calculate_wif(false).iter().zip([53, 75, 68, 54, 50, 55, 80, 114, 53, 97, 70, 55, 76, 97, 84, 113, 50, 56, 97, 65, 77, 81, 50, 81, 111, 97, 67, 82, 90, 105, 83, 117, 65, 74, 120, 53, 51, 83, 106, 85, 98, 78, 66, 85, 101, 72, 70, 116, 68, 121, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x730d48e94e6ab47a4b0f4c14548e3176u128, 0xe81e904e9ea22b7103ef695fff4a1735u128).calculate_wif(false).iter().zip([53, 74, 103, 120, 82, 109, 54, 121, 120, 72, 74, 49, 87, 82, 102, 52, 77, 105, 52, 89, 89, 51, 76, 114, 111, 80, 66, 85, 85, 83, 118, 76, 66, 57, 121, 68, 97, 86, 65, 102, 87, 106, 119, 120, 55, 88, 103, 106, 50, 111, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x18a9c3623feaa16abae26eafe7c44713u128, 0x3c59269614a7f1615dbc93847bd0e3d1u128).calculate_wif(false).iter().zip([53, 74, 49, 57, 90, 117, 115, 82, 89, 86, 51, 76, 116, 78, 116, 115, 84, 53, 112, 119, 69, 90, 112, 84, 65, 122, 107, 87, 87, 67, 49, 53, 111, 100, 114, 72, 109, 121, 90, 54, 100, 100, 68, 56, 99, 75, 116, 71, 110, 82, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x76622d817b4b341b4538ca9242ac8c63u128, 0x9467d9db09b1857f0e65903dde742274u128).calculate_wif(false).iter().zip([53, 74, 105, 82, 88, 101, 113, 76, 78, 54, 78, 98, 81, 87, 97, 52, 65, 72, 72, 88, 68, 121, 106, 86, 114, 105, 88, 90, 87, 90, 72, 101, 109, 88, 116, 107, 112, 88, 67, 53, 68, 82, 105, 113, 100, 52, 114, 122, 82, 117, 105].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1bef5bdf89cb21b4ba918b9cc39a8fd0u128, 0xe9fb645c083623a7001ab25b6a6ca2d2u128).calculate_wif(false).iter().zip([53, 74, 50, 98, 57, 71, 118, 71, 107, 82, 121, 85, 112, 99, 112, 84, 74, 85, 109, 84, 109, 78, 75, 118, 122, 80, 90, 122, 100, 107, 99, 89, 111, 87, 109, 112, 112, 51, 85, 107, 82, 122, 67, 82, 55, 115, 52, 104, 88, 80, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x59cb74af224ee33744deba17055b7cfdu128, 0x359f8c897ca065344a1c5a58ab89a76bu128).calculate_wif(false).iter().zip([53, 74, 86, 113, 71, 86, 76, 83, 122, 88, 51, 111, 76, 52, 88, 107, 52, 65, 97, 104, 77, 104, 84, 106, 56, 66, 113, 53, 98, 50, 112, 78, 119, 49, 53, 84, 119, 89, 111, 67, 116, 52, 98, 113, 71, 117, 110, 109, 89, 117, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x147e50af7436b5c78412c3dd6f589aabu128, 0xa46d5d3039fd9cb8ffef908ffeacde0eu128).calculate_wif(false).iter().zip([53, 72, 121, 75, 52, 76, 102, 51, 110, 100, 99, 113, 66, 103, 67, 51, 110, 111, 80, 119, 120, 67, 113, 102, 51, 78, 85, 74, 122, 89, 117, 77, 89, 90, 99, 115, 86, 105, 67, 116, 67, 74, 121, 71, 71, 116, 111, 69, 77, 78, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x879acbfb57a35603261e94c431ec2fb3u128, 0xf9af76b95a75e78f11a0855b76465401u128).calculate_wif(false).iter().zip([53, 74, 114, 49, 82, 78, 71, 86, 119, 86, 66, 87, 113, 51, 82, 114, 51, 89, 57, 67, 102, 106, 82, 114, 105, 114, 121, 106, 66, 55, 117, 100, 122, 118, 97, 97, 102, 103, 56, 98, 89, 110, 83, 53, 55, 56, 50, 69, 115, 70, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe0d01f2c9c565dd5369501b2ec2132b3u128, 0x349516e738ad89747dacdd48f54c18cbu128).calculate_wif(false).iter().zip([53, 75, 88, 74, 56, 76, 74, 55, 109, 116, 114, 109, 49, 52, 54, 90, 70, 69, 66, 82, 52, 69, 81, 71, 52, 97, 121, 104, 98, 51, 75, 78, 82, 81, 76, 84, 120, 97, 102, 51, 83, 80, 53, 112, 107, 84, 111, 81, 84, 98, 118].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5d7dd72977fdf8d756c36e442bb5016cu128, 0xd2ede26dbe76889949c8465c1e8dce8u128).calculate_wif(false).iter().zip([53, 74, 88, 84, 104, 83, 85, 49, 85, 53, 84, 97, 84, 121, 115, 55, 116, 110, 111, 104, 89, 110, 76, 50, 69, 99, 67, 86, 100, 114, 52, 102, 107, 81, 119, 104, 122, 49, 121, 104, 81, 86, 87, 83, 116, 69, 77, 69, 52, 105, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe50013b5f5939cebce4bca61650a79f0u128, 0x3baa9cdeb06bc14bb76a8d660a1c40ddu128).calculate_wif(false).iter().zip([53, 75, 90, 57, 53, 122, 80, 83, 83, 51, 106, 57, 82, 80, 121, 110, 104, 54, 77, 104, 105, 76, 57, 116, 81, 121, 71, 114, 98, 107, 57, 75, 71, 66, 114, 83, 53, 78, 99, 66, 119, 67, 68, 82, 90, 113, 49, 105, 87, 75, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8d26d1b16d51cb6b17a0ebfb2e0c0bf2u128, 0x565ca93bcba38df2aedf7c890cb1a3c8u128).calculate_wif(false).iter().zip([53, 74, 116, 84, 55, 78, 82, 115, 114, 50, 81, 84, 67, 100, 65, 82, 105, 107, 74, 71, 99, 77, 66, 83, 87, 70, 106, 114, 53, 89, 116, 120, 57, 81, 111, 88, 112, 111, 116, 84, 100, 69, 111, 75, 98, 104, 75, 81, 113, 117, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb21353211dba70e846f4805e07c86a72u128, 0x1809a7e9db6255ddd3b8de407e05d8aau128).calculate_wif(false).iter().zip([53, 75, 65, 105, 72, 69, 120, 82, 107, 74, 71, 100, 102, 80, 115, 67, 109, 55, 113, 114, 53, 57, 50, 104, 115, 113, 68, 67, 52, 50, 50, 101, 86, 88, 107, 120, 103, 112, 113, 106, 101, 107, 52, 83, 113, 120, 68, 100, 51, 116, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3ea85e6e15b44f37fa1faf3d64b50f2fu128, 0xe9ab336548a9734f2a4e4e17220a37d2u128).calculate_wif(false).iter().zip([53, 74, 72, 116, 54, 52, 105, 80, 51, 89, 55, 67, 121, 69, 103, 98, 106, 97, 74, 67, 84, 80, 67, 67, 69, 106, 51, 88, 71, 86, 65, 84, 99, 114, 120, 77, 113, 121, 89, 89, 87, 109, 67, 49, 102, 74, 110, 84, 69, 89, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xef7383da5e45656fb13cae78ba9212d8u128, 0x9a7e203e95d03098c9f172494c8111d4u128).calculate_wif(false).iter().zip([53, 75, 100, 107, 51, 78, 119, 52, 101, 116, 112, 81, 97, 87, 75, 90, 68, 103, 87, 120, 111, 86, 104, 74, 49, 77, 118, 118, 66, 52, 75, 56, 115, 106, 101, 117, 101, 49, 51, 69, 116, 71, 114, 78, 66, 87, 83, 54, 50, 56, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4dd422d85dab8e69e55dd828c94ce757u128, 0xfc9737e0a5b5aa9eca29e228939709e8u128).calculate_wif(false).iter().zip([53, 74, 81, 90, 99, 76, 98, 50, 115, 118, 56, 50, 56, 65, 118, 75, 56, 114, 69, 75, 54, 112, 104, 83, 88, 82, 121, 69, 99, 68, 65, 88, 117, 102, 110, 120, 52, 55, 105, 66, 109, 121, 113, 53, 109, 121, 109, 76, 112, 83, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1a5feb823c01349b7633de475c631c83u128, 0x73b1b0c64d5f9b0d8a357ac399df9568u128).calculate_wif(false).iter().zip([53, 74, 49, 117, 72, 100, 81, 52, 70, 115, 51, 103, 109, 89, 70, 54, 77, 72, 77, 51, 53, 70, 114, 110, 85, 78, 109, 56, 113, 105, 86, 121, 69, 115, 83, 106, 118, 82, 100, 52, 117, 85, 86, 109, 110, 80, 116, 114, 100, 113, 57].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x436540e68a614b53a59f44fcb06e81ecu128, 0x537bb2484fe89508828e7a8aad8d31bbu128).calculate_wif(false).iter().zip([53, 74, 75, 121, 55, 75, 56, 71, 89, 69, 87, 70, 98, 65, 67, 107, 115, 67, 76, 97, 77, 55, 56, 118, 52, 116, 85, 81, 83, 97, 84, 90, 55, 54, 116, 117, 90, 90, 85, 77, 76, 121, 74, 122, 115, 65, 113, 100, 111, 103, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1dc507185e56514fdcd7f79b959ed330u128, 0x4b1870844d0d50de2bc58b6114623dbeu128).calculate_wif(false).iter().zip([53, 74, 51, 81, 49, 77, 110, 97, 56, 65, 117, 111, 85, 122, 114, 53, 81, 66, 116, 122, 112, 70, 106, 113, 121, 51, 122, 118, 75, 88, 49, 52, 76, 88, 107, 65, 101, 83, 76, 119, 116, 74, 80, 82, 116, 100, 101, 53, 119, 77, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcf74d9287ae8b1378aa1118164dcc6acu128, 0x79fbcddf7c0f12b8db499c555bc12f81u128).calculate_wif(false).iter().zip([53, 75, 80, 101, 110, 52, 109, 54, 75, 101, 121, 75, 120, 69, 86, 107, 105, 81, 53, 52, 49, 119, 119, 89, 72, 69, 65, 99, 53, 70, 97, 52, 98, 97, 84, 83, 122, 78, 75, 53, 50, 57, 85, 78, 119, 75, 104, 106, 72, 84, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c54c769826714f2d78bf7e4a1b9966du128, 0x1a1c1fd4fed56f3fbc6d6ba6ebc752b3u128).calculate_wif(false).iter().zip([53, 74, 71, 114, 102, 70, 68, 122, 89, 81, 89, 113, 74, 65, 69, 116, 80, 83, 70, 113, 90, 84, 112, 118, 55, 110, 110, 122, 76, 67, 119, 67, 98, 51, 51, 109, 102, 113, 70, 57, 56, 66, 101, 85, 116, 84, 118, 117, 72, 89, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x45a1ab3ab5ca3f8b7d6d55ffd1119368u128, 0x593628b31b862973840250db06fd397u128).calculate_wif(false).iter().zip([53, 74, 76, 120, 69, 49, 114, 67, 99, 117, 119, 83, 104, 72, 110, 117, 76, 56, 114, 77, 56, 104, 85, 114, 113, 98, 118, 78, 85, 57, 102, 115, 76, 98, 100, 56, 89, 116, 71, 119, 89, 55, 117, 75, 49, 87, 112, 74, 106, 102, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9a48da93b91efb9f5f2ba37d7ab08932u128, 0x922bae233f09280ff35fba7fdd7dd644u128).calculate_wif(false).iter().zip([53, 74, 122, 69, 97, 70, 107, 87, 85, 85, 106, 122, 117, 107, 49, 65, 120, 88, 117, 121, 72, 77, 57, 67, 53, 82, 66, 101, 122, 51, 103, 72, 115, 56, 110, 65, 121, 111, 87, 113, 51, 56, 82, 115, 121, 76, 67, 119, 116, 120, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x20d00d17ebe4d9f272ac3e4def13318fu128, 0x95795069f6905a45efba52f089faf387u128).calculate_wif(false).iter().zip([53, 74, 52, 106, 106, 107, 87, 53, 118, 105, 83, 98, 82, 49, 112, 50, 104, 68, 105, 54, 115, 116, 72, 105, 50, 98, 66, 86, 52, 52, 114, 102, 116, 67, 76, 52, 53, 70, 75, 76, 72, 117, 76, 56, 67, 97, 104, 78, 102, 107, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc159c8f9a4a2c3473626994be489ba49u128, 0xf1b818fc485a7ef630c24ed7852cbc10u128).calculate_wif(false).iter().zip([53, 75, 72, 83, 84, 122, 100, 50, 84, 66, 115, 67, 71, 84, 74, 104, 97, 55, 104, 84, 107, 111, 54, 56, 107, 65, 75, 102, 83, 90, 56, 118, 98, 106, 77, 52, 106, 69, 54, 107, 106, 80, 114, 82, 68, 74, 85, 57, 54, 84, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd8508c7defca2b8d13c8c745de08480au128, 0xb4b84f579e48f086dc59c7cd8010932u128).calculate_wif(false).iter().zip([53, 75, 84, 90, 51, 110, 72, 50, 118, 75, 110, 118, 120, 72, 55, 104, 115, 51, 119, 65, 72, 57, 100, 102, 68, 68, 87, 101, 83, 100, 78, 110, 119, 49, 121, 119, 112, 89, 112, 83, 115, 83, 81, 69, 81, 89, 88, 114, 77, 101, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x57f1e2d27a06c2d330fd9ce62efafd10u128, 0x5f66f434e14f4d07fe05c627f9812ad8u128).calculate_wif(false).iter().zip([53, 74, 86, 50, 49, 113, 53, 104, 66, 100, 114, 98, 83, 116, 74, 84, 117, 76, 69, 55, 87, 85, 77, 109, 114, 97, 55, 107, 113, 119, 90, 72, 83, 51, 83, 112, 88, 85, 103, 106, 82, 82, 66, 104, 49, 107, 51, 110, 82, 80, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x84d69114fd60af228b52602af2a5efau128, 0xe34a33c1becbb7bddda5842241c8dbf0u128).calculate_wif(false).iter().zip([53, 72, 115, 119, 101, 118, 118, 89, 65, 115, 97, 107, 86, 52, 69, 72, 101, 85, 68, 49, 51, 75, 76, 75, 81, 121, 74, 54, 110, 67, 77, 111, 72, 69, 107, 99, 68, 68, 66, 55, 97, 69, 65, 80, 120, 57, 90, 71, 50, 71, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3a56dac1000dd15734ba581720ab0571u128, 0x6d0649fb276eea256c31dafc9e0f9dfu128).calculate_wif(false).iter().zip([53, 74, 70, 121, 110, 67, 66, 52, 109, 118, 75, 117, 106, 55, 111, 104, 98, 76, 87, 120, 106, 86, 81, 100, 101, 120, 115, 83, 71, 52, 83, 56, 115, 69, 97, 57, 111, 50, 90, 107, 71, 107, 120, 68, 119, 110, 88, 72, 66, 69, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb6a8ce976b2e1c93eacaf9b9d89663a9u128, 0x1f9c9f411c053d308e5860d532069cc1u128).calculate_wif(false).iter().zip([53, 75, 67, 106, 78, 84, 97, 102, 80, 84, 118, 88, 101, 69, 110, 77, 103, 70, 67, 80, 66, 71, 54, 107, 54, 107, 106, 84, 122, 81, 97, 54, 85, 86, 86, 121, 109, 105, 104, 89, 115, 77, 116, 81, 53, 76, 100, 89, 117, 90, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa8ab26ad854932f77fdec12682dccc47u128, 0xe28a0d697a27785a79173f87f00c00e1u128).calculate_wif(false).iter().zip([53, 75, 54, 90, 122, 97, 72, 89, 118, 75, 119, 51, 71, 65, 85, 88, 69, 118, 116, 84, 90, 102, 99, 103, 105, 49, 83, 75, 69, 109, 97, 81, 84, 75, 97, 51, 77, 83, 77, 86, 107, 52, 119, 54, 99, 113, 57, 84, 112, 102, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1c114ca7eb1d5b26626c9e12b53b4018u128, 0xf095c7c79d919363350a221bb0a9bba1u128).calculate_wif(false).iter().zip([53, 74, 50, 101, 88, 104, 80, 112, 87, 106, 122, 66, 84, 114, 55, 98, 66, 65, 55, 111, 120, 57, 113, 54, 84, 54, 78, 56, 84, 109, 117, 119, 83, 54, 52, 101, 78, 85, 122, 71, 114, 53, 69, 53, 80, 68, 70, 109, 82, 70, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdfbcd9fb75196afd4b5f5add36668c28u128, 0xfb6e79cb478f54fe1c806d252b61bcb5u128).calculate_wif(false).iter().zip([53, 75, 87, 112, 102, 72, 66, 56, 82, 87, 71, 84, 104, 103, 56, 115, 74, 70, 118, 84, 119, 104, 111, 68, 115, 52, 87, 81, 80, 77, 104, 86, 97, 116, 122, 65, 52, 112, 74, 84, 116, 57, 85, 77, 57, 66, 88, 83, 110, 86, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xef839edd6fef7e993500a91af19b72e7u128, 0xc490468164d68d3ca28f39ab0bf33a60u128).calculate_wif(false).iter().zip([53, 75, 100, 109, 101, 97, 117, 81, 80, 106, 88, 57, 77, 111, 69, 107, 116, 71, 113, 105, 76, 85, 112, 69, 99, 51, 70, 82, 52, 85, 101, 51, 116, 116, 81, 68, 50, 116, 111, 49, 116, 84, 81, 74, 55, 90, 49, 104, 83, 107, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9ca9e2fdf75d3ba680d3765d4362ba63u128, 0x13aa8b64becba2a39b31b6a4a7a1fed6u128).calculate_wif(false).iter().zip([53, 75, 49, 72, 76, 115, 86, 115, 81, 82, 119, 83, 100, 84, 81, 77, 105, 70, 120, 121, 106, 50, 57, 110, 118, 49, 111, 119, 56, 54, 98, 84, 113, 116, 76, 117, 107, 110, 117, 121, 56, 50, 87, 83, 77, 68, 88, 97, 97, 78, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8ffd84d9afb668e3ff6fb8cfdf862de9u128, 0xabb55711c5c805e57910e03ad587a34fu128).calculate_wif(false).iter().zip([53, 74, 117, 104, 99, 120, 69, 52, 117, 49, 83, 70, 100, 99, 100, 77, 88, 84, 99, 119, 113, 74, 103, 85, 49, 110, 101, 105, 103, 107, 49, 76, 84, 54, 99, 75, 88, 102, 78, 84, 89, 90, 68, 103, 117, 112, 55, 98, 83, 106, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa9e74feeded445dd7e28d82937632779u128, 0xad81a172d9a599b9da78c99bcd5c03dau128).calculate_wif(false).iter().zip([53, 75, 55, 55, 89, 71, 112, 99, 69, 122, 111, 118, 119, 83, 107, 81, 77, 110, 100, 104, 76, 68, 76, 89, 51, 76, 112, 80, 49, 71, 87, 53, 85, 90, 113, 83, 118, 69, 55, 76, 84, 82, 71, 112, 77, 53, 82, 51, 101, 113, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xab315593336d3d95044ce229934f2b22u128, 0xf347793f3f0a37c983b0a3fb2a9a7498u128).calculate_wif(false).iter().zip([53, 75, 55, 103, 85, 66, 116, 120, 115, 71, 97, 77, 90, 101, 52, 112, 102, 75, 111, 85, 88, 110, 89, 85, 80, 102, 104, 87, 119, 50, 112, 75, 107, 56, 110, 55, 119, 122, 101, 53, 54, 112, 54, 110, 107, 112, 55, 99, 121, 54, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb0a88e7151e7ef48976370a1a42e72eu128, 0xda6d09b79a9ed2b214410183655287cu128).calculate_wif(false).iter().zip([53, 72, 117, 57, 99, 87, 52, 105, 117, 98, 113, 115, 75, 88, 52, 55, 116, 119, 100, 53, 104, 117, 76, 74, 71, 68, 87, 49, 113, 66, 52, 101, 77, 82, 102, 81, 88, 71, 122, 115, 56, 74, 52, 83, 111, 105, 90, 72, 98, 80, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfdc5da3c58c04d26d14e682f061f13d5u128, 0x7d97b86b459e819a408a671434871fdcu128).calculate_wif(false).iter().zip([53, 75, 107, 51, 115, 76, 80, 116, 101, 88, 65, 83, 51, 121, 116, 102, 87, 80, 120, 103, 112, 90, 113, 100, 89, 57, 102, 78, 78, 51, 113, 119, 69, 74, 68, 56, 100, 115, 121, 83, 98, 54, 68, 74, 118, 105, 49, 89, 116, 82, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa425a6080b67e00db256c46517c2fe72u128, 0x14bc9c607da680f288f8d324403da271u128).calculate_wif(false).iter().zip([53, 75, 52, 97, 86, 113, 82, 67, 86, 53, 122, 84, 100, 84, 50, 50, 70, 67, 110, 90, 51, 102, 53, 102, 100, 100, 117, 81, 116, 50, 57, 111, 99, 98, 67, 86, 122, 109, 53, 115, 104, 75, 112, 109, 97, 100, 74, 111, 87, 120, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xef0810efbbaad7a98ab237ad6aba89b8u128, 0xbdb41eb90ad63f28e617dd45b47ea88fu128).calculate_wif(false).iter().zip([53, 75, 100, 90, 75, 89, 103, 70, 68, 87, 113, 107, 100, 72, 104, 97, 50, 71, 121, 74, 56, 54, 57, 54, 50, 85, 75, 106, 52, 113, 89, 117, 105, 70, 110, 117, 72, 69, 110, 106, 102, 49, 106, 97, 90, 106, 113, 54, 117, 80, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x618b2dd484ac70c4cf66a853cf649313u128, 0x17514b96b41570ad19f12c8505f74030u128).calculate_wif(false).iter().zip([53, 74, 90, 70, 67, 109, 56, 122, 69, 83, 114, 51, 99, 67, 82, 121, 80, 99, 83, 122, 76, 97, 74, 107, 83, 89, 81, 71, 56, 117, 88, 112, 106, 117, 83, 78, 113, 90, 87, 119, 51, 90, 52, 106, 122, 51, 109, 72, 66, 78, 107].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x321680aae5343419aee55b4a35e53665u128, 0x75ca85d47a123c3c0dfa9c28028996f5u128).calculate_wif(false).iter().zip([53, 74, 67, 77, 49, 87, 118, 71, 102, 52, 77, 107, 53, 66, 86, 81, 57, 74, 74, 78, 104, 120, 97, 84, 65, 103, 116, 111, 117, 105, 118, 84, 86, 52, 97, 88, 77, 120, 120, 85, 71, 54, 113, 105, 71, 83, 101, 97, 90, 109, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x64f49e01f0b13dd477020e778a8966d0u128, 0x3924d1b5ea9309b9b307e8b34bfcc726u128).calculate_wif(false).iter().zip([53, 74, 97, 107, 77, 90, 53, 86, 122, 84, 80, 98, 81, 118, 115, 101, 116, 117, 113, 107, 86, 76, 114, 52, 83, 76, 66, 115, 106, 71, 88, 68, 114, 90, 120, 88, 103, 72, 50, 99, 74, 87, 66, 112, 50, 76, 71, 86, 78, 78, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x31c2b87c45da591287ac5292bf354fbdu128, 0x74ffa723bc233409dad8e77ffabf462u128).calculate_wif(false).iter().zip([53, 74, 67, 67, 101, 101, 104, 80, 90, 103, 84, 84, 77, 116, 56, 65, 117, 82, 90, 102, 112, 69, 51, 100, 116, 104, 120, 88, 78, 51, 104, 80, 115, 116, 67, 85, 78, 81, 89, 51, 55, 78, 82, 70, 112, 116, 55, 113, 72, 118, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb771352c00f5c7557b12255193759a20u128, 0x75413b139306a530de749e65bcabb179u128).calculate_wif(false).iter().zip([53, 75, 68, 53, 78, 69, 49, 80, 57, 116, 90, 56, 65, 112, 89, 82, 68, 74, 102, 84, 67, 69, 99, 87, 78, 97, 102, 71, 99, 100, 77, 116, 53, 53, 67, 115, 54, 67, 105, 86, 110, 99, 56, 85, 103, 80, 49, 111, 57, 118, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfd338ed1024478acaa9db5984f3410b2u128, 0x2ab24993f53a8475cb720a97f4388150u128).calculate_wif(false).iter().zip([53, 75, 106, 111, 71, 104, 67, 103, 55, 103, 50, 98, 110, 121, 100, 54, 82, 76, 56, 66, 81, 76, 120, 97, 109, 84, 75, 97, 52, 85, 71, 107, 104, 98, 112, 114, 70, 65, 53, 68, 51, 98, 68, 109, 85, 53, 110, 90, 83, 120, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4e4e8db186c6d7b795224efdc0570743u128, 0xe96a0f95102ed392bf37fe9762ac9accu128).calculate_wif(false).iter().zip([53, 74, 81, 109, 112, 111, 65, 57, 117, 53, 117, 122, 70, 65, 110, 86, 54, 122, 74, 114, 107, 74, 50, 100, 53, 109, 110, 100, 107, 90, 78, 81, 75, 68, 100, 90, 75, 107, 87, 103, 110, 72, 49, 113, 97, 119, 85, 72, 98, 100, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf89f08dab81b16d061ecafcf61be3779u128, 0x6ef62115f325cf0c51758d8c1c81620fu128).calculate_wif(false).iter().zip([53, 75, 104, 110, 72, 50, 85, 67, 88, 87, 84, 85, 72, 100, 105, 112, 78, 110, 104, 97, 104, 120, 109, 83, 76, 66, 70, 99, 115, 101, 78, 121, 99, 49, 52, 65, 106, 67, 69, 87, 102, 90, 110, 70, 55, 90, 52, 87, 80, 99, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xebad63ebe20a819713e5a85fb81ebcf6u128, 0x8de5fa9cad24fbb1a0fb33e7c3ad11feu128).calculate_wif(false).iter().zip([53, 75, 99, 53, 101, 66, 115, 51, 66, 119, 67, 120, 72, 114, 102, 97, 106, 117, 49, 86, 69, 100, 69, 72, 53, 87, 89, 107, 104, 85, 114, 102, 77, 98, 98, 87, 122, 118, 65, 50, 76, 115, 119, 106, 69, 85, 70, 68, 71, 77, 109].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa1023fbbab2db286c6b47f3f20b1093du128, 0xac40be68abfa352ada1d3b0dce1dadebu128).calculate_wif(false).iter().zip([53, 75, 51, 67, 76, 78, 99, 52, 100, 50, 102, 115, 100, 69, 102, 101, 82, 50, 107, 83, 53, 118, 84, 101, 75, 113, 70, 98, 102, 53, 88, 103, 52, 102, 114, 98, 69, 78, 112, 118, 121, 84, 78, 106, 75, 75, 118, 83, 111, 122, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc8bb85ba6413a23d991ac947b7018956u128, 0xd9816c4a31b30a9ff00d72f04baa677du128).calculate_wif(false).iter().zip([53, 75, 76, 104, 50, 77, 57, 90, 99, 116, 114, 87, 53, 122, 112, 84, 68, 113, 88, 120, 106, 88, 53, 120, 76, 70, 117, 49, 71, 70, 51, 67, 98, 113, 113, 57, 100, 49, 56, 104, 74, 80, 106, 119, 81, 97, 50, 122, 87, 86, 50].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3dc63e4ac5f8b0dc77c1edb1c2e0ea50u128, 0x9ed6aaf342147fd7f9ae2517a1639f8eu128).calculate_wif(false).iter().zip([53, 74, 72, 86, 88, 82, 86, 119, 90, 57, 104, 107, 57, 80, 84, 112, 86, 110, 75, 57, 70, 69, 115, 89, 67, 122, 49, 74, 53, 50, 98, 101, 83, 102, 101, 80, 106, 116, 111, 78, 110, 107, 111, 49, 82, 104, 99, 118, 119, 101, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x154727323a51c0c4318002fd703aec0bu128, 0x273cbc3a1d3f19557dde875944b3c26bu128).calculate_wif(false).iter().zip([53, 72, 121, 102, 54, 100, 113, 113, 106, 82, 86, 119, 72, 76, 55, 50, 67, 84, 86, 77, 52, 85, 80, 112, 113, 83, 109, 69, 122, 118, 77, 77, 113, 100, 53, 116, 74, 98, 71, 52, 65, 49, 109, 81, 97, 120, 85, 75, 101, 50, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc92a51eec87fc502030f42dc1881cc5bu128, 0xb7316a3fba7fa96a322257bbbfeadc7fu128).calculate_wif(false).iter().zip([53, 75, 76, 116, 53, 90, 84, 76, 50, 54, 86, 121, 57, 77, 80, 87, 55, 113, 54, 55, 90, 119, 72, 83, 97, 119, 122, 121, 82, 121, 115, 121, 110, 69, 115, 53, 97, 52, 115, 87, 55, 67, 107, 100, 82, 55, 76, 116, 90, 50, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x651f1a9378f15efbd2d0b96be1e51936u128, 0xd07c2c2cabc5ba31282608953e25ad3du128).calculate_wif(false).iter().zip([53, 74, 97, 112, 98, 83, 55, 88, 87, 82, 81, 98, 119, 57, 55, 82, 84, 54, 65, 104, 57, 82, 70, 70, 70, 114, 67, 83, 72, 84, 114, 76, 104, 102, 74, 55, 122, 70, 89, 85, 80, 70, 55, 86, 122, 65, 120, 71, 98, 82, 77].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf9cb2e331e4e50917fa56ab309876ee4u128, 0x7df8e76fbaef6a597a92899c3af2fca4u128).calculate_wif(false).iter().zip([53, 75, 105, 74, 69, 51, 75, 109, 122, 115, 86, 89, 87, 69, 85, 88, 53, 117, 83, 72, 115, 74, 111, 57, 76, 106, 55, 75, 114, 112, 120, 67, 75, 85, 57, 84, 82, 66, 116, 106, 103, 51, 120, 105, 121, 115, 106, 101, 84, 55, 119].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x917f1445aa0d340deeea11386fc60f78u128, 0x37a84f0819b83339cebf3964ad61b59du128).calculate_wif(false).iter().zip([53, 74, 118, 78, 54, 72, 69, 87, 82, 98, 117, 110, 55, 78, 104, 77, 102, 71, 82, 68, 82, 56, 118, 105, 82, 53, 69, 87, 101, 87, 49, 119, 57, 55, 76, 88, 111, 82, 76, 78, 80, 100, 105, 114, 56, 106, 74, 90, 82, 67, 82].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9b780a597e66c43c56f5627d96efceecu128, 0x9111dbecdd08b06edf277c5f81631e2fu128).calculate_wif(false).iter().zip([53, 74, 122, 107, 112, 115, 70, 113, 55, 122, 54, 120, 83, 107, 68, 106, 85, 55, 110, 110, 87, 118, 83, 87, 69, 78, 106, 56, 76, 97, 121, 120, 112, 84, 74, 66, 109, 112, 83, 80, 90, 113, 103, 117, 90, 52, 122, 72, 101, 119, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb616b6afb61fa625aa78623b402ecde4u128, 0x89c52267796dbaf11b3b00434706b675u128).calculate_wif(false).iter().zip([53, 75, 67, 85, 110, 121, 118, 122, 83, 89, 99, 75, 82, 53, 56, 98, 101, 51, 112, 114, 105, 110, 106, 103, 52, 106, 67, 71, 83, 98, 75, 84, 57, 116, 103, 57, 70, 102, 83, 103, 103, 111, 120, 50, 97, 113, 120, 67, 76, 51, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc6187a02e4bc84a8e1a574c73a5c229cu128, 0x7f4f63c15b7d47187683ada3a65082bfu128).calculate_wif(false).iter().zip([53, 75, 75, 88, 102, 104, 89, 51, 112, 84, 78, 109, 72, 71, 80, 107, 102, 102, 80, 103, 80, 119, 82, 121, 116, 85, 74, 107, 109, 85, 67, 89, 109, 99, 77, 119, 111, 116, 111, 83, 52, 109, 121, 106, 99, 82, 88, 118, 56, 57, 97].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc28fa5d9f213bb6e8f888b1b37b744f6u128, 0x37d0da10ca738d1cb30937faea7e7407u128).calculate_wif(false).iter().zip([53, 75, 72, 121, 80, 70, 52, 52, 102, 70, 85, 102, 121, 115, 69, 80, 102, 65, 99, 83, 115, 71, 121, 52, 57, 107, 103, 103, 81, 51, 65, 72, 51, 113, 49, 81, 55, 69, 103, 101, 87, 105, 87, 99, 88, 84, 107, 55, 112, 85, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd716945daba55ccb4f89c86698e51861u128, 0x9de68ebb4f5600916be46e5b2fffbaa1u128).calculate_wif(false).iter().zip([53, 75, 84, 49, 105, 109, 85, 102, 103, 114, 54, 116, 76, 110, 88, 101, 77, 76, 65, 80, 89, 50, 105, 55, 105, 78, 76, 57, 70, 54, 112, 65, 111, 109, 76, 105, 83, 78, 114, 82, 102, 86, 68, 110, 86, 81, 74, 119, 68, 53, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4c92b66f34f462c6c46ae13b6642bd70u128, 0x312efb7c6e753295f781ecded57e8b23u128).calculate_wif(false).iter().zip([53, 74, 81, 49, 89, 66, 104, 101, 99, 113, 80, 88, 68, 74, 90, 84, 88, 114, 66, 75, 70, 66, 111, 111, 106, 54, 87, 110, 87, 110, 90, 75, 111, 105, 107, 71, 99, 89, 55, 86, 65, 122, 71, 112, 87, 114, 50, 82, 90, 104, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8d6d794f1479c122b0ddcfe0a8f82119u128, 0x465412febe1a2f22a3439a8b9a8cfa5cu128).calculate_wif(false).iter().zip([53, 74, 116, 97, 65, 71, 78, 111, 81, 68, 72, 76, 118, 65, 98, 97, 70, 69, 111, 50, 65, 49, 89, 77, 106, 104, 90, 78, 121, 49, 88, 109, 74, 116, 109, 75, 50, 90, 122, 57, 98, 55, 78, 107, 88, 88, 100, 68, 57, 98, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3918627ed4d5751e07ab457737e6336cu128, 0xa66ff907b2c8711411341ade49fd2444u128).calculate_wif(false).iter().zip([53, 74, 70, 83, 49, 56, 106, 84, 120, 50, 99, 120, 102, 76, 69, 120, 111, 65, 83, 103, 120, 54, 99, 82, 109, 111, 86, 112, 85, 111, 88, 51, 87, 107, 89, 102, 76, 72, 101, 105, 89, 71, 65, 85, 101, 77, 71, 97, 110, 53, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf547ec901bf03c6a47e57c3f897a760au128, 0x8990a193a3cae72e47958e74eaa53dcfu128).calculate_wif(false).iter().zip([53, 75, 103, 74, 120, 74, 80, 104, 50, 66, 65, 68, 101, 56, 90, 111, 122, 77, 57, 70, 86, 98, 113, 115, 122, 66, 71, 72, 68, 87, 115, 107, 102, 68, 113, 89, 107, 70, 55, 88, 75, 67, 71, 110, 86, 54, 80, 90, 49, 82, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3f515bd541864d33553e1d737f5731f8u128, 0x4daca6a9f0705c3be3c932aa4e849869u128).calculate_wif(false).iter().zip([53, 74, 74, 65, 120, 51, 110, 90, 121, 85, 50, 88, 88, 111, 119, 67, 122, 84, 103, 101, 121, 88, 103, 100, 100, 88, 76, 116, 66, 112, 121, 54, 70, 111, 89, 98, 88, 81, 98, 97, 72, 99, 51, 70, 101, 118, 114, 89, 120, 68, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf1a66851305151587cbe77588b24bd19u128, 0x2b9e8472aa5eb378e8e2718185009b81u128).calculate_wif(false).iter().zip([53, 75, 101, 105, 67, 121, 67, 89, 102, 103, 51, 106, 77, 119, 107, 66, 55, 70, 121, 85, 77, 99, 115, 85, 76, 121, 99, 54, 107, 115, 65, 75, 106, 122, 65, 51, 116, 106, 72, 51, 56, 121, 72, 71, 98, 84, 70, 53, 112, 122, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
    }

    #[test]
    fn calculate_compressed_wif () {
        assert!(U256::new(0x21d541a7ea9e21c8635019948e060e2cu128, 0x8e74e0f37d139e0966888717e98394bdu128).calculate_compressed_wif(false).iter().zip([75, 120, 77, 85, 102, 113, 54, 70, 98, 77, 71, 103, 72, 51, 114, 116, 68, 81, 90, 103, 69, 72, 98, 90, 55, 51, 81, 119, 103, 52, 51, 74, 87, 116, 57, 82, 81, 72, 112, 54, 67, 54, 85, 53, 89, 51, 57, 57, 75, 72, 100, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x91a9f63f892f6f37001f659b9b66b547u128, 0x3b7c059c409f0b49ec3f1a26e9af65f1u128).calculate_compressed_wif(false).iter().zip([76, 50, 54, 114, 121, 103, 109, 122, 84, 114, 99, 105, 54, 105, 78, 104, 51, 78, 114, 82, 70, 98, 90, 110, 78, 88, 75, 84, 82, 76, 67, 121, 87, 98, 68, 50, 107, 57, 52, 83, 112, 115, 98, 76, 105, 102, 106, 81, 106, 83, 75, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xeada6e977be6bbb812b0959590543144u128, 0x19b87258df2e237737e687b189d94088u128).calculate_compressed_wif(false).iter().zip([76, 53, 54, 69, 97, 86, 81, 118, 114, 56, 54, 54, 100, 85, 100, 121, 88, 71, 98, 66, 122, 88, 77, 66, 116, 119, 117, 68, 112, 122, 51, 117, 85, 49, 67, 57, 114, 69, 86, 57, 97, 72, 117, 77, 51, 83, 67, 84, 77, 78, 119, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7a5b78da06035cb1500f975353c968f8u128, 0x961f3aeec408c66588980595c27a010bu128).calculate_compressed_wif(false).iter().zip([76, 49, 75, 90, 72, 105, 69, 101, 67, 90, 109, 74, 66, 100, 98, 104, 88, 55, 67, 105, 81, 52, 55, 110, 76, 110, 65, 83, 111, 72, 83, 89, 115, 72, 53, 74, 54, 76, 67, 116, 74, 121, 76, 86, 57, 111, 101, 81, 103, 57, 104, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb3850d564f1e993dbb8742cdedacdd52u128, 0xe8dba57e3b330bb8bc28e3e072c3c4afu128).calculate_compressed_wif(false).iter().zip([76, 51, 69, 103, 50, 115, 98, 71, 121, 120, 118, 52, 113, 102, 117, 86, 107, 88, 115, 111, 122, 115, 106, 87, 54, 76, 87, 86, 118, 66, 69, 81, 54, 85, 85, 68, 98, 103, 109, 55, 52, 75, 116, 120, 56, 99, 52, 53, 69, 69, 114, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd2ddcf02c82988cc1260c35235b15329u128, 0x27edfb5d9ca962b1940fe368de49f257u128).calculate_compressed_wif(false).iter().zip([76, 52, 72, 99, 67, 87, 83, 109, 66, 120, 87, 115, 86, 88, 102, 102, 76, 116, 51, 77, 50, 112, 120, 69, 82, 74, 121, 105, 115, 87, 81, 80, 84, 86, 87, 66, 81, 102, 114, 116, 74, 81, 80, 86, 68, 84, 76, 88, 119, 118, 67, 112].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6b3ff39bc566df65d46a538b2549ababu128, 0x5f9ea663c8eb69b4bef08f812451dc0u128).calculate_compressed_wif(false).iter().zip([75, 122, 112, 67, 49, 54, 72, 67, 89, 52, 100, 51, 75, 82, 66, 81, 118, 56, 65, 112, 51, 114, 56, 65, 110, 84, 80, 51, 105, 98, 103, 66, 54, 119, 122, 70, 65, 115, 109, 113, 82, 52, 117, 56, 100, 99, 78, 78, 101, 115, 114, 99].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9af8cb3769a2e6d725ae3763ac52ef84u128, 0xeb3af8090763a6f3d6b8fc70fd8b6dd2u128).calculate_compressed_wif(false).iter().zip([76, 50, 81, 120, 80, 118, 115, 77, 85, 66, 52, 55, 81, 72, 97, 115, 118, 69, 89, 120, 110, 117, 120, 113, 114, 84, 77, 119, 99, 118, 50, 50, 98, 81, 90, 119, 100, 101, 51, 56, 101, 76, 54, 82, 116, 52, 118, 87, 98, 113, 87, 54].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8dd4f229809c1bcc8f519ac32e25dfc5u128, 0x946bbfa790fb3f682194e842cb17db9au128).calculate_compressed_wif(false).iter().zip([76, 49, 121, 81, 118, 120, 53, 115, 54, 98, 78, 88, 121, 81, 87, 110, 54, 71, 50, 112, 54, 90, 55, 57, 100, 65, 98, 65, 55, 107, 111, 104, 111, 90, 65, 107, 116, 57, 119, 50, 120, 78, 69, 106, 83, 56, 83, 50, 84, 100, 78, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x1d5d3bc094f8ddea2d419c0847304fa3u128, 0xd11f75683ee17d6f0c4560a23b7cb375u128).calculate_compressed_wif(false).iter().zip([75, 120, 67, 110, 113, 74, 57, 51, 50, 102, 88, 57, 52, 122, 104, 49, 110, 102, 56, 67, 55, 71, 112, 114, 55, 56, 76, 115, 75, 76, 49, 118, 82, 75, 107, 87, 122, 116, 109, 80, 100, 104, 83, 54, 107, 87, 72, 55, 122, 101, 83, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x6e51f69433872703584b0fa050fd7888u128, 0x62662390974a76423fe3b0e40c20f409u128).calculate_compressed_wif(false).iter().zip([75, 122, 118, 65, 65, 104, 107, 65, 113, 78, 100, 69, 81, 116, 100, 86, 50, 90, 107, 110, 107, 68, 110, 107, 113, 112, 84, 100, 77, 56, 55, 84, 51, 76, 52, 83, 106, 101, 71, 56, 72, 119, 98, 99, 72, 89, 52, 75, 101, 72, 82, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc6adaf09762b473874b12c2fcab4217du128, 0x3bf58f6a0655dab6e01f27397e7f8866u128).calculate_compressed_wif(false).iter().zip([76, 51, 115, 118, 53, 55, 53, 87, 70, 115, 78, 67, 57, 113, 102, 82, 80, 110, 88, 72, 82, 77, 113, 72, 77, 118, 109, 114, 107, 106, 86, 118, 50, 84, 84, 102, 49, 84, 55, 100, 100, 74, 100, 84, 66, 116, 117, 74, 98, 100, 116, 52].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2cf7476450b72cdfb2010ea3ed96052cu128, 0x703de21a56982318d952ed99dac5ff6eu128).calculate_compressed_wif(false).iter().zip([75, 120, 106, 55, 113, 112, 118, 118, 82, 55, 66, 106, 77, 51, 81, 97, 70, 120, 106, 72, 99, 119, 83, 49, 99, 66, 71, 85, 49, 71, 101, 87, 82, 119, 83, 70, 80, 97, 118, 88, 117, 53, 111, 69, 82, 70, 56, 99, 70, 51, 119, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7fd4feb308a26df7a3a10472af0539eeu128, 0x7c38ba94bb9e22a8d8e2b79aa7f9add0u128).calculate_compressed_wif(false).iter().zip([76, 49, 87, 67, 88, 106, 80, 112, 105, 105, 67, 51, 120, 115, 110, 105, 115, 106, 87, 100, 74, 74, 101, 117, 107, 69, 98, 57, 77, 68, 49, 114, 50, 99, 112, 120, 89, 82, 49, 68, 68, 106, 70, 71, 69, 89, 89, 66, 117, 114, 111, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xddbccbe3c067af700b8d353b6c2730b2u128, 0x942ddb32d23226f3f78225a00223f3fdu128).calculate_compressed_wif(false).iter().zip([76, 52, 101, 106, 114, 67, 78, 86, 74, 81, 49, 70, 56, 85, 77, 114, 117, 97, 81, 74, 88, 82, 81, 114, 70, 102, 54, 56, 71, 105, 80, 106, 97, 65, 50, 57, 69, 115, 71, 85, 119, 117, 84, 70, 107, 117, 111, 98, 82, 56, 111, 117].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf8e919a3ebeea10de67de8317c2e95d0u128, 0xa3ff36fb1a87faf1c673fdc60b610eb9u128).calculate_compressed_wif(false).iter().zip([76, 53, 90, 90, 84, 101, 49, 82, 107, 119, 83, 70, 107, 56, 107, 78, 98, 107, 56, 70, 118, 49, 98, 50, 105, 98, 105, 110, 97, 105, 77, 56, 65, 116, 87, 67, 101, 69, 75, 52, 65, 78, 56, 98, 111, 56, 120, 88, 53, 75, 50, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3ebf1a4b9c873c8fa0c33ac87cfb8db7u128, 0xcae75f539a786b2bee8db50dd8d0d272u128).calculate_compressed_wif(false).iter().zip([75, 121, 75, 103, 87, 52, 75, 86, 51, 119, 75, 71, 54, 114, 105, 50, 49, 50, 50, 111, 50, 67, 120, 81, 50, 118, 53, 112, 121, 83, 121, 107, 78, 105, 82, 51, 70, 49, 66, 72, 121, 50, 104, 52, 84, 89, 119, 103, 66, 68, 70, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf1663175bf8541d4de98240b715797cau128, 0x7b42c0a756295d1f8ecbfff98ac70fd3u128).calculate_compressed_wif(false).iter().zip([76, 53, 74, 120, 98, 90, 88, 70, 111, 121, 110, 80, 71, 74, 119, 115, 76, 81, 85, 116, 121, 120, 51, 67, 83, 97, 120, 111, 78, 89, 66, 49, 67, 65, 78, 88, 83, 56, 105, 115, 114, 112, 71, 65, 90, 111, 119, 116, 97, 109, 65, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa5fc59912027bd8a633da41228e5c60bu128, 0x70d67c2025c27fb6df5137b1146ca6fcu128).calculate_compressed_wif(false).iter().zip([76, 50, 110, 78, 57, 104, 113, 66, 88, 71, 55, 120, 86, 107, 67, 105, 71, 68, 101, 101, 111, 102, 105, 116, 109, 110, 78, 107, 78, 104, 90, 111, 90, 74, 85, 50, 82, 106, 106, 97, 84, 51, 50, 114, 103, 114, 99, 100, 114, 88, 104, 66].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x98acb114e85923ee0ab7b2823f6a600eu128, 0x955be54a4825a86dccfc1647bc8039d3u128).calculate_compressed_wif(false).iter().zip([76, 50, 76, 86, 80, 101, 105, 75, 97, 86, 76, 57, 119, 55, 57, 68, 107, 49, 109, 122, 89, 86, 103, 90, 69, 112, 53, 112, 121, 81, 100, 84, 55, 56, 99, 78, 114, 70, 50, 49, 77, 69, 77, 66, 97, 112, 89, 77, 110, 82, 67, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc0b6c3dd2c60e469c93e0034da4ff076u128, 0x565411d6d7cb1434139eec428f109176u128).calculate_compressed_wif(false).iter().zip([76, 51, 103, 75, 99, 50, 49, 80, 49, 110, 110, 122, 66, 55, 87, 67, 66, 76, 81, 105, 114, 52, 51, 86, 83, 114, 110, 100, 101, 102, 114, 75, 100, 57, 98, 114, 114, 109, 117, 103, 56, 113, 55, 87, 121, 81, 70, 49, 100, 109, 88, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4d8b9a27dc5ae07cf1ff4a37d9a25265u128, 0x9604e6db987e5ff33230b7cc74ae58au128).calculate_compressed_wif(false).iter().zip([75, 121, 112, 83, 122, 67, 53, 110, 117, 103, 87, 90, 86, 56, 98, 50, 85, 110, 116, 89, 122, 86, 116, 81, 72, 57, 97, 70, 50, 70, 51, 101, 56, 112, 72, 86, 82, 90, 57, 72, 85, 111, 68, 90, 83, 83, 51, 76, 75, 110, 65, 69].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x241e1d14250d30d43938969942ebfb01u128, 0x114c02d5c19a0ff725d1814344c3920au128).calculate_compressed_wif(false).iter().zip([75, 120, 82, 118, 70, 68, 105, 111, 66, 76, 80, 114, 86, 80, 116, 109, 114, 120, 57, 117, 98, 120, 55, 119, 50, 119, 97, 69, 99, 90, 84, 119, 122, 102, 50, 65, 101, 114, 69, 99, 104, 120, 115, 72, 86, 76, 104, 70, 65, 88, 109, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfadeddb4b281f2374c192e247f4aa192u128, 0x7356673d66eb9560bf2dd23a668d992du128).calculate_compressed_wif(false).iter().zip([76, 53, 100, 78, 83, 97, 74, 54, 77, 65, 114, 84, 116, 85, 102, 107, 115, 110, 80, 71, 77, 102, 121, 57, 87, 81, 88, 90, 82, 90, 99, 105, 50, 65, 118, 90, 99, 86, 52, 121, 121, 112, 101, 86, 55, 67, 87, 97, 67, 100, 118, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbeda4b1fb3ea0140999680893a02a819u128, 0x506fd9e7308e0d943d6045289e89ab48u128).calculate_compressed_wif(false).iter().zip([76, 51, 99, 104, 109, 66, 120, 51, 72, 104, 113, 51, 89, 99, 113, 81, 118, 77, 120, 75, 122, 101, 53, 102, 105, 97, 78, 78, 87, 76, 75, 99, 110, 74, 53, 80, 51, 69, 119, 49, 118, 98, 118, 113, 72, 71, 90, 81, 83, 71, 119, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd6d37529c2bf7ca96736f2d428033c05u128, 0x8bef9b1a896a294c14ea2b9137210726u128).calculate_compressed_wif(false).iter().zip([76, 52, 82, 74, 99, 112, 53, 101, 98, 77, 57, 104, 53, 102, 106, 102, 85, 118, 120, 71, 104, 51, 117, 121, 89, 105, 53, 78, 56, 51, 105, 106, 65, 97, 116, 72, 117, 77, 69, 54, 74, 99, 118, 99, 107, 98, 89, 119, 67, 69, 106, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x588b2050c370c07c6d24c5e886f554b3u128, 0x469af9c838fdee5871f89a6eada428d4u128).calculate_compressed_wif(false).iter().zip([75, 122, 66, 112, 120, 121, 87, 116, 72, 100, 52, 75, 56, 75, 49, 88, 121, 83, 110, 104, 97, 82, 113, 71, 53, 82, 119, 113, 53, 69, 52, 90, 99, 115, 75, 120, 118, 49, 103, 115, 89, 85, 117, 99, 84, 81, 54, 68, 77, 99, 109, 75].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9e281dd858d9018cc8611e0a41b9ad5fu128, 0x6ab725c5e5f022cbc75a4992d5d63d25u128).calculate_compressed_wif(false).iter().zip([76, 50, 88, 57, 85, 70, 109, 84, 90, 113, 100, 76, 74, 55, 107, 106, 98, 113, 82, 115, 119, 87, 117, 57, 67, 98, 56, 99, 85, 69, 66, 69, 104, 110, 54, 53, 120, 84, 53, 53, 52, 69, 57, 115, 71, 98, 98, 51, 99, 89, 107, 84].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa50005d0a50489b23fc1e36e157b3fbbu128, 0xd8085724a638ddabea62c9a65eb1514u128).calculate_compressed_wif(false).iter().zip([76, 50, 107, 84, 50, 77, 51, 52, 120, 55, 101, 117, 112, 114, 84, 75, 84, 89, 65, 83, 100, 120, 105, 109, 81, 110, 117, 74, 110, 102, 49, 98, 72, 107, 53, 50, 68, 50, 100, 122, 56, 57, 87, 98, 111, 97, 67, 107, 120, 117, 120, 116].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9f109be3c062d1978b4055f03e6909abu128, 0x331da9af7cc518f1f1f1434f375b4db7u128).calculate_compressed_wif(false).iter().zip([76, 50, 89, 117, 114, 120, 103, 68, 75, 107, 68, 80, 104, 104, 72, 56, 114, 97, 86, 57, 74, 119, 104, 104, 112, 89, 110, 74, 122, 113, 119, 72, 118, 54, 115, 78, 72, 86, 88, 114, 107, 114, 68, 120, 110, 68, 106, 70, 54, 102, 110, 122].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x35a92ab4f67b50f2be9cad19047ab9d2u128, 0x22647f8183b2536af180cb04b8d61132u128).calculate_compressed_wif(false).iter().zip([75, 121, 50, 50, 57, 57, 87, 54, 115, 57, 98, 115, 86, 122, 103, 54, 54, 106, 100, 112, 100, 110, 119, 70, 74, 78, 81, 117, 74, 99, 52, 109, 80, 120, 122, 54, 111, 81, 65, 80, 67, 115, 86, 80, 84, 119, 50, 99, 97, 87, 113, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9a3ba462d7b4d28af0920dfdedd06efu128, 0x7091519d3c6acadb518af1513c03dd48u128).calculate_compressed_wif(false).iter().zip([75, 119, 89, 83, 122, 83, 120, 116, 103, 49, 69, 66, 119, 97, 75, 85, 50, 83, 67, 54, 71, 100, 110, 84, 116, 109, 113, 49, 87, 82, 49, 66, 104, 86, 87, 49, 72, 81, 88, 120, 77, 74, 98, 54, 90, 106, 78, 121, 57, 71, 109, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4b06ce581253ba135e0dc4c5507b54d8u128, 0xc50f167c55830a67b7b54fd7302035cu128).calculate_compressed_wif(false).iter().zip([75, 121, 106, 90, 49, 106, 115, 77, 106, 122, 74, 68, 99, 119, 112, 67, 52, 109, 74, 89, 69, 121, 110, 50, 103, 74, 82, 51, 52, 102, 68, 98, 109, 81, 117, 56, 120, 117, 98, 84, 55, 105, 97, 52, 72, 112, 114, 76, 103, 49, 116, 55].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xea8a22897f91d6821b7bcb7849ae5d76u128, 0x883063fd3086309794c27ba2ebdd2d77u128).calculate_compressed_wif(false).iter().zip([76, 53, 53, 100, 68, 81, 104, 70, 114, 121, 52, 90, 102, 78, 113, 68, 67, 49, 55, 65, 49, 122, 115, 90, 83, 71, 55, 97, 117, 99, 72, 50, 107, 72, 113, 81, 107, 106, 106, 77, 54, 119, 115, 83, 109, 115, 53, 115, 98, 78, 75, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x32a3b8de6eb0be8baa5093c76b549cb1u128, 0x398b320bae0f497b5a9d677b7029771fu128).calculate_compressed_wif(false).iter().zip([75, 120, 118, 57, 87, 89, 76, 99, 55, 100, 97, 118, 88, 105, 72, 49, 113, 112, 100, 54, 103, 76, 116, 122, 117, 113, 65, 50, 100, 105, 82, 89, 53, 83, 77, 103, 87, 66, 116, 114, 49, 118, 50, 113, 110, 80, 110, 68, 81, 106, 51, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xdea11af58cd95b0e492d2129ca5f900u128, 0xe6191f0aa31ccbcb2f9b4c55633b8fbu128).calculate_compressed_wif(false).iter().zip([75, 119, 103, 107, 119, 119, 49, 88, 69, 53, 66, 116, 85, 57, 54, 82, 70, 120, 80, 105, 84, 51, 113, 111, 70, 87, 68, 65, 99, 51, 99, 105, 118, 103, 99, 111, 122, 112, 104, 78, 99, 115, 97, 98, 86, 50, 67, 86, 120, 90, 89, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x356850fa76ecf4f2aa975acd7b98b615u128, 0xb87536da33de7ce2d86f4156030c1a85u128).calculate_compressed_wif(false).iter().zip([75, 121, 49, 88, 97, 100, 81, 52, 121, 53, 102, 99, 100, 75, 77, 57, 101, 109, 87, 82, 103, 110, 118, 83, 84, 57, 50, 103, 102, 87, 105, 53, 106, 121, 65, 77, 113, 116, 111, 118, 109, 90, 72, 106, 90, 114, 76, 115, 88, 81, 113, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7f046fcbb486fd6e1160e40c4c3f71e4u128, 0x86e6b0aad86c10ff9ab1b635a7164bd7u128).calculate_compressed_wif(false).iter().zip([76, 49, 85, 99, 103, 80, 103, 118, 67, 56, 115, 75, 71, 105, 122, 82, 104, 71, 70, 53, 86, 121, 116, 77, 107, 85, 97, 50, 114, 102, 86, 104, 102, 110, 84, 49, 109, 109, 83, 57, 86, 74, 112, 112, 121, 90, 54, 66, 81, 51, 80, 56].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4b96a726e753675aa19a6b052f308b4u128, 0x8f957e2550a9bc42aaa5470e59c0d165u128).calculate_compressed_wif(false).iter().zip([75, 119, 78, 116, 112, 90, 88, 119, 50, 90, 102, 90, 98, 71, 65, 122, 53, 68, 53, 50, 120, 68, 111, 116, 53, 54, 65, 80, 103, 69, 90, 52, 119, 74, 86, 52, 121, 74, 104, 77, 51, 86, 100, 100, 71, 83, 68, 119, 77, 100, 88, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfeb756d87874726c0bc4e64bca1fe921u128, 0x7991678d9fbf2b5ffe03f6ecf00cf550u128).calculate_compressed_wif(false).iter().zip([76, 53, 107, 114, 49, 100, 49, 49, 77, 76, 107, 72, 110, 114, 115, 88, 68, 56, 97, 54, 67, 105, 80, 80, 83, 109, 57, 99, 74, 86, 86, 119, 56, 90, 104, 101, 74, 98, 86, 115, 97, 97, 53, 85, 65, 56, 68, 111, 118, 49, 116, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5ba5dc667f3a5bdb718b711c72f768a4u128, 0x73d970bb36728e1bdf54fe8700345802u128).calculate_compressed_wif(false).iter().zip([75, 122, 72, 114, 121, 81, 89, 69, 69, 116, 116, 114, 65, 83, 67, 115, 105, 69, 89, 65, 113, 74, 120, 87, 89, 107, 81, 90, 75, 110, 82, 72, 102, 116, 103, 121, 107, 120, 86, 72, 117, 83, 70, 65, 113, 50, 84, 107, 103, 98, 98, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9c0c209d399aa9bd98f8ed0dc2620045u128, 0xdda81e787b3d0bf385c93817586c99b6u128).calculate_compressed_wif(false).iter().zip([76, 50, 84, 51, 101, 120, 82, 111, 77, 99, 70, 113, 83, 112, 85, 83, 113, 117, 49, 107, 85, 51, 78, 111, 118, 121, 117, 106, 120, 105, 102, 113, 80, 106, 70, 77, 72, 103, 97, 57, 67, 90, 53, 65, 106, 121, 90, 116, 84, 69, 71, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xac99859d4a4f540848826375a12d0fc5u128, 0x1c3a0b7daca5517b9463ff21a710397du128).calculate_compressed_wif(false).iter().zip([76, 51, 49, 68, 113, 87, 103, 102, 66, 116, 102, 82, 51, 86, 88, 78, 87, 106, 80, 53, 75, 98, 114, 101, 117, 121, 71, 66, 53, 53, 70, 66, 117, 74, 107, 86, 106, 105, 109, 90, 97, 101, 83, 74, 71, 90, 100, 71, 90, 54, 118, 113].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9a5dae6895ebe97ac6b67cb5a584f25eu128, 0xcbf8b559a400db9d43cb94b10fd225d9u128).calculate_compressed_wif(false).iter().zip([76, 50, 80, 110, 53, 110, 102, 99, 112, 69, 74, 114, 118, 52, 107, 77, 97, 103, 97, 85, 106, 81, 112, 56, 107, 80, 107, 65, 98, 78, 68, 110, 72, 102, 71, 101, 81, 110, 84, 88, 70, 70, 103, 104, 72, 119, 112, 107, 107, 111, 52, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x581783ebb8483044aecb844dd83a768cu128, 0xe3e94cfd0dc1dd0531ce9208b6c0d12eu128).calculate_compressed_wif(false).iter().zip([75, 122, 65, 120, 51, 114, 69, 50, 50, 114, 83, 122, 104, 88, 71, 72, 114, 76, 88, 106, 111, 56, 84, 78, 99, 117, 70, 75, 54, 114, 90, 98, 76, 122, 90, 119, 105, 52, 102, 115, 105, 116, 101, 90, 99, 76, 69, 53, 114, 70, 104, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2566f9fe0a58844fac28f5278c8dc63du128, 0xa56d6a4a21ad96000e87abc419ca4939u128).calculate_compressed_wif(false).iter().zip([75, 120, 85, 82, 53, 97, 107, 75, 106, 85, 113, 51, 81, 113, 118, 82, 50, 75, 119, 49, 78, 56, 89, 75, 97, 88, 67, 103, 49, 90, 107, 70, 57, 100, 80, 75, 109, 74, 88, 54, 52, 109, 89, 56, 86, 53, 118, 71, 118, 51, 78, 90].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xff8c7980928ae9ac267cae654d9d9fafu128, 0x45b7940a56a1b7e38671e25cc842868cu128).calculate_compressed_wif(false).iter().zip([76, 53, 110, 84, 115, 115, 118, 54, 97, 50, 89, 85, 120, 111, 70, 100, 53, 101, 115, 52, 89, 110, 77, 97, 99, 118, 102, 97, 53, 69, 75, 51, 115, 99, 78, 74, 86, 77, 121, 107, 85, 85, 71, 89, 66, 78, 89, 107, 75, 55, 51, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xea658fa78734d092008039da3141b1beu128, 0xe9de7d13f650149d1150ea8764aa419cu128).calculate_compressed_wif(false).iter().zip([76, 53, 53, 77, 55, 66, 86, 88, 78, 116, 89, 112, 87, 98, 72, 103, 110, 57, 118, 103, 87, 76, 77, 80, 87, 53, 77, 112, 98, 71, 120, 76, 53, 84, 80, 105, 76, 66, 69, 49, 111, 81, 98, 99, 100, 102, 116, 89, 66, 50, 54, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa2d7fdbf25f11c4694b07b89f346fd66u128, 0x2e053b643abb1027466b01ed19745ee7u128).calculate_compressed_wif(false).iter().zip([76, 50, 103, 70, 117, 83, 98, 77, 78, 107, 104, 69, 89, 53, 74, 51, 75, 82, 115, 87, 77, 53, 122, 107, 68, 70, 55, 83, 100, 82, 56, 50, 87, 70, 75, 88, 110, 121, 56, 110, 115, 99, 98, 66, 69, 115, 76, 65, 105, 85, 110, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa4f4894a98b4019cad66706cef87ecb4u128, 0x692187d540ab8dbc6955b9d2550cd92bu128).calculate_compressed_wif(false).iter().zip([76, 50, 107, 77, 120, 119, 88, 122, 119, 50, 81, 65, 100, 52, 109, 78, 82, 120, 109, 110, 90, 117, 113, 106, 71, 70, 109, 101, 84, 83, 77, 54, 85, 119, 75, 76, 113, 80, 68, 119, 115, 85, 109, 81, 68, 77, 104, 82, 49, 68, 121, 115].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xadd2921a1e34b46f4a580a9cf00d342du128, 0x1bdaa3acf98a9d2d81e2ee1334ca33d5u128).calculate_compressed_wif(false).iter().zip([76, 51, 51, 98, 104, 118, 88, 49, 49, 89, 114, 55, 66, 67, 120, 104, 52, 77, 87, 101, 109, 50, 78, 72, 110, 87, 65, 82, 76, 114, 84, 115, 101, 122, 104, 74, 66, 54, 86, 115, 85, 81, 102, 117, 82, 106, 84, 72, 72, 50, 86, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc2ae9c90d801a084bc5951232dd3d529u128, 0x9effbf0e07524571678a93764de06b88u128).calculate_compressed_wif(false).iter().zip([76, 51, 107, 57, 87, 54, 110, 89, 118, 68, 111, 53, 97, 74, 120, 57, 68, 113, 98, 78, 53, 120, 121, 50, 77, 80, 122, 118, 87, 106, 107, 50, 110, 104, 66, 85, 55, 107, 114, 69, 56, 103, 111, 116, 74, 98, 106, 121, 80, 84, 50, 83].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9c5d75e1571c1687543ccbc20409f95au128, 0x1c74c3015a9247a6f6dddf1e712c021fu128).calculate_compressed_wif(false).iter().zip([76, 50, 84, 102, 85, 86, 122, 70, 72, 68, 97, 113, 70, 88, 89, 69, 107, 65, 53, 77, 113, 118, 100, 118, 114, 118, 68, 88, 98, 112, 112, 78, 88, 111, 84, 102, 99, 82, 105, 67, 69, 120, 118, 89, 68, 107, 97, 103, 71, 55, 74, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd15055481446599bdcede51836f3d234u128, 0x2666205feed6023a9f55d2ea538df41bu128).calculate_compressed_wif(false).iter().zip([76, 52, 69, 98, 57, 88, 104, 106, 72, 85, 110, 117, 76, 78, 112, 119, 111, 105, 65, 107, 120, 84, 67, 100, 105, 72, 97, 49, 99, 111, 98, 50, 85, 105, 66, 89, 75, 51, 109, 120, 70, 86, 103, 66, 52, 111, 115, 120, 82, 114, 76, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xff9cff51a774ae0d5389220ee56ac09eu128, 0xcbf8832545cb8569d2889ad07dddb091u128).calculate_compressed_wif(false).iter().zip([76, 53, 110, 98, 57, 118, 114, 111, 118, 78, 105, 100, 82, 52, 76, 76, 102, 118, 81, 54, 74, 75, 88, 72, 86, 83, 118, 111, 51, 82, 100, 103, 89, 101, 52, 119, 66, 67, 86, 67, 106, 88, 70, 116, 53, 81, 120, 66, 89, 119, 76, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf728d34698b8466d1f12908e6a6d5a7fu128, 0x6a5be0828b2be678e07fbea8f6200dfu128).calculate_compressed_wif(false).iter().zip([76, 53, 87, 65, 51, 52, 80, 77, 83, 70, 70, 88, 120, 110, 56, 118, 109, 56, 57, 57, 99, 105, 111, 86, 68, 113, 88, 117, 118, 105, 111, 115, 114, 101, 57, 85, 121, 106, 113, 110, 112, 70, 101, 69, 100, 104, 117, 78, 121, 101, 102, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf234f003f151b413505163893f116c57u128, 0x7bc3ea8edc96efc732e62912175318bcu128).calculate_compressed_wif(false).iter().zip([76, 53, 76, 88, 101, 90, 119, 68, 119, 118, 71, 80, 66, 65, 56, 106, 120, 112, 57, 56, 83, 56, 89, 52, 102, 87, 84, 111, 121, 69, 72, 78, 71, 53, 82, 122, 66, 98, 56, 118, 111, 119, 104, 74, 99, 86, 68, 80, 122, 76, 114, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe0cff9acbf46a2496e0ea027426ce47cu128, 0xdec6784077ac2b258a4a0febcc6a0e70u128).calculate_compressed_wif(false).iter().zip([76, 52, 107, 105, 88, 100, 57, 86, 97, 118, 107, 122, 105, 52, 114, 54, 109, 67, 89, 49, 117, 55, 99, 65, 80, 72, 54, 74, 54, 100, 111, 112, 83, 89, 71, 90, 81, 81, 53, 83, 81, 120, 78, 66, 52, 70, 80, 74, 87, 49, 72, 121].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x82195968c88b354285845a0c2911644eu128, 0xa1b99d811a047d2b6636599e5c545c2du128).calculate_compressed_wif(false).iter().zip([76, 49, 97, 99, 56, 55, 49, 68, 82, 72, 84, 68, 70, 77, 53, 85, 84, 77, 81, 85, 109, 57, 49, 75, 67, 114, 71, 117, 50, 115, 53, 68, 90, 72, 105, 114, 120, 120, 105, 78, 99, 51, 83, 99, 77, 65, 51, 119, 110, 87, 120, 67].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2da726df12b6d32c06de281851810a5du128, 0x765c4054bb20f8039d48c27f72bfc32bu128).calculate_compressed_wif(false).iter().zip([75, 120, 107, 84, 74, 71, 80, 77, 100, 86, 88, 49, 65, 71, 50, 52, 104, 80, 71, 65, 50, 101, 85, 107, 83, 72, 49, 100, 54, 121, 53, 70, 100, 67, 98, 109, 103, 117, 66, 114, 110, 115, 88, 107, 107, 85, 101, 69, 116, 85, 71, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf27bf636a3ea8652f97bb9e2fbcab40au128, 0xa220ecd56d096d7b25f141db81dc8deu128).calculate_compressed_wif(false).iter().zip([76, 53, 77, 52, 118, 110, 98, 53, 65, 66, 107, 115, 112, 100, 119, 65, 50, 119, 54, 104, 57, 109, 84, 81, 112, 84, 102, 102, 52, 68, 56, 99, 78, 89, 98, 53, 74, 116, 66, 71, 107, 70, 65, 100, 75, 105, 54, 52, 109, 65, 81, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x10dc960494d2a3dd92c24e025c6f0c56u128, 0x58314c1f12290a67b8600ebf95ab43e9u128).calculate_compressed_wif(false).iter().zip([75, 119, 110, 86, 70, 52, 54, 97, 119, 55, 75, 111, 76, 49, 72, 55, 71, 120, 76, 76, 120, 83, 116, 76, 69, 116, 55, 66, 77, 74, 114, 103, 97, 117, 111, 105, 98, 122, 82, 122, 54, 114, 66, 77, 53, 86, 112, 49, 54, 89, 71, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x2fb6b5ab4ea5e8e3168bb81deb14d17u128, 0x9e974bee245d474423a7105ee782a658u128).calculate_compressed_wif(false).iter().zip([75, 119, 75, 87, 81, 66, 83, 103, 77, 90, 117, 103, 98, 71, 114, 88, 53, 116, 57, 97, 105, 115, 67, 112, 111, 75, 82, 99, 118, 76, 49, 89, 55, 74, 122, 55, 74, 116, 109, 97, 112, 51, 105, 100, 53, 109, 67, 89, 78, 87, 74, 100].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5b49c7147dca64febe5c7e170686fab4u128, 0x8c5a5fbf0f34fe59e7b947d84894ad83u128).calculate_compressed_wif(false).iter().zip([75, 122, 72, 65, 82, 71, 67, 71, 100, 109, 80, 97, 104, 76, 100, 90, 51, 104, 104, 53, 78, 87, 100, 111, 77, 121, 98, 107, 57, 118, 89, 78, 67, 105, 78, 69, 110, 84, 57, 57, 100, 82, 75, 68, 50, 72, 117, 74, 77, 86, 100, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf5e80f3651b2cc479a1a530fb6af9d77u128, 0x4daebd00aca69c83746e5df5b88bdf5au128).calculate_compressed_wif(false).iter().zip([76, 53, 84, 105, 109, 88, 82, 117, 115, 78, 100, 104, 85, 80, 56, 98, 86, 110, 76, 120, 71, 117, 49, 84, 102, 66, 80, 118, 86, 86, 98, 53, 105, 75, 97, 74, 72, 115, 69, 109, 103, 52, 74, 100, 57, 67, 74, 75, 55, 85, 70, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb1dc67c95693c9df0f5ac26fea408eafu128, 0xe4edb7e25284d5b30720b3a3389aa616u128).calculate_compressed_wif(false).iter().zip([76, 51, 66, 84, 49, 113, 115, 112, 115, 76, 121, 57, 56, 80, 87, 55, 67, 74, 113, 76, 78, 68, 81, 104, 114, 105, 87, 52, 105, 56, 78, 116, 111, 104, 54, 65, 105, 72, 118, 71, 66, 112, 106, 78, 118, 119, 119, 112, 81, 84, 99, 65].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8fbc63cbfa1a8e0f092d38642d4b1f05u128, 0xcb0067d52cd9c5b7782f2d02c32feee9u128).calculate_compressed_wif(false).iter().zip([76, 50, 51, 55, 99, 51, 115, 104, 118, 68, 110, 49, 103, 111, 99, 49, 86, 77, 115, 75, 116, 69, 82, 80, 110, 51, 99, 84, 65, 50, 114, 82, 82, 54, 118, 116, 118, 106, 54, 68, 69, 71, 68, 100, 107, 53, 70, 51, 70, 81, 115, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x8476264364ffd7f8c0a2b8cf3468f2d1u128, 0xcc981ddb8e0942f0263301ab292f9791u128).calculate_compressed_wif(false).iter().zip([76, 49, 102, 67, 85, 117, 120, 116, 120, 72, 102, 82, 78, 100, 105, 90, 49, 74, 122, 97, 65, 118, 75, 65, 87, 100, 102, 121, 103, 81, 113, 49, 66, 104, 90, 57, 101, 100, 84, 82, 67, 86, 118, 74, 122, 109, 86, 98, 111, 51, 54, 85].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9859902fcd6b6848446afc264cf1e4fu128, 0x1a52699ed8c0e3f0770af744de5a95b4u128).calculate_compressed_wif(false).iter().zip([75, 119, 89, 68, 105, 112, 87, 53, 75, 111, 112, 99, 49, 116, 51, 54, 82, 50, 119, 81, 76, 113, 119, 110, 110, 112, 101, 78, 84, 98, 65, 65, 103, 76, 68, 120, 111, 122, 113, 66, 119, 86, 76, 121, 103, 87, 66, 54, 107, 81, 103, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xf52d7438a7c11302c4ca13c41bc271beu128, 0x96b5cc86fb4ecf9e240d949e7f798acfu128).calculate_compressed_wif(false).iter().zip([76, 53, 83, 74, 97, 119, 85, 113, 85, 75, 118, 78, 115, 77, 114, 122, 106, 50, 53, 100, 54, 83, 106, 121, 107, 114, 67, 65, 89, 117, 109, 82, 112, 65, 114, 56, 106, 117, 90, 54, 84, 71, 106, 111, 52, 81, 81, 112, 82, 99, 120, 86].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb17684e845c00f5c9135c70585db2259u128, 0xf6705bf2775e881e0307211b80c81456u128).calculate_compressed_wif(false).iter().zip([76, 51, 65, 103, 57, 74, 56, 72, 74, 106, 110, 83, 80, 81, 109, 109, 76, 50, 84, 117, 76, 76, 98, 68, 82, 55, 112, 49, 50, 115, 105, 51, 104, 54, 54, 88, 115, 87, 67, 117, 69, 89, 56, 55, 71, 83, 69, 84, 117, 67, 112, 103].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa35e8561de1afb7b784bd4c67c82757du128, 0x434f4c459f1c6de85e5cf273f7c5ac22u128).calculate_compressed_wif(false).iter().zip([76, 50, 104, 72, 57, 112, 114, 102, 110, 84, 87, 69, 103, 116, 101, 86, 50, 51, 72, 78, 106, 89, 119, 100, 86, 88, 82, 122, 82, 103, 76, 88, 105, 85, 110, 51, 101, 122, 75, 55, 53, 68, 122, 52, 90, 98, 117, 122, 110, 110, 75, 53].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x156036f9169a028f7d226c3bf5d039c0u128, 0x97870147797500a6153fc3c3aa50bb28u128).calculate_compressed_wif(false).iter().zip([75, 119, 119, 71, 67, 51, 68, 113, 66, 111, 113, 88, 66, 57, 112, 51, 116, 99, 88, 122, 98, 85, 85, 77, 65, 116, 69, 107, 118, 90, 72, 84, 121, 72, 100, 99, 116, 85, 90, 88, 65, 103, 74, 90, 66, 80, 113, 75, 77, 115, 107, 68].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x47a18007c87bb9449ed5ba76d8ab44a1u128, 0x151065a94dfefd28e7f14441f0718d62u128).calculate_compressed_wif(false).iter().zip([75, 121, 99, 120, 65, 86, 67, 118, 76, 122, 82, 117, 53, 115, 111, 86, 67, 103, 109, 68, 67, 65, 81, 52, 121, 68, 85, 115, 122, 109, 111, 113, 68, 103, 53, 54, 81, 76, 72, 53, 110, 118, 109, 121, 56, 55, 107, 55, 52, 67, 80, 89].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7f7eae8019130020f9b9ffb9703a4df9u128, 0x4b6eb23f2ba3cca2ba8b6c7b69ea8770u128).calculate_compressed_wif(false).iter().zip([76, 49, 86, 89, 87, 121, 86, 115, 104, 49, 115, 80, 67, 54, 86, 57, 83, 102, 104, 120, 75, 109, 113, 115, 78, 87, 75, 111, 67, 99, 103, 65, 52, 68, 105, 88, 101, 70, 85, 49, 107, 110, 83, 86, 100, 57, 119, 117, 85, 77, 97, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcb3ba35358f812fc9950308a347c1ec0u128, 0xb8212d3c2e8502d51ead8ea3f73cc72au128).calculate_compressed_wif(false).iter().zip([76, 52, 50, 109, 90, 113, 111, 54, 97, 78, 119, 111, 110, 102, 104, 115, 69, 84, 51, 65, 70, 83, 106, 81, 111, 121, 106, 112, 70, 70, 50, 116, 82, 52, 106, 115, 54, 98, 65, 101, 98, 51, 103, 114, 98, 117, 75, 97, 116, 116, 81, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xc3f45b37714d60be5c5cc069c8863928u128, 0xa3c7e4f1b4c6023237ddc11fe9dfb720u128).calculate_compressed_wif(false).iter().zip([76, 51, 110, 99, 120, 112, 53, 84, 82, 66, 55, 89, 89, 116, 49, 70, 103, 85, 98, 109, 49, 53, 52, 106, 114, 97, 75, 67, 72, 107, 53, 83, 82, 110, 54, 87, 105, 56, 117, 99, 99, 114, 119, 71, 76, 105, 99, 107, 85, 66, 67, 88].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xb356ece739b58c219509652030a6d8c9u128, 0x3d79e56539cd81bcaebee13f152dd108u128).calculate_compressed_wif(false).iter().zip([76, 51, 69, 75, 105, 100, 81, 106, 56, 57, 98, 82, 80, 88, 72, 52, 74, 68, 90, 53, 116, 82, 52, 110, 78, 109, 100, 82, 117, 112, 84, 71, 70, 122, 116, 98, 117, 117, 102, 87, 100, 72, 78, 83, 105, 78, 101, 83, 77, 86, 110, 98].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa334ebae8fc1838a271edeffb6dd6635u128, 0xb2f59885772050c1311b4f58f5b2f10au128).calculate_compressed_wif(false).iter().zip([76, 50, 103, 120, 113, 67, 89, 66, 76, 97, 107, 118, 53, 50, 119, 117, 86, 69, 103, 103, 54, 54, 118, 78, 115, 89, 106, 88, 106, 78, 97, 107, 114, 83, 74, 120, 107, 99, 70, 77, 67, 115, 77, 115, 109, 105, 116, 122, 65, 98, 119, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xbe527d36f299ad3442c57ae331bf847cu128, 0xe48e6d9cf4a9246ceb2788552e483e05u128).calculate_compressed_wif(false).iter().zip([76, 51, 98, 102, 120, 70, 84, 114, 89, 87, 101, 111, 115, 78, 65, 55, 97, 104, 107, 88, 78, 90, 85, 83, 118, 120, 117, 101, 81, 80, 51, 85, 65, 83, 54, 116, 120, 90, 80, 112, 104, 105, 67, 97, 75, 119, 110, 104, 76, 82, 115, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x75066ddaaf99edaad6d94654e22e2bb7u128, 0xc41a51bad22faf2b59bc72fcfe081493u128).calculate_compressed_wif(false).iter().zip([76, 49, 57, 67, 55, 88, 67, 85, 120, 78, 77, 76, 72, 77, 51, 72, 66, 117, 72, 104, 66, 115, 75, 114, 78, 81, 106, 106, 98, 101, 80, 83, 50, 49, 120, 81, 74, 113, 52, 65, 116, 102, 69, 101, 107, 49, 68, 105, 56, 105, 76, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x35eace74a64577385e59ecc15afe7628u128, 0x323352f13cc8aa30b9eefa01aa14ab51u128).calculate_compressed_wif(false).iter().zip([75, 121, 50, 88, 51, 112, 107, 66, 89, 89, 118, 104, 119, 84, 117, 51, 101, 113, 72, 57, 105, 106, 56, 72, 100, 55, 67, 115, 67, 49, 81, 84, 97, 120, 116, 100, 51, 114, 75, 70, 90, 52, 77, 51, 74, 90, 105, 118, 72, 112, 80, 76].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xcac0ad9feb5f56173d92e2822e47cfbcu128, 0x2fb82e1d9d9fd9df21528b640ebb8f78u128).calculate_compressed_wif(false).iter().zip([76, 52, 49, 113, 81, 122, 119, 104, 56, 111, 81, 119, 74, 113, 109, 66, 110, 86, 122, 82, 76, 81, 68, 66, 87, 111, 70, 102, 50, 51, 83, 50, 103, 49, 102, 83, 85, 71, 115, 121, 65, 119, 70, 76, 52, 76, 87, 72, 83, 110, 98, 80].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x61c6753453d41bce99f57ed5ba7fe591u128, 0xceb98ecbb3233cad485473c8bff117acu128).calculate_compressed_wif(false).iter().zip([75, 122, 86, 109, 111, 55, 71, 107, 67, 81, 107, 69, 90, 102, 74, 105, 80, 75, 53, 99, 89, 65, 107, 71, 105, 67, 114, 65, 102, 81, 88, 118, 101, 111, 112, 117, 120, 83, 99, 51, 53, 78, 110, 83, 105, 67, 78, 116, 55, 98, 74, 70].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3fef3c79047c8182339aae1abef8e854u128, 0xfc6c3a06ddea687a3f695f45d0a8dbe8u128).calculate_compressed_wif(false).iter().zip([75, 121, 77, 122, 83, 106, 116, 82, 65, 87, 56, 90, 71, 76, 57, 122, 76, 68, 53, 119, 57, 100, 84, 120, 119, 57, 83, 82, 104, 105, 121, 66, 50, 107, 78, 90, 70, 53, 103, 54, 112, 83, 53, 97, 102, 97, 121, 122, 102, 70, 90, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xd408408aa9a0531d73358cd56b88fdd6u128, 0x8ccf58114970ae710d18305417426322u128).calculate_compressed_wif(false).iter().zip([76, 52, 75, 115, 100, 114, 52, 70, 54, 86, 120, 78, 90, 57, 65, 107, 90, 55, 68, 112, 103, 83, 97, 83, 112, 76, 98, 81, 122, 51, 101, 76, 115, 118, 101, 119, 97, 98, 66, 67, 109, 72, 101, 87, 106, 114, 78, 77, 101, 76, 106, 102].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa562a44ef5f96076d3b7df3be676158cu128, 0xd57f8541ee7d3a1ec8f4678e5b3221f2u128).calculate_compressed_wif(false).iter().zip([76, 50, 109, 67, 84, 83, 82, 103, 106, 74, 80, 90, 65, 81, 102, 66, 90, 76, 122, 112, 50, 113, 74, 49, 56, 98, 112, 74, 86, 65, 72, 122, 122, 65, 103, 56, 70, 53, 115, 102, 55, 51, 75, 101, 116, 54, 97, 57, 75, 115, 53, 114].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x532ec47f3695cbed98cc6cdbcc5b9cdeu128, 0x8d64ea2a60c07dc07d1961c44445422cu128).calculate_compressed_wif(false).iter().zip([75, 122, 49, 81, 90, 118, 50, 71, 118, 120, 65, 88, 50, 98, 50, 118, 85, 104, 87, 106, 112, 81, 117, 115, 117, 102, 75, 104, 70, 88, 112, 80, 76, 102, 52, 85, 72, 66, 74, 54, 56, 101, 72, 112, 111, 104, 56, 51, 77, 102, 105, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x96e6edb45038aecb39e96068851b2cdcu128, 0xce1c6ec5d999b35d6fbf81a62180bb41u128).calculate_compressed_wif(false).iter().zip([76, 50, 72, 51, 89, 115, 120, 66, 85, 67, 111, 72, 67, 110, 90, 53, 87, 99, 74, 119, 77, 120, 70, 109, 83, 50, 113, 80, 100, 57, 84, 76, 69, 111, 66, 99, 66, 66, 112, 54, 74, 71, 69, 53, 82, 51, 116, 104, 56, 111, 112, 71].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x4a5ab8f46d35a68f2cda840212ff0910u128, 0xb35ae2f4765b877cfe3dc13f9224b463u128).calculate_compressed_wif(false).iter().zip([75, 121, 105, 70, 69, 54, 90, 52, 119, 82, 87, 67, 109, 70, 49, 55, 85, 50, 112, 78, 115, 117, 119, 110, 53, 80, 83, 119, 88, 75, 75, 87, 68, 84, 71, 104, 76, 122, 66, 52, 98, 111, 109, 99, 67, 101, 51, 56, 51, 74, 85, 78].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xe6bb5dcb3dfd24119ef0c9160e6077b7u128, 0x96db956a76e555c0987c4360c4f8672au128).calculate_compressed_wif(false).iter().zip([76, 52, 120, 68, 118, 70, 109, 121, 54, 72, 90, 121, 112, 122, 84, 121, 76, 68, 90, 106, 53, 88, 103, 90, 90, 74, 104, 54, 104, 98, 105, 68, 72, 54, 54, 121, 72, 69, 122, 77, 67, 53, 119, 118, 113, 72, 107, 84, 53, 118, 119, 72].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xfada94d285682d6170d4f31ec17f7feu128, 0xe1d8f24e7b2c962ba2f66ceebbc9b178u128).calculate_compressed_wif(false).iter().zip([75, 119, 107, 66, 113, 70, 84, 65, 122, 113, 51, 69, 56, 65, 82, 70, 103, 71, 109, 88, 114, 52, 121, 97, 56, 103, 107, 113, 100, 67, 88, 72, 56, 49, 105, 66, 65, 68, 81, 89, 49, 121, 107, 50, 89, 118, 113, 53, 103, 98, 51, 104].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5692ce416e73eab14bb8c7f9bd03550bu128, 0xcde1ce54887920846199825c748085c9u128).calculate_compressed_wif(false).iter().zip([75, 122, 55, 122, 114, 110, 81, 105, 83, 81, 113, 83, 122, 101, 65, 100, 66, 67, 103, 56, 66, 83, 89, 103, 112, 51, 57, 107, 103, 106, 72, 116, 68, 51, 98, 122, 107, 90, 51, 116, 110, 50, 117, 84, 57, 55, 68, 114, 111, 97, 81, 74].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x7cce1de68f22afd47533396c465722a9u128, 0x61dc34a3b494916b36d0eafe77dd9ad3u128).calculate_compressed_wif(false).iter().zip([76, 49, 81, 75, 71, 87, 89, 82, 113, 55, 114, 50, 102, 78, 114, 52, 118, 82, 77, 72, 97, 90, 110, 74, 107, 119, 97, 105, 75, 67, 116, 114, 65, 69, 81, 69, 107, 70, 115, 84, 75, 50, 72, 51, 66, 49, 113, 72, 50, 116, 101, 111].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x9ee2fdde157976f053613e0ee3f2be89u128, 0x8245e2fe99da76f4ec988cc7ed4f143du128).calculate_compressed_wif(false).iter().zip([76, 50, 89, 90, 109, 106, 68, 100, 106, 84, 65, 87, 54, 52, 98, 71, 89, 111, 76, 109, 98, 75, 89, 115, 106, 66, 69, 74, 81, 121, 107, 120, 99, 72, 78, 57, 119, 50, 77, 114, 111, 72, 114, 67, 57, 84, 86, 86, 97, 53, 101, 106].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x65803bd107a060830dc4f8597e5e5726u128, 0x764b0047436dd74d2aa6ce63783d2f8cu128).calculate_compressed_wif(false).iter().zip([75, 122, 100, 49, 114, 50, 113, 67, 66, 52, 107, 69, 99, 117, 51, 50, 78, 77, 72, 54, 99, 89, 101, 98, 105, 97, 70, 117, 86, 100, 102, 81, 99, 90, 74, 70, 101, 99, 53, 56, 110, 69, 110, 83, 103, 100, 112, 55, 119, 83, 69, 49].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0xa0e338fd9acd484ef71372052b0cfe22u128, 0xa564a2eb7903ff0e4f7fd19b11b1dd3u128).calculate_compressed_wif(false).iter().zip([76, 50, 99, 84, 77, 121, 113, 110, 56, 120, 116, 69, 105, 84, 100, 106, 89, 66, 76, 105, 55, 78, 110, 88, 112, 90, 66, 67, 49, 84, 90, 81, 113, 53, 114, 102, 115, 88, 100, 68, 104, 97, 85, 88, 97, 66, 69, 112, 107, 112, 84, 120].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x3c81d8fe44090b3f19cbd28a1730bccfu128, 0xebfc384dfc0a9426a278b054eeab2e8cu128).calculate_compressed_wif(false).iter().zip([75, 121, 70, 76, 51, 50, 85, 88, 105, 102, 72, 72, 51, 98, 55, 112, 66, 49, 75, 57, 68, 67, 49, 104, 65, 78, 110, 71, 100, 57, 85, 78, 117, 69, 107, 88, 115, 103, 117, 85, 121, 57, 56, 115, 122, 110, 119, 97, 103, 103, 105, 101].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x935d8c9dcf3085133edf44cf19dbd718u128, 0xae119a7835f5b452eddd026ff09b56fu128).calculate_compressed_wif(false).iter().zip([76, 50, 65, 65, 112, 66, 85, 113, 77, 83, 70, 89, 85, 52, 51, 74, 72, 105, 100, 106, 75, 71, 83, 88, 116, 77, 122, 102, 116, 119, 85, 87, 81, 101, 76, 81, 111, 106, 86, 50, 65, 55, 111, 115, 49, 105, 112, 90, 118, 85, 75, 51].iter()).all(|(a,b)| a == b), "Arrays are not equal");
        assert!(U256::new(0x5198266f4a31fbf82056a446dca4aca0u128, 0xbc0a78de4e5665337ecc81d04286c87au128).calculate_compressed_wif(false).iter().zip([75, 121, 120, 75, 86, 82, 68, 121, 75, 80, 86, 57, 82, 98, 69, 54, 99, 51, 83, 117, 86, 117, 55, 107, 81, 57, 118, 85, 113, 111, 68, 52, 76, 76, 82, 116, 77, 100, 110, 54, 113, 106, 89, 50, 65, 117, 57, 76, 49, 89, 102, 110].iter()).all(|(a,b)| a == b), "Arrays are not equal");
    }
}
